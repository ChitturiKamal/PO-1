//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PO.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TETechuvaDBContext : DbContext
    {
        public TETechuvaDBContext()
            : base("name=TETechuvaDBContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ApplicationErrorLog> ApplicationErrorLogs { get; set; }
        public virtual DbSet<CATEGORYMASTER> CATEGORYMASTERs { get; set; }
        public virtual DbSet<CENTRALCOMMENT> CENTRALCOMMENTS { get; set; }
        public virtual DbSet<CITYMASTER> CITYMASTERs { get; set; }
        public virtual DbSet<ConsultantIncentive> ConsultantIncentives { get; set; }
        public virtual DbSet<CPRMASTER> CPRMASTERs { get; set; }
        public virtual DbSet<DataBaseLog> DataBaseLogs { get; set; }
        public virtual DbSet<EBUILDPRICEBOOK> EBUILDPRICEBOOKs { get; set; }
        public virtual DbSet<EBUILDPRICING> EBUILDPRICINGs { get; set; }
        public virtual DbSet<EmployeeInfoLog> EmployeeInfoLogs { get; set; }
        public virtual DbSet<empnew> empnews { get; set; }
        public virtual DbSet<JDPriceBook> JDPriceBooks { get; set; }
        public virtual DbSet<JDPriceBookElement> JDPriceBookElements { get; set; }
        public virtual DbSet<LeadTransaction> LeadTransactions { get; set; }
        public virtual DbSet<LeadTransactionWithAttachment> LeadTransactionWithAttachments { get; set; }
        public virtual DbSet<MyTeamReport> MyTeamReports { get; set; }
        public virtual DbSet<pdfDummy> pdfDummies { get; set; }
        public virtual DbSet<POApprovalCondition> POApprovalConditions { get; set; }
        public virtual DbSet<POMasterApprover> POMasterApprovers { get; set; }
        public virtual DbSet<PRICEPUSHDETAIL> PRICEPUSHDETAILS { get; set; }
        public virtual DbSet<PRODUCTMASTER> PRODUCTMASTERs { get; set; }
        public virtual DbSet<projectMaster> projectMasters { get; set; }
        public virtual DbSet<R_TEContactOrganisationRepresentatives> R_TEContactOrganisationRepresentatives { get; set; }
        public virtual DbSet<R_TEEmailMessage_TEEdmTemplate> R_TEEmailMessage_TEEdmTemplate { get; set; }
        public virtual DbSet<R_TERecipient_TEEmailSuppression> R_TERecipient_TEEmailSuppression { get; set; }
        public virtual DbSet<R_TERelationshipsOfContact> R_TERelationshipsOfContact { get; set; }
        public virtual DbSet<RATEMASTER> RATEMASTERs { get; set; }
        public virtual DbSet<RATEMASTERPRICING> RATEMASTERPRICINGs { get; set; }
        public virtual DbSet<RATEMASTERUSERSESSION> RATEMASTERUSERSESSIONs { get; set; }
        public virtual DbSet<ScheduleDetail> ScheduleDetails { get; set; }
        public virtual DbSet<SERVERDETAIL> SERVERDETAILS { get; set; }
        public virtual DbSet<SUBCATEGORYMASTER> SUBCATEGORYMASTERs { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TE_Customer_Templates> TE_Customer_Templates { get; set; }
        public virtual DbSet<TE_Doc_Prj_Templates> TE_Doc_Prj_Templates { get; set; }
        public virtual DbSet<TE_Document_Templates> TE_Document_Templates { get; set; }
        public virtual DbSet<TE_Ref_Document_Type> TE_Ref_Document_Type { get; set; }
        public virtual DbSet<TE_Ref_Methods> TE_Ref_Methods { get; set; }
        public virtual DbSet<TE_Ref_ProjVarMapping> TE_Ref_ProjVarMapping { get; set; }
        public virtual DbSet<TE_Ref_Template_Type> TE_Ref_Template_Type { get; set; }
        public virtual DbSet<TE_Ref_Variables> TE_Ref_Variables { get; set; }
        public virtual DbSet<TE_Ref_VarTempMapping> TE_Ref_VarTempMapping { get; set; }
        public virtual DbSet<TE_Templates_Mapping> TE_Templates_Mapping { get; set; }
        public virtual DbSet<TE_VendorInvoice_Header> TE_VendorInvoice_Header { get; set; }
        public virtual DbSet<TEAboutu> TEAboutus { get; set; }
        public virtual DbSet<TEAccountTransfer> TEAccountTransfers { get; set; }
        public virtual DbSet<TEAction> TEActions { get; set; }
        public virtual DbSet<TEActivityTimelineInfo> TEActivityTimelineInfoes { get; set; }
        public virtual DbSet<TEAgreementsAndTemplate> TEAgreementsAndTemplates { get; set; }
        public virtual DbSet<TEAgreementTemplate> TEAgreementTemplates { get; set; }
        public virtual DbSet<TEAnswer> TEAnswers { get; set; }
        public virtual DbSet<TEApplicantAddressDetail> TEApplicantAddressDetails { get; set; }
        public virtual DbSet<TEApplicantBasicDetail> TEApplicantBasicDetails { get; set; }
        public virtual DbSet<TEApplicantComAddress> TEApplicantComAddresses { get; set; }
        public virtual DbSet<TEApplicantEmailDetail> TEApplicantEmailDetails { get; set; }
        public virtual DbSet<TEApplicantFundingDetail> TEApplicantFundingDetails { get; set; }
        public virtual DbSet<TEApplicantIdentityDetail> TEApplicantIdentityDetails { get; set; }
        public virtual DbSet<TEApplicantMobileDetail> TEApplicantMobileDetails { get; set; }
        public virtual DbSet<TEApplicant> TEApplicants { get; set; }
        public virtual DbSet<TEApprovalEntity> TEApprovalEntities { get; set; }
        public virtual DbSet<TEApprovalProcess> TEApprovalProcesses { get; set; }
        public virtual DbSet<TEApprovalProcessing> TEApprovalProcessings { get; set; }
        public virtual DbSet<TEApprovalTransaction> TEApprovalTransactions { get; set; }
        public virtual DbSet<TEApproveBox> TEApproveBoxes { get; set; }
        public virtual DbSet<TEApproveGroup> TEApproveGroups { get; set; }
        public virtual DbSet<TEApproveGroupUser> TEApproveGroupUsers { get; set; }
        public virtual DbSet<TEApproveLevel> TEApproveLevels { get; set; }
        public virtual DbSet<TEApproveObject> TEApproveObjects { get; set; }
        public virtual DbSet<TEApproveStage> TEApproveStages { get; set; }
        public virtual DbSet<TEBalanceTransfer> TEBalanceTransfers { get; set; }
        public virtual DbSet<TEBankDetail> TEBankDetails { get; set; }
        public virtual DbSet<TEBankDetails_HistoryAudit> TEBankDetails_HistoryAudit { get; set; }
        public virtual DbSet<TEBOQCategoryMaster> TEBOQCategoryMasters { get; set; }
        public virtual DbSet<TEBOQItem> TEBOQItems { get; set; }
        public virtual DbSet<TEBOQMaster> TEBOQMasters { get; set; }
        public virtual DbSet<TEBPLeadsStaging> TEBPLeadsStagings { get; set; }
        public virtual DbSet<TEBroadcast> TEBroadcasts { get; set; }
        public virtual DbSet<TEBroadcastDetail> TEBroadcastDetails { get; set; }
        public virtual DbSet<TEBusinessPartner> TEBusinessPartners { get; set; }
        public virtual DbSet<TEBusinessPartnerAgreement> TEBusinessPartnerAgreements { get; set; }
        public virtual DbSet<TEBusinessPartnerB2CAccountDetails> TEBusinessPartnerB2CAccountDetails { get; set; }
        public virtual DbSet<TEBusinessPartnerBrokerFee> TEBusinessPartnerBrokerFees { get; set; }
        public virtual DbSet<TEBusinessPartnersRepresentative> TEBusinessPartnersRepresentatives { get; set; }
        public virtual DbSet<TEBusinessSegmentMaster> TEBusinessSegmentMasters { get; set; }
        public virtual DbSet<TECampaignMaster> TECampaignMasters { get; set; }
        public virtual DbSet<TECancellationBreakup> TECancellationBreakups { get; set; }
        public virtual DbSet<TECancellation> TECancellations { get; set; }
        public virtual DbSet<TECarParkInventory> TECarParkInventories { get; set; }
        public virtual DbSet<TECarPark> TECarParks { get; set; }
        public virtual DbSet<TECarParksMaster> TECarParksMasters { get; set; }
        public virtual DbSet<TECarParksMaster_HistoryAudit> TECarParksMaster_HistoryAudit { get; set; }
        public virtual DbSet<TECarParkSummary> TECarParkSummaries { get; set; }
        public virtual DbSet<TEChangeOrder> TEChangeOrders { get; set; }
        public virtual DbSet<TECollateral> TECollaterals { get; set; }
        public virtual DbSet<TECollection> TECollections { get; set; }
        public virtual DbSet<TECompany> TECompanies { get; set; }
        public virtual DbSet<TECompanyGSTNDetail> TECompanyGSTNDetails { get; set; }
        public virtual DbSet<TEConstructionRateBook> TEConstructionRateBooks { get; set; }
        public virtual DbSet<TEConstructionRateBook_HistoryAudit> TEConstructionRateBook_HistoryAudit { get; set; }
        public virtual DbSet<TEContact> TEContacts { get; set; }
        public virtual DbSet<TEContactAddress> TEContactAddresses { get; set; }
        public virtual DbSet<TEContactAlumni> TEContactAlumnis { get; set; }
        public virtual DbSet<TEContactEmail> TEContactEmails { get; set; }
        public virtual DbSet<TEContactFamilyRelation> TEContactFamilyRelations { get; set; }
        public virtual DbSet<TEContactGPA> TEContactGPAs { get; set; }
        public virtual DbSet<TEContactIdentification> TEContactIdentifications { get; set; }
        public virtual DbSet<TEContactInterest> TEContactInterests { get; set; }
        public virtual DbSet<TEContactMobile> TEContactMobiles { get; set; }
        public virtual DbSet<TEContactNote> TEContactNotes { get; set; }
        public virtual DbSet<TEContactOrderFund> TEContactOrderFunds { get; set; }
        public virtual DbSet<TEContactOrganisation> TEContactOrganisations { get; set; }
        public virtual DbSet<TEContactProfession> TEContactProfessions { get; set; }
        public virtual DbSet<TEContactRegisteredCorrespondanceAddress> TEContactRegisteredCorrespondanceAddresses { get; set; }
        public virtual DbSet<TEContact1> TEContacts1 { get; set; }
        public virtual DbSet<TEContactSocial> TEContactSocials { get; set; }
        public virtual DbSet<TECreditDebitDetail> TECreditDebitDetails { get; set; }
        public virtual DbSet<TECreditDebitGLMapping> TECreditDebitGLMappings { get; set; }
        public virtual DbSet<TECurrencyMaster> TECurrencyMasters { get; set; }
        public virtual DbSet<TECustomerB2CAccountDetails> TECustomerB2CAccountDetails { get; set; }
        public virtual DbSet<TECustomerBOQ> TECustomerBOQs { get; set; }
        public virtual DbSet<TECustomerBOQDetail> TECustomerBOQDetails { get; set; }
        public virtual DbSet<TECustomerEmailTemplate> TECustomerEmailTemplates { get; set; }
        public virtual DbSet<TECustomerEvent> TECustomerEvents { get; set; }
        public virtual DbSet<TECustomisationDataToEBuild> TECustomisationDataToEBuilds { get; set; }
        public virtual DbSet<TECustomizationMileStone> TECustomizationMileStones { get; set; }
        public virtual DbSet<TEDCBreakUp> TEDCBreakUps { get; set; }
        public virtual DbSet<TEDcoumentCatMaster> TEDcoumentCatMasters { get; set; }
        public virtual DbSet<TEDeedOfCancellationDate> TEDeedOfCancellationDates { get; set; }
        public virtual DbSet<TEDefaultCarPark> TEDefaultCarParks { get; set; }
        public virtual DbSet<TEDelayCompensation> TEDelayCompensations { get; set; }
        public virtual DbSet<TEDiscountThresholdRule> TEDiscountThresholdRules { get; set; }
        public virtual DbSet<TEDMSDocument> TEDMSDocuments { get; set; }
        public virtual DbSet<TEDmsUploadBatchUtilityDetail> TEDmsUploadBatchUtilityDetails { get; set; }
        public virtual DbSet<TEDocument> TEDocuments { get; set; }
        public virtual DbSet<TEDocumentSubTypeMaster> TEDocumentSubTypeMasters { get; set; }
        public virtual DbSet<TEDocumentTypeMaster> TEDocumentTypeMasters { get; set; }
        public virtual DbSet<TEEDesignEmployeeSync> TEEDesignEmployeeSyncs { get; set; }
        public virtual DbSet<TEEDesignProductSync> TEEDesignProductSyncs { get; set; }
        public virtual DbSet<TEEDesignProjectSync> TEEDesignProjectSyncs { get; set; }
        public virtual DbSet<TEEDesignUnitSync> TEEDesignUnitSyncs { get; set; }
        public virtual DbSet<TEEMailLink> TEEMailLinks { get; set; }
        public virtual DbSet<TEEmailMessage> TEEmailMessages { get; set; }
        public virtual DbSet<TEEmailStatu> TEEmailStatus { get; set; }
        public virtual DbSet<TEEmailTemplateAttach> TEEmailTemplateAttaches { get; set; }
        public virtual DbSet<TEEmailTemplate> TEEmailTemplates { get; set; }
        public virtual DbSet<TEEmailTriggerEvent> TEEmailTriggerEvents { get; set; }
        public virtual DbSet<TEEmpBasicInfo> TEEmpBasicInfoes { get; set; }
        public virtual DbSet<TEEmpNotification> TEEmpNotifications { get; set; }
        public virtual DbSet<TEEvaluation> TEEvaluations { get; set; }
        public virtual DbSet<TEEvaluationQuestionMaster> TEEvaluationQuestionMasters { get; set; }
        public virtual DbSet<TEEventList> TEEventLists { get; set; }
        public virtual DbSet<TEException> TEExceptions { get; set; }
        public virtual DbSet<TEFinalSOA> TEFinalSOAs { get; set; }
        public virtual DbSet<TEFloorTypeMaster> TEFloorTypeMasters { get; set; }
        public virtual DbSet<TEGenaralNote> TEGenaralNotes { get; set; }
        public virtual DbSet<TEGlobalParameter> TEGlobalParameters { get; set; }
        public virtual DbSet<TEGlobalReassignment> TEGlobalReassignments { get; set; }
        public virtual DbSet<TEGSTNStateMaster> TEGSTNStateMasters { get; set; }
        public virtual DbSet<TEHandoverDate> TEHandoverDates { get; set; }
        public virtual DbSet<TEIncentiveSlab> TEIncentiveSlabs { get; set; }
        public virtual DbSet<TEIncentiveSlabMaster> TEIncentiveSlabMasters { get; set; }
        public virtual DbSet<TEIncentivesMaster> TEIncentivesMasters { get; set; }
        public virtual DbSet<TEIncrementalPriceBook> TEIncrementalPriceBooks { get; set; }
        public virtual DbSet<TEIncrementalSchemePriceBook> TEIncrementalSchemePriceBooks { get; set; }
        public virtual DbSet<TEInterestInvoice> TEInterestInvoices { get; set; }
        public virtual DbSet<TEInterestInvoiceBreakup> TEInterestInvoiceBreakups { get; set; }
        public virtual DbSet<TEInvoice> TEInvoices { get; set; }
        public virtual DbSet<TEInVoiceBreakUp> TEInVoiceBreakUps { get; set; }
        public virtual DbSet<TEInvoiceCancellationAdvice> TEInvoiceCancellationAdvices { get; set; }
        public virtual DbSet<TEInvoiceCancellationAdviceBreakUp> TEInvoiceCancellationAdviceBreakUps { get; set; }
        public virtual DbSet<TEInvoiceCreditNote> TEInvoiceCreditNotes { get; set; }
        public virtual DbSet<TEInvoiceCreditNoteBreakUp> TEInvoiceCreditNoteBreakUps { get; set; }
        public virtual DbSet<TELandParcelBreakupDetail> TELandParcelBreakupDetails { get; set; }
        public virtual DbSet<TELandParcelDetail> TELandParcelDetails { get; set; }
        public virtual DbSet<TELead> TELeads { get; set; }
        public virtual DbSet<TELeadAllocationRatio> TELeadAllocationRatios { get; set; }
        public virtual DbSet<TELeadStageMaster> TELeadStageMasters { get; set; }
        public virtual DbSet<TELeadTag> TELeadTags { get; set; }
        public virtual DbSet<TELocation> TELocations { get; set; }
        public virtual DbSet<TEMasterRule> TEMasterRules { get; set; }
        public virtual DbSet<TEMasterSmsTemplate> TEMasterSmsTemplates { get; set; }
        public virtual DbSet<TEMasterSpecialCondition> TEMasterSpecialConditions { get; set; }
        public virtual DbSet<TEMasterTermsCondition> TEMasterTermsConditions { get; set; }
        public virtual DbSet<TEMileStonesMaster> TEMileStonesMasters { get; set; }
        public virtual DbSet<TEMileStonesMaster_HistoryAudit> TEMileStonesMaster_HistoryAudit { get; set; }
        public virtual DbSet<TEMobileAppVersionMgmt> TEMobileAppVersionMgmts { get; set; }
        public virtual DbSet<TEMultiplePremium> TEMultiplePremiums { get; set; }
        public virtual DbSet<TENote> TENotes { get; set; }
        public virtual DbSet<TENotification_History> TENotification_History { get; set; }
        public virtual DbSet<TENotification> TENotifications { get; set; }
        public virtual DbSet<TEOffer> TEOffers { get; set; }
        public virtual DbSet<TEOfferApprovalCheck> TEOfferApprovalChecks { get; set; }
        public virtual DbSet<TEOfferApprovalsHistory> TEOfferApprovalsHistories { get; set; }
        public virtual DbSet<TEOfferDocument> TEOfferDocuments { get; set; }
        public virtual DbSet<TEOfferEventsDate> TEOfferEventsDates { get; set; }
        public virtual DbSet<TEOfferExpireExtension> TEOfferExpireExtensions { get; set; }
        public virtual DbSet<TEOfferMileStone> TEOfferMileStones { get; set; }
        public virtual DbSet<TEOfferPremium> TEOfferPremiums { get; set; }
        public virtual DbSet<TEOfferPriceBreakUpDetail> TEOfferPriceBreakUpDetails { get; set; }
        public virtual DbSet<TEOfferRefund> TEOfferRefunds { get; set; }
        public virtual DbSet<TEOfferScheme> TEOfferSchemes { get; set; }
        public virtual DbSet<TEOfferSpecialCondition> TEOfferSpecialConditions { get; set; }
        public virtual DbSet<TEOfferSpecification> TEOfferSpecifications { get; set; }
        public virtual DbSet<TEOfferSubMileStone> TEOfferSubMileStones { get; set; }
        public virtual DbSet<TEOfferTC> TEOfferTCs { get; set; }
        public virtual DbSet<TEOfferTETaxElementDetail> TEOfferTETaxElementDetails { get; set; }
        public virtual DbSet<TEOfferThreshold> TEOfferThresholds { get; set; }
        public virtual DbSet<TEOrderApplicant> TEOrderApplicants { get; set; }
        public virtual DbSet<TEOrderPaymentSchedule> TEOrderPaymentSchedules { get; set; }
        public virtual DbSet<TEOrgRule> TEOrgRules { get; set; }
        public virtual DbSet<TEPartnerMaster> TEPartnerMasters { get; set; }
        public virtual DbSet<TEPaymentAllocation> TEPaymentAllocations { get; set; }
        public virtual DbSet<TEPDFTemplate> TEPDFTemplates { get; set; }
        public virtual DbSet<TEPersonalDetail> TEPersonalDetails { get; set; }
        public virtual DbSet<TEPersonalInformationData> TEPersonalInformationDatas { get; set; }
        public virtual DbSet<TEPickListItem> TEPickListItems { get; set; }
        public virtual DbSet<TEPickList> TEPickLists { get; set; }
        public virtual DbSet<TEPOAnnexure> TEPOAnnexures { get; set; }
        public virtual DbSet<TEPOAnnexureSpecification> TEPOAnnexureSpecifications { get; set; }
        public virtual DbSet<TEPOApprover> TEPOApprovers { get; set; }
        public virtual DbSet<TEPOAssignment> TEPOAssignments { get; set; }
        public virtual DbSet<TEPOCountryMaster> TEPOCountryMasters { get; set; }
        public virtual DbSet<TEPOCurrencyCodeMaster> TEPOCurrencyCodeMasters { get; set; }
        public virtual DbSet<TEPOFundCenter> TEPOFundCenters { get; set; }
        public virtual DbSet<TEPOFundCenterPOMgrMapping> TEPOFundCenterPOMgrMappings { get; set; }
        public virtual DbSet<TEPOFundCenterUserMapping> TEPOFundCenterUserMappings { get; set; }
        public virtual DbSet<TEPOGLCodeMaster> TEPOGLCodeMasters { get; set; }
        public virtual DbSet<TEPOGSTApplicabilityMapping> TEPOGSTApplicabilityMappings { get; set; }
        public virtual DbSet<TEPOGSTApplicabilityMaster> TEPOGSTApplicabilityMasters { get; set; }
        public virtual DbSet<TEPOHeaderStructure> TEPOHeaderStructures { get; set; }
        public virtual DbSet<TEPOHSNMaster> TEPOHSNMasters { get; set; }
        public virtual DbSet<TEPOHSNTaxCodeMapping> TEPOHSNTaxCodeMappings { get; set; }
        public virtual DbSet<TEPOItemStructure> TEPOItemStructures { get; set; }
        public virtual DbSet<TEPOItemwise> TEPOItemwises { get; set; }
        public virtual DbSet<TEPOLinkedPO> TEPOLinkedPOes { get; set; }
        public virtual DbSet<TEPOPlantStorageDetail> TEPOPlantStorageDetails { get; set; }
        public virtual DbSet<TEPOProjectCompanyPlantMappingMaster> TEPOProjectCompanyPlantMappingMasters { get; set; }
        public virtual DbSet<TEPORegionCodeMaster> TEPORegionCodeMasters { get; set; }
        public virtual DbSet<TEPOReleaseCode> TEPOReleaseCodes { get; set; }
        public virtual DbSet<TEPOService> TEPOServices { get; set; }
        public virtual DbSet<TEPOServiceAnnexure> TEPOServiceAnnexures { get; set; }
        public virtual DbSet<TEPOServiceBreakUp> TEPOServiceBreakUps { get; set; }
        public virtual DbSet<TEPOServiceHeader> TEPOServiceHeaders { get; set; }
        public virtual DbSet<TEPOSpecificationAnnexure> TEPOSpecificationAnnexures { get; set; }
        public virtual DbSet<TEPOSpecificTandCMaster> TEPOSpecificTandCMasters { get; set; }
        public virtual DbSet<TEPOSpecificTCDetail> TEPOSpecificTCDetails { get; set; }
        public virtual DbSet<TEPOSpecificTCSubTitleMaster> TEPOSpecificTCSubTitleMasters { get; set; }
        public virtual DbSet<TEPOSpecificTCTitleMaster> TEPOSpecificTCTitleMasters { get; set; }
        public virtual DbSet<TEPOTerm> TEPOTerms { get; set; }
        public virtual DbSet<TEPOVendorAccountGroupMaster> TEPOVendorAccountGroupMasters { get; set; }
        public virtual DbSet<TEPOVendorCategoryMaster> TEPOVendorCategoryMasters { get; set; }
        public virtual DbSet<TEPOVendorMaster> TEPOVendorMasters { get; set; }
        public virtual DbSet<TEPOVendorMasterDetail> TEPOVendorMasterDetails { get; set; }
        public virtual DbSet<TEPOVendorPaymentMilestone> TEPOVendorPaymentMilestones { get; set; }
        public virtual DbSet<TEPOVendorSchemaGroup> TEPOVendorSchemaGroups { get; set; }
        public virtual DbSet<TEPOVendorWithHoldApplicabilityDetail> TEPOVendorWithHoldApplicabilityDetails { get; set; }
        public virtual DbSet<TEPOWBSFundCentreMapping> TEPOWBSFundCentreMappings { get; set; }
        public virtual DbSet<TEPOWBSMaster> TEPOWBSMasters { get; set; }
        public virtual DbSet<TEPOWithholdingTaxMaster> TEPOWithholdingTaxMasters { get; set; }
        public virtual DbSet<TEPreLeadData> TEPreLeadDatas { get; set; }
        public virtual DbSet<TEPremiumMaster> TEPremiumMasters { get; set; }
        public virtual DbSet<TEPriceBook> TEPriceBooks { get; set; }
        public virtual DbSet<TEPriceBookElement> TEPriceBookElements { get; set; }
        public virtual DbSet<TEPriceBookMaster> TEPriceBookMasters { get; set; }
        public virtual DbSet<TEPriceBookMaster_HistoryAudit> TEPriceBookMaster_HistoryAudit { get; set; }
        public virtual DbSet<TEPriceElementMaster> TEPriceElementMasters { get; set; }
        public virtual DbSet<TEPrimarySource> TEPrimarySources { get; set; }
        public virtual DbSet<TEPRItemsDeliverySchedule> TEPRItemsDeliverySchedules { get; set; }
        public virtual DbSet<TEPRItemStructure> TEPRItemStructures { get; set; }
        public virtual DbSet<TEProduct> TEProducts { get; set; }
        public virtual DbSet<TEProducts_HistoryAudit> TEProducts_HistoryAudit { get; set; }
        public virtual DbSet<TEProductSpecification> TEProductSpecifications { get; set; }
        public virtual DbSet<TEProductSpecMapping> TEProductSpecMappings { get; set; }
        public virtual DbSet<TEProjectCarPark> TEProjectCarParks { get; set; }
        public virtual DbSet<TEProjectDetail> TEProjectDetails { get; set; }
        public virtual DbSet<TEProjectDetails_HistoryAudit> TEProjectDetails_HistoryAudit { get; set; }
        public virtual DbSet<TEProjectPremium> TEProjectPremiums { get; set; }
        public virtual DbSet<TEProjectProductMapping> TEProjectProductMappings { get; set; }
        public virtual DbSet<TEProjectRule> TEProjectRules { get; set; }
        public virtual DbSet<TEProject> TEProjects { get; set; }
        public virtual DbSet<TEProjects_HistoryAudit> TEProjects_HistoryAudit { get; set; }
        public virtual DbSet<TEProjectScheme> TEProjectSchemes { get; set; }
        public virtual DbSet<TEProjectUnitPremium> TEProjectUnitPremiums { get; set; }
        public virtual DbSet<TEPRServiceHeader> TEPRServiceHeaders { get; set; }
        public virtual DbSet<TEPRSpecificationAnnexure> TEPRSpecificationAnnexures { get; set; }
        public virtual DbSet<TEPurchase_OrderTypes> TEPurchase_OrderTypes { get; set; }
        public virtual DbSet<TEPurchaseRequest> TEPurchaseRequests { get; set; }
        public virtual DbSet<TEReimbursement> TEReimbursements { get; set; }
        public virtual DbSet<TESACCodeMaster> TESACCodeMasters { get; set; }
        public virtual DbSet<TESaleMasterTermsandCondition> TESaleMasterTermsandConditions { get; set; }
        public virtual DbSet<TESaleMasterTermsandConditions_HistoryAudit> TESaleMasterTermsandConditions_HistoryAudit { get; set; }
        public virtual DbSet<TESalesPlanandTarget> TESalesPlanandTargets { get; set; }
        public virtual DbSet<TESaleTermsANDCondition> TESaleTermsANDConditions { get; set; }
        public virtual DbSet<TESAPGlobalRule> TESAPGlobalRules { get; set; }
        public virtual DbSet<TESAPInvoice> TESAPInvoices { get; set; }
        public virtual DbSet<TESAPReceipt> TESAPReceipts { get; set; }
        public virtual DbSet<TEScheduleMaster> TEScheduleMasters { get; set; }
        public virtual DbSet<TEScheduleMasterNew> TEScheduleMasterNews { get; set; }
        public virtual DbSet<TESchemaMaster> TESchemaMasters { get; set; }
        public virtual DbSet<TESecondarySource> TESecondarySources { get; set; }
        public virtual DbSet<TESection> TESections { get; set; }
        public virtual DbSet<TEShareDetail> TEShareDetails { get; set; }
        public virtual DbSet<TESmsDetail> TESmsDetails { get; set; }
        public virtual DbSet<TESMSTemplate> TESMSTemplates { get; set; }
        public virtual DbSet<TESMSTriggerEvent> TESMSTriggerEvents { get; set; }
        public virtual DbSet<TESpecificationCategory> TESpecificationCategories { get; set; }
        public virtual DbSet<TESpecificationDetailed> TESpecificationDetaileds { get; set; }
        public virtual DbSet<TESpecificationLibrary> TESpecificationLibraries { get; set; }
        public virtual DbSet<TESpecificationMaster> TESpecificationMasters { get; set; }
        public virtual DbSet<TESpecificationMaster_HistoryAudit> TESpecificationMaster_HistoryAudit { get; set; }
        public virtual DbSet<TESpecificatonSubCategory> TESpecificatonSubCategories { get; set; }
        public virtual DbSet<TEStampDuty> TEStampDuties { get; set; }
        public virtual DbSet<TEStandardSchemeTermsAndCondition> TEStandardSchemeTermsAndConditions { get; set; }
        public virtual DbSet<TESubProductDetail> TESubProductDetails { get; set; }
        public virtual DbSet<TESubProductDetails_HistoryAudit> TESubProductDetails_HistoryAudit { get; set; }
        public virtual DbSet<tesubvention_scheme> tesubvention_scheme { get; set; }
        public virtual DbSet<tesubventionscheme_bank> tesubventionscheme_bank { get; set; }
        public virtual DbSet<tetandccategorymaster> tetandccategorymasters { get; set; }
        public virtual DbSet<TETargetAllocation> TETargetAllocations { get; set; }
        public virtual DbSet<TETask> TETasks { get; set; }
        public virtual DbSet<TETaskFeedBack> TETaskFeedBacks { get; set; }
        public virtual DbSet<TETaxBook> TETaxBooks { get; set; }
        public virtual DbSet<TETaxCodeMaster> TETaxCodeMasters { get; set; }
        public virtual DbSet<TETaxDetail> TETaxDetails { get; set; }
        public virtual DbSet<TETaxDetails_HistoryAudit> TETaxDetails_HistoryAudit { get; set; }
        public virtual DbSet<TETaxElementDetail> TETaxElementDetails { get; set; }
        public virtual DbSet<TETermsAndCondition> TETermsAndConditions { get; set; }
        public virtual DbSet<TETimeLine> TETimeLines { get; set; }
        public virtual DbSet<TETodaysVisit> TETodaysVisits { get; set; }
        public virtual DbSet<TETowerMaster> TETowerMasters { get; set; }
        public virtual DbSet<TETowerMaster_HistoryAudit> TETowerMaster_HistoryAudit { get; set; }
        public virtual DbSet<TETransferOrder> TETransferOrders { get; set; }
        public virtual DbSet<TEUIAuditMaster> TEUIAuditMasters { get; set; }
        public virtual DbSet<TEUIAuditTransaction> TEUIAuditTransactions { get; set; }
        public virtual DbSet<TEUnitPricingShareDetail> TEUnitPricingShareDetails { get; set; }
        public virtual DbSet<TEUnitQue> TEUnitQues { get; set; }
        public virtual DbSet<TEUnit> TEUnits { get; set; }
        public virtual DbSet<TEUnitShareDetial> TEUnitShareDetials { get; set; }
        public virtual DbSet<TEUserModule> TEUserModules { get; set; }
        public virtual DbSet<TEUserPrevilegeMapping> TEUserPrevilegeMappings { get; set; }
        public virtual DbSet<TEUserPrevilege> TEUserPrevileges { get; set; }
        public virtual DbSet<TEUserRoleThresholdMapping> TEUserRoleThresholdMappings { get; set; }
        public virtual DbSet<TEUserRoleThresholdMaster> TEUserRoleThresholdMasters { get; set; }
        public virtual DbSet<TEUsersRole> TEUsersRoles { get; set; }
        public virtual DbSet<TEUsersThreshold> TEUsersThresholds { get; set; }
        public virtual DbSet<TEWebpagesMembership> TEWebpagesMemberships { get; set; }
        public virtual DbSet<TFUserSurvey> TFUserSurveys { get; set; }
        public virtual DbSet<TRANSITIONTOCEMMEASURE> TRANSITIONTOCEMMEASURES { get; set; }
        public virtual DbSet<UserProfile> UserProfiles { get; set; }
        public virtual DbSet<UsersToken> UsersTokens { get; set; }
        public virtual DbSet<WBSMASTER> WBSMASTERs { get; set; }
        public virtual DbSet<WebPageAudit> WebPageAudits { get; set; }
        public virtual DbSet<webpages_Membership> webpages_Membership { get; set; }
        public virtual DbSet<webpages_OAuthMembership> webpages_OAuthMembership { get; set; }
        public virtual DbSet<webpages_Roles> webpages_Roles { get; set; }
        public virtual DbSet<webpages_UsersInRoles> webpages_UsersInRoles { get; set; }
        public virtual DbSet<ADALAuthenticationTable> ADALAuthenticationTables { get; set; }
        public virtual DbSet<FeedbackQuestion> FeedbackQuestions { get; set; }
        public virtual DbSet<RMPRICEDUMMY> RMPRICEDUMMies { get; set; }
        public virtual DbSet<TEEmailTriggerEvents_History> TEEmailTriggerEvents_History { get; set; }
    
        [DbFunction("TETechuvaDBContext", "intlist_to_tbl")]
        public virtual IQueryable<intlist_to_tbl_Result> intlist_to_tbl(string list)
        {
            var listParameter = list != null ?
                new ObjectParameter("list", list) :
                new ObjectParameter("list", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<intlist_to_tbl_Result>("[TETechuvaDBContext].[intlist_to_tbl](@list)", listParameter);
        }
    
        public virtual int DeleteTEConstructionRateBook(Nullable<int> constructionRateBookID, ObjectParameter result)
        {
            var constructionRateBookIDParameter = constructionRateBookID.HasValue ?
                new ObjectParameter("ConstructionRateBookID", constructionRateBookID) :
                new ObjectParameter("ConstructionRateBookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTEConstructionRateBook", constructionRateBookIDParameter, result);
        }
    
        public virtual int DeleteTEOfferDocument(Nullable<int> offerDocumentID, ObjectParameter result)
        {
            var offerDocumentIDParameter = offerDocumentID.HasValue ?
                new ObjectParameter("OfferDocumentID", offerDocumentID) :
                new ObjectParameter("OfferDocumentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTEOfferDocument", offerDocumentIDParameter, result);
        }
    
        public virtual int DeleteTEOfferEventsDate(Nullable<int> offerDateID, ObjectParameter result)
        {
            var offerDateIDParameter = offerDateID.HasValue ?
                new ObjectParameter("OfferDateID", offerDateID) :
                new ObjectParameter("OfferDateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTEOfferEventsDate", offerDateIDParameter, result);
        }
    
        public virtual int DeleteTEOfferExpireExtension(Nullable<int> offerExtensionID, ObjectParameter result)
        {
            var offerExtensionIDParameter = offerExtensionID.HasValue ?
                new ObjectParameter("OfferExtensionID", offerExtensionID) :
                new ObjectParameter("OfferExtensionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTEOfferExpireExtension", offerExtensionIDParameter, result);
        }
    
        public virtual int DeleteTEOfferMileStone(Nullable<int> mileStoneID, ObjectParameter result)
        {
            var mileStoneIDParameter = mileStoneID.HasValue ?
                new ObjectParameter("MileStoneID", mileStoneID) :
                new ObjectParameter("MileStoneID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTEOfferMileStone", mileStoneIDParameter, result);
        }
    
        public virtual int DeleteTEOfferPriceBreakUpDetails(Nullable<int> offerBreakUpDetailsID, ObjectParameter result)
        {
            var offerBreakUpDetailsIDParameter = offerBreakUpDetailsID.HasValue ?
                new ObjectParameter("OfferBreakUpDetailsID", offerBreakUpDetailsID) :
                new ObjectParameter("OfferBreakUpDetailsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTEOfferPriceBreakUpDetails", offerBreakUpDetailsIDParameter, result);
        }
    
        public virtual int DeleteTEOfferSpecialCondition(Nullable<int> offerSpecialID, ObjectParameter result)
        {
            var offerSpecialIDParameter = offerSpecialID.HasValue ?
                new ObjectParameter("OfferSpecialID", offerSpecialID) :
                new ObjectParameter("OfferSpecialID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTEOfferSpecialCondition", offerSpecialIDParameter, result);
        }
    
        public virtual int DeleteTEOfferSpecification(Nullable<int> offerSpecsID, ObjectParameter result)
        {
            var offerSpecsIDParameter = offerSpecsID.HasValue ?
                new ObjectParameter("OfferSpecsID", offerSpecsID) :
                new ObjectParameter("OfferSpecsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTEOfferSpecification", offerSpecsIDParameter, result);
        }
    
        public virtual int DeleteTEOrderPaymentSchedule(Nullable<int> orderPaymentScheduleID, ObjectParameter result)
        {
            var orderPaymentScheduleIDParameter = orderPaymentScheduleID.HasValue ?
                new ObjectParameter("OrderPaymentScheduleID", orderPaymentScheduleID) :
                new ObjectParameter("OrderPaymentScheduleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTEOrderPaymentSchedule", orderPaymentScheduleIDParameter, result);
        }
    
        public virtual int DeleteTEProductSpecifications(Nullable<int> productSpecificationID, ObjectParameter result)
        {
            var productSpecificationIDParameter = productSpecificationID.HasValue ?
                new ObjectParameter("ProductSpecificationID", productSpecificationID) :
                new ObjectParameter("ProductSpecificationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTEProductSpecifications", productSpecificationIDParameter, result);
        }
    
        public virtual ObjectResult<GetAllTECarParkInventoryByCarParkID_Result> GetAllTECarParkInventoryByCarParkID(Nullable<int> carParkID)
        {
            var carParkIDParameter = carParkID.HasValue ?
                new ObjectParameter("CarParkID", carParkID) :
                new ObjectParameter("CarParkID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTECarParkInventoryByCarParkID_Result>("GetAllTECarParkInventoryByCarParkID", carParkIDParameter);
        }
    
        public virtual ObjectResult<GetAllTECarParkInventoryByCarParkInventoryID_Result> GetAllTECarParkInventoryByCarParkInventoryID(Nullable<int> carParkInventoryID)
        {
            var carParkInventoryIDParameter = carParkInventoryID.HasValue ?
                new ObjectParameter("CarParkInventoryID", carParkInventoryID) :
                new ObjectParameter("CarParkInventoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTECarParkInventoryByCarParkInventoryID_Result>("GetAllTECarParkInventoryByCarParkInventoryID", carParkInventoryIDParameter);
        }
    
        public virtual ObjectResult<GetAllTEConstructionRateBook_Result> GetAllTEConstructionRateBook()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTEConstructionRateBook_Result>("GetAllTEConstructionRateBook");
        }
    
        public virtual ObjectResult<GetAllTEConstructionRateBookByProjectID_Result> GetAllTEConstructionRateBookByProjectID(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTEConstructionRateBookByProjectID_Result>("GetAllTEConstructionRateBookByProjectID", projectIDParameter);
        }
    
        public virtual ObjectResult<GetAllTEOffererSpecificationByOfferID_Result> GetAllTEOffererSpecificationByOfferID(Nullable<int> offerID)
        {
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTEOffererSpecificationByOfferID_Result>("GetAllTEOffererSpecificationByOfferID", offerIDParameter);
        }
    
        public virtual ObjectResult<GetAllTEOfferMileStonesByOfferID_Result> GetAllTEOfferMileStonesByOfferID(Nullable<int> offerID)
        {
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTEOfferMileStonesByOfferID_Result>("GetAllTEOfferMileStonesByOfferID", offerIDParameter);
        }
    
        public virtual ObjectResult<GetAllTEOffersDocuments_Result> GetAllTEOffersDocuments(Nullable<int> pageNumber, Nullable<int> pagePerCount)
        {
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pagePerCountParameter = pagePerCount.HasValue ?
                new ObjectParameter("PagePerCount", pagePerCount) :
                new ObjectParameter("PagePerCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTEOffersDocuments_Result>("GetAllTEOffersDocuments", pageNumberParameter, pagePerCountParameter);
        }
    
        public virtual ObjectResult<GetAllTEOffersEventsDate_Result> GetAllTEOffersEventsDate(Nullable<int> pageNumber, Nullable<int> pagePerCount)
        {
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pagePerCountParameter = pagePerCount.HasValue ?
                new ObjectParameter("PagePerCount", pagePerCount) :
                new ObjectParameter("PagePerCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTEOffersEventsDate_Result>("GetAllTEOffersEventsDate", pageNumberParameter, pagePerCountParameter);
        }
    
        public virtual ObjectResult<GetAllTEOffersExpiresByOfferID_Result> GetAllTEOffersExpiresByOfferID(Nullable<int> offerID)
        {
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTEOffersExpiresByOfferID_Result>("GetAllTEOffersExpiresByOfferID", offerIDParameter);
        }
    
        public virtual ObjectResult<GetAllTEOrderPaymentSchedule_Result> GetAllTEOrderPaymentSchedule()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTEOrderPaymentSchedule_Result>("GetAllTEOrderPaymentSchedule");
        }
    
        public virtual ObjectResult<GetAllTEOrgRulesByOrgnizationRuleID_Result> GetAllTEOrgRulesByOrgnizationRuleID(Nullable<int> orgnizationRuleID)
        {
            var orgnizationRuleIDParameter = orgnizationRuleID.HasValue ?
                new ObjectParameter("OrgnizationRuleID", orgnizationRuleID) :
                new ObjectParameter("OrgnizationRuleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTEOrgRulesByOrgnizationRuleID_Result>("GetAllTEOrgRulesByOrgnizationRuleID", orgnizationRuleIDParameter);
        }
    
        public virtual ObjectResult<GetAllTEOrgRulesByProjectID_Result> GetAllTEOrgRulesByProjectID(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTEOrgRulesByProjectID_Result>("GetAllTEOrgRulesByProjectID", projectIDParameter);
        }
    
        public virtual int GetAllTEPremiumMasterByPremiumID(Nullable<int> premiumID)
        {
            var premiumIDParameter = premiumID.HasValue ?
                new ObjectParameter("PremiumID", premiumID) :
                new ObjectParameter("PremiumID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllTEPremiumMasterByPremiumID", premiumIDParameter);
        }
    
        public virtual int GetAllTEProductSpecifications()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllTEProductSpecifications");
        }
    
        public virtual ObjectResult<GetAllTEProjectCarParksByProjectCarParkID_Result> GetAllTEProjectCarParksByProjectCarParkID(Nullable<int> projectCarParkID)
        {
            var projectCarParkIDParameter = projectCarParkID.HasValue ?
                new ObjectParameter("ProjectCarParkID", projectCarParkID) :
                new ObjectParameter("ProjectCarParkID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTEProjectCarParksByProjectCarParkID_Result>("GetAllTEProjectCarParksByProjectCarParkID", projectCarParkIDParameter);
        }
    
        public virtual ObjectResult<GetAllTEProjectCarParksByProjectID_Result> GetAllTEProjectCarParksByProjectID(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTEProjectCarParksByProjectID_Result>("GetAllTEProjectCarParksByProjectID", projectIDParameter);
        }
    
        public virtual ObjectResult<GetAllTEProjectDetailByProjectDetailID_Result> GetAllTEProjectDetailByProjectDetailID(Nullable<int> projectDetailID)
        {
            var projectDetailIDParameter = projectDetailID.HasValue ?
                new ObjectParameter("ProjectDetailID", projectDetailID) :
                new ObjectParameter("ProjectDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTEProjectDetailByProjectDetailID_Result>("GetAllTEProjectDetailByProjectDetailID", projectDetailIDParameter);
        }
    
        public virtual ObjectResult<GetAllTEProjectDetailByProjectID_Result> GetAllTEProjectDetailByProjectID(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTEProjectDetailByProjectID_Result>("GetAllTEProjectDetailByProjectID", projectIDParameter);
        }
    
        public virtual ObjectResult<GetAllTEProjectPremiumByProjectID_Result> GetAllTEProjectPremiumByProjectID(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTEProjectPremiumByProjectID_Result>("GetAllTEProjectPremiumByProjectID", projectIDParameter);
        }
    
        public virtual ObjectResult<GetAllTEProjectPremiumByProjectPremiumID_Result> GetAllTEProjectPremiumByProjectPremiumID(Nullable<int> projectPremiumID)
        {
            var projectPremiumIDParameter = projectPremiumID.HasValue ?
                new ObjectParameter("ProjectPremiumID", projectPremiumID) :
                new ObjectParameter("ProjectPremiumID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTEProjectPremiumByProjectPremiumID_Result>("GetAllTEProjectPremiumByProjectPremiumID", projectPremiumIDParameter);
        }
    
        public virtual int GetProductSpecsbyProductID(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetProductSpecsbyProductID", productIDParameter);
        }
    
        public virtual ObjectResult<GetTECarParksMasterByCarParkMasterID_Result> GetTECarParksMasterByCarParkMasterID(Nullable<int> carParkMasterID)
        {
            var carParkMasterIDParameter = carParkMasterID.HasValue ?
                new ObjectParameter("CarParkMasterID", carParkMasterID) :
                new ObjectParameter("CarParkMasterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTECarParksMasterByCarParkMasterID_Result>("GetTECarParksMasterByCarParkMasterID", carParkMasterIDParameter);
        }
    
        public virtual int GetTEPriceBookMasterByPriceBookID(Nullable<int> priceBookID)
        {
            var priceBookIDParameter = priceBookID.HasValue ?
                new ObjectParameter("PriceBookID", priceBookID) :
                new ObjectParameter("PriceBookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTEPriceBookMasterByPriceBookID", priceBookIDParameter);
        }
    
        public virtual int GetTEPriceBookMasterByProductID(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTEPriceBookMasterByProductID", productIdParameter);
        }
    
        public virtual int GetTEPriceBookMasterByProjectID(Nullable<int> projectId)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTEPriceBookMasterByProjectID", projectIdParameter);
        }
    
        public virtual int InsertTEConstructionRateBook(string baseRateFrom, string baseRateTo, Nullable<decimal> rate, Nullable<int> projectID, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var baseRateFromParameter = baseRateFrom != null ?
                new ObjectParameter("BaseRateFrom", baseRateFrom) :
                new ObjectParameter("BaseRateFrom", typeof(string));
    
            var baseRateToParameter = baseRateTo != null ?
                new ObjectParameter("BaseRateTo", baseRateTo) :
                new ObjectParameter("BaseRateTo", typeof(string));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTEConstructionRateBook", baseRateFromParameter, baseRateToParameter, rateParameter, projectIDParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int InsertTEOrderPaymentSchedule(Nullable<int> projectID, Nullable<int> towerID, Nullable<int> productID, Nullable<int> scheduleID, Nullable<System.DateTime> baseLinedDate, Nullable<System.DateTime> scheduledDate, string revenueType, Nullable<int> mileStoneTypeID, string mileStoneInterval, Nullable<decimal> revenueValue, Nullable<int> lostModifiedBy, Nullable<System.DateTime> lostModifiedDate, ObjectParameter result)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("TowerID", towerID) :
                new ObjectParameter("TowerID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            var baseLinedDateParameter = baseLinedDate.HasValue ?
                new ObjectParameter("BaseLinedDate", baseLinedDate) :
                new ObjectParameter("BaseLinedDate", typeof(System.DateTime));
    
            var scheduledDateParameter = scheduledDate.HasValue ?
                new ObjectParameter("ScheduledDate", scheduledDate) :
                new ObjectParameter("ScheduledDate", typeof(System.DateTime));
    
            var revenueTypeParameter = revenueType != null ?
                new ObjectParameter("RevenueType", revenueType) :
                new ObjectParameter("RevenueType", typeof(string));
    
            var mileStoneTypeIDParameter = mileStoneTypeID.HasValue ?
                new ObjectParameter("MileStoneTypeID", mileStoneTypeID) :
                new ObjectParameter("MileStoneTypeID", typeof(int));
    
            var mileStoneIntervalParameter = mileStoneInterval != null ?
                new ObjectParameter("MileStoneInterval", mileStoneInterval) :
                new ObjectParameter("MileStoneInterval", typeof(string));
    
            var revenueValueParameter = revenueValue.HasValue ?
                new ObjectParameter("RevenueValue", revenueValue) :
                new ObjectParameter("RevenueValue", typeof(decimal));
    
            var lostModifiedByParameter = lostModifiedBy.HasValue ?
                new ObjectParameter("LostModifiedBy", lostModifiedBy) :
                new ObjectParameter("LostModifiedBy", typeof(int));
    
            var lostModifiedDateParameter = lostModifiedDate.HasValue ?
                new ObjectParameter("LostModifiedDate", lostModifiedDate) :
                new ObjectParameter("LostModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTEOrderPaymentSchedule", projectIDParameter, towerIDParameter, productIDParameter, scheduleIDParameter, baseLinedDateParameter, scheduledDateParameter, revenueTypeParameter, mileStoneTypeIDParameter, mileStoneIntervalParameter, revenueValueParameter, lostModifiedByParameter, lostModifiedDateParameter, result);
        }
    
        public virtual int InsertTEProductSpecifications(Nullable<int> projectProductID, Nullable<int> specificationLibraryItemID, string applicableSpecification, string revisionID, string specificationBookID, Nullable<int> lostModifiedBy, Nullable<System.DateTime> lostModifiedDate, ObjectParameter result)
        {
            var projectProductIDParameter = projectProductID.HasValue ?
                new ObjectParameter("ProjectProductID", projectProductID) :
                new ObjectParameter("ProjectProductID", typeof(int));
    
            var specificationLibraryItemIDParameter = specificationLibraryItemID.HasValue ?
                new ObjectParameter("SpecificationLibraryItemID", specificationLibraryItemID) :
                new ObjectParameter("SpecificationLibraryItemID", typeof(int));
    
            var applicableSpecificationParameter = applicableSpecification != null ?
                new ObjectParameter("ApplicableSpecification", applicableSpecification) :
                new ObjectParameter("ApplicableSpecification", typeof(string));
    
            var revisionIDParameter = revisionID != null ?
                new ObjectParameter("RevisionID", revisionID) :
                new ObjectParameter("RevisionID", typeof(string));
    
            var specificationBookIDParameter = specificationBookID != null ?
                new ObjectParameter("SpecificationBookID", specificationBookID) :
                new ObjectParameter("SpecificationBookID", typeof(string));
    
            var lostModifiedByParameter = lostModifiedBy.HasValue ?
                new ObjectParameter("LostModifiedBy", lostModifiedBy) :
                new ObjectParameter("LostModifiedBy", typeof(int));
    
            var lostModifiedDateParameter = lostModifiedDate.HasValue ?
                new ObjectParameter("LostModifiedDate", lostModifiedDate) :
                new ObjectParameter("LostModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTEProductSpecifications", projectProductIDParameter, specificationLibraryItemIDParameter, applicableSpecificationParameter, revisionIDParameter, specificationBookIDParameter, lostModifiedByParameter, lostModifiedDateParameter, result);
        }
    
        public virtual int proc_AddException(Nullable<int> dErrorNumber, Nullable<int> dErrorSeverity, Nullable<int> dErrorState, string dErrorProcedure, Nullable<int> dErrorLine, string dErrorMessage, Nullable<System.DateTime> dCurrentDateTime)
        {
            var dErrorNumberParameter = dErrorNumber.HasValue ?
                new ObjectParameter("dErrorNumber", dErrorNumber) :
                new ObjectParameter("dErrorNumber", typeof(int));
    
            var dErrorSeverityParameter = dErrorSeverity.HasValue ?
                new ObjectParameter("dErrorSeverity", dErrorSeverity) :
                new ObjectParameter("dErrorSeverity", typeof(int));
    
            var dErrorStateParameter = dErrorState.HasValue ?
                new ObjectParameter("dErrorState", dErrorState) :
                new ObjectParameter("dErrorState", typeof(int));
    
            var dErrorProcedureParameter = dErrorProcedure != null ?
                new ObjectParameter("dErrorProcedure", dErrorProcedure) :
                new ObjectParameter("dErrorProcedure", typeof(string));
    
            var dErrorLineParameter = dErrorLine.HasValue ?
                new ObjectParameter("dErrorLine", dErrorLine) :
                new ObjectParameter("dErrorLine", typeof(int));
    
            var dErrorMessageParameter = dErrorMessage != null ?
                new ObjectParameter("dErrorMessage", dErrorMessage) :
                new ObjectParameter("dErrorMessage", typeof(string));
    
            var dCurrentDateTimeParameter = dCurrentDateTime.HasValue ?
                new ObjectParameter("dCurrentDateTime", dCurrentDateTime) :
                new ObjectParameter("dCurrentDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddException", dErrorNumberParameter, dErrorSeverityParameter, dErrorStateParameter, dErrorProcedureParameter, dErrorLineParameter, dErrorMessageParameter, dCurrentDateTimeParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateTEConstructionRateBook(Nullable<int> constructionRateBookID, string baseRateFrom, string baseRateTo, Nullable<decimal> rate, Nullable<int> projectID, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var constructionRateBookIDParameter = constructionRateBookID.HasValue ?
                new ObjectParameter("ConstructionRateBookID", constructionRateBookID) :
                new ObjectParameter("ConstructionRateBookID", typeof(int));
    
            var baseRateFromParameter = baseRateFrom != null ?
                new ObjectParameter("BaseRateFrom", baseRateFrom) :
                new ObjectParameter("BaseRateFrom", typeof(string));
    
            var baseRateToParameter = baseRateTo != null ?
                new ObjectParameter("BaseRateTo", baseRateTo) :
                new ObjectParameter("BaseRateTo", typeof(string));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTEConstructionRateBook", constructionRateBookIDParameter, baseRateFromParameter, baseRateToParameter, rateParameter, projectIDParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int UpdateTEOfferDocuments(Nullable<int> offerDocumentID, Nullable<int> offerID, string documentId, string type, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, ObjectParameter result)
        {
            var offerDocumentIDParameter = offerDocumentID.HasValue ?
                new ObjectParameter("OfferDocumentID", offerDocumentID) :
                new ObjectParameter("OfferDocumentID", typeof(int));
    
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            var documentIdParameter = documentId != null ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTEOfferDocuments", offerDocumentIDParameter, offerIDParameter, documentIdParameter, typeParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedOnParameter, result);
        }
    
        public virtual int UpdateTEOfferEventsDate(Nullable<int> offerDateID, string offerLifeCycleDateType, Nullable<System.DateTime> offerLifeCycleDate, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, ObjectParameter result)
        {
            var offerDateIDParameter = offerDateID.HasValue ?
                new ObjectParameter("OfferDateID", offerDateID) :
                new ObjectParameter("OfferDateID", typeof(int));
    
            var offerLifeCycleDateTypeParameter = offerLifeCycleDateType != null ?
                new ObjectParameter("OfferLifeCycleDateType", offerLifeCycleDateType) :
                new ObjectParameter("OfferLifeCycleDateType", typeof(string));
    
            var offerLifeCycleDateParameter = offerLifeCycleDate.HasValue ?
                new ObjectParameter("OfferLifeCycleDate", offerLifeCycleDate) :
                new ObjectParameter("OfferLifeCycleDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTEOfferEventsDate", offerDateIDParameter, offerLifeCycleDateTypeParameter, offerLifeCycleDateParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedOnParameter, result);
        }
    
        public virtual int UpdateTEOfferExpireExtension(Nullable<int> offerExtensionID, Nullable<int> offerID, Nullable<System.DateTime> currentExpiredate, Nullable<System.DateTime> requestedExpiredate, Nullable<int> submittedBy, Nullable<System.DateTime> submittedOn, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, ObjectParameter result)
        {
            var offerExtensionIDParameter = offerExtensionID.HasValue ?
                new ObjectParameter("OfferExtensionID", offerExtensionID) :
                new ObjectParameter("OfferExtensionID", typeof(int));
    
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            var currentExpiredateParameter = currentExpiredate.HasValue ?
                new ObjectParameter("CurrentExpiredate", currentExpiredate) :
                new ObjectParameter("CurrentExpiredate", typeof(System.DateTime));
    
            var requestedExpiredateParameter = requestedExpiredate.HasValue ?
                new ObjectParameter("RequestedExpiredate", requestedExpiredate) :
                new ObjectParameter("RequestedExpiredate", typeof(System.DateTime));
    
            var submittedByParameter = submittedBy.HasValue ?
                new ObjectParameter("SubmittedBy", submittedBy) :
                new ObjectParameter("SubmittedBy", typeof(int));
    
            var submittedOnParameter = submittedOn.HasValue ?
                new ObjectParameter("SubmittedOn", submittedOn) :
                new ObjectParameter("SubmittedOn", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTEOfferExpireExtension", offerExtensionIDParameter, offerIDParameter, currentExpiredateParameter, requestedExpiredateParameter, submittedByParameter, submittedOnParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedOnParameter, result);
        }
    
        public virtual int UpdateTEOfferMileStone(Nullable<int> mileStoneID, Nullable<int> offerID, Nullable<int> sEQNO, string name, string code, Nullable<System.DateTime> offeredDate, Nullable<decimal> offeredAmount, Nullable<System.DateTime> projectionDate, Nullable<System.DateTime> completionDate, string status, Nullable<decimal> totalEstimatedTax, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, ObjectParameter result)
        {
            var mileStoneIDParameter = mileStoneID.HasValue ?
                new ObjectParameter("MileStoneID", mileStoneID) :
                new ObjectParameter("MileStoneID", typeof(int));
    
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            var sEQNOParameter = sEQNO.HasValue ?
                new ObjectParameter("SEQNO", sEQNO) :
                new ObjectParameter("SEQNO", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var offeredDateParameter = offeredDate.HasValue ?
                new ObjectParameter("OfferedDate", offeredDate) :
                new ObjectParameter("OfferedDate", typeof(System.DateTime));
    
            var offeredAmountParameter = offeredAmount.HasValue ?
                new ObjectParameter("OfferedAmount", offeredAmount) :
                new ObjectParameter("OfferedAmount", typeof(decimal));
    
            var projectionDateParameter = projectionDate.HasValue ?
                new ObjectParameter("ProjectionDate", projectionDate) :
                new ObjectParameter("ProjectionDate", typeof(System.DateTime));
    
            var completionDateParameter = completionDate.HasValue ?
                new ObjectParameter("CompletionDate", completionDate) :
                new ObjectParameter("CompletionDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var totalEstimatedTaxParameter = totalEstimatedTax.HasValue ?
                new ObjectParameter("TotalEstimatedTax", totalEstimatedTax) :
                new ObjectParameter("TotalEstimatedTax", typeof(decimal));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTEOfferMileStone", mileStoneIDParameter, offerIDParameter, sEQNOParameter, nameParameter, codeParameter, offeredDateParameter, offeredAmountParameter, projectionDateParameter, completionDateParameter, statusParameter, totalEstimatedTaxParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedOnParameter, result);
        }
    
        public virtual int UpdateTEOfferPriceBreakUpDetails(Nullable<int> offerBreakUpDetailsID, Nullable<int> offerID, string priceElementname, Nullable<decimal> priceElementQuantity, Nullable<decimal> priceElementRate, Nullable<decimal> priceElementPrice, string saleableAreaBasis, string elementType, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, ObjectParameter result)
        {
            var offerBreakUpDetailsIDParameter = offerBreakUpDetailsID.HasValue ?
                new ObjectParameter("OfferBreakUpDetailsID", offerBreakUpDetailsID) :
                new ObjectParameter("OfferBreakUpDetailsID", typeof(int));
    
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            var priceElementnameParameter = priceElementname != null ?
                new ObjectParameter("PriceElementname", priceElementname) :
                new ObjectParameter("PriceElementname", typeof(string));
    
            var priceElementQuantityParameter = priceElementQuantity.HasValue ?
                new ObjectParameter("PriceElementQuantity", priceElementQuantity) :
                new ObjectParameter("PriceElementQuantity", typeof(decimal));
    
            var priceElementRateParameter = priceElementRate.HasValue ?
                new ObjectParameter("PriceElementRate", priceElementRate) :
                new ObjectParameter("PriceElementRate", typeof(decimal));
    
            var priceElementPriceParameter = priceElementPrice.HasValue ?
                new ObjectParameter("PriceElementPrice", priceElementPrice) :
                new ObjectParameter("PriceElementPrice", typeof(decimal));
    
            var saleableAreaBasisParameter = saleableAreaBasis != null ?
                new ObjectParameter("SaleableAreaBasis", saleableAreaBasis) :
                new ObjectParameter("SaleableAreaBasis", typeof(string));
    
            var elementTypeParameter = elementType != null ?
                new ObjectParameter("ElementType", elementType) :
                new ObjectParameter("ElementType", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTEOfferPriceBreakUpDetails", offerBreakUpDetailsIDParameter, offerIDParameter, priceElementnameParameter, priceElementQuantityParameter, priceElementRateParameter, priceElementPriceParameter, saleableAreaBasisParameter, elementTypeParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedOnParameter, result);
        }
    
        public virtual int UpdateTEOfferSpecialCondition(Nullable<int> offerSpecialID, Nullable<int> offerID, string specialConditionName, string sPConditionCategory, string value, string sPConditionType, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, ObjectParameter result)
        {
            var offerSpecialIDParameter = offerSpecialID.HasValue ?
                new ObjectParameter("OfferSpecialID", offerSpecialID) :
                new ObjectParameter("OfferSpecialID", typeof(int));
    
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            var specialConditionNameParameter = specialConditionName != null ?
                new ObjectParameter("SpecialConditionName", specialConditionName) :
                new ObjectParameter("SpecialConditionName", typeof(string));
    
            var sPConditionCategoryParameter = sPConditionCategory != null ?
                new ObjectParameter("SPConditionCategory", sPConditionCategory) :
                new ObjectParameter("SPConditionCategory", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var sPConditionTypeParameter = sPConditionType != null ?
                new ObjectParameter("SPConditionType", sPConditionType) :
                new ObjectParameter("SPConditionType", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTEOfferSpecialCondition", offerSpecialIDParameter, offerIDParameter, specialConditionNameParameter, sPConditionCategoryParameter, valueParameter, sPConditionTypeParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedOnParameter, result);
        }
    
        public virtual int UpdateTEOfferSpecification(Nullable<int> offerSpecsID, Nullable<int> offerID, Nullable<int> sPecsID, string specsColourCode, string specsCtegory, string specsSubCategory, string specsDescription, Nullable<int> sEQNO, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, ObjectParameter result)
        {
            var offerSpecsIDParameter = offerSpecsID.HasValue ?
                new ObjectParameter("OfferSpecsID", offerSpecsID) :
                new ObjectParameter("OfferSpecsID", typeof(int));
    
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            var sPecsIDParameter = sPecsID.HasValue ?
                new ObjectParameter("SPecsID", sPecsID) :
                new ObjectParameter("SPecsID", typeof(int));
    
            var specsColourCodeParameter = specsColourCode != null ?
                new ObjectParameter("SpecsColourCode", specsColourCode) :
                new ObjectParameter("SpecsColourCode", typeof(string));
    
            var specsCtegoryParameter = specsCtegory != null ?
                new ObjectParameter("SpecsCtegory", specsCtegory) :
                new ObjectParameter("SpecsCtegory", typeof(string));
    
            var specsSubCategoryParameter = specsSubCategory != null ?
                new ObjectParameter("SpecsSubCategory", specsSubCategory) :
                new ObjectParameter("SpecsSubCategory", typeof(string));
    
            var specsDescriptionParameter = specsDescription != null ?
                new ObjectParameter("SpecsDescription", specsDescription) :
                new ObjectParameter("SpecsDescription", typeof(string));
    
            var sEQNOParameter = sEQNO.HasValue ?
                new ObjectParameter("SEQNO", sEQNO) :
                new ObjectParameter("SEQNO", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTEOfferSpecification", offerSpecsIDParameter, offerIDParameter, sPecsIDParameter, specsColourCodeParameter, specsCtegoryParameter, specsSubCategoryParameter, specsDescriptionParameter, sEQNOParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedOnParameter, result);
        }
    
        public virtual int UpdateTEOrderPaymentSchedule(Nullable<int> orderPaymentScheduleID, Nullable<int> projectID, Nullable<int> towerID, Nullable<int> productID, Nullable<int> scheduleID, Nullable<System.DateTime> baseLinedDate, Nullable<System.DateTime> scheduledDate, string revenueType, Nullable<int> mileStoneTypeID, string mileStoneInterval, Nullable<decimal> revenueValue, Nullable<int> lostModifiedBy, Nullable<System.DateTime> lostModifiedDate, ObjectParameter result)
        {
            var orderPaymentScheduleIDParameter = orderPaymentScheduleID.HasValue ?
                new ObjectParameter("OrderPaymentScheduleID", orderPaymentScheduleID) :
                new ObjectParameter("OrderPaymentScheduleID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("TowerID", towerID) :
                new ObjectParameter("TowerID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            var baseLinedDateParameter = baseLinedDate.HasValue ?
                new ObjectParameter("BaseLinedDate", baseLinedDate) :
                new ObjectParameter("BaseLinedDate", typeof(System.DateTime));
    
            var scheduledDateParameter = scheduledDate.HasValue ?
                new ObjectParameter("ScheduledDate", scheduledDate) :
                new ObjectParameter("ScheduledDate", typeof(System.DateTime));
    
            var revenueTypeParameter = revenueType != null ?
                new ObjectParameter("RevenueType", revenueType) :
                new ObjectParameter("RevenueType", typeof(string));
    
            var mileStoneTypeIDParameter = mileStoneTypeID.HasValue ?
                new ObjectParameter("MileStoneTypeID", mileStoneTypeID) :
                new ObjectParameter("MileStoneTypeID", typeof(int));
    
            var mileStoneIntervalParameter = mileStoneInterval != null ?
                new ObjectParameter("MileStoneInterval", mileStoneInterval) :
                new ObjectParameter("MileStoneInterval", typeof(string));
    
            var revenueValueParameter = revenueValue.HasValue ?
                new ObjectParameter("RevenueValue", revenueValue) :
                new ObjectParameter("RevenueValue", typeof(decimal));
    
            var lostModifiedByParameter = lostModifiedBy.HasValue ?
                new ObjectParameter("LostModifiedBy", lostModifiedBy) :
                new ObjectParameter("LostModifiedBy", typeof(int));
    
            var lostModifiedDateParameter = lostModifiedDate.HasValue ?
                new ObjectParameter("LostModifiedDate", lostModifiedDate) :
                new ObjectParameter("LostModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTEOrderPaymentSchedule", orderPaymentScheduleIDParameter, projectIDParameter, towerIDParameter, productIDParameter, scheduleIDParameter, baseLinedDateParameter, scheduledDateParameter, revenueTypeParameter, mileStoneTypeIDParameter, mileStoneIntervalParameter, revenueValueParameter, lostModifiedByParameter, lostModifiedDateParameter, result);
        }
    
        public virtual int UpdateTEProductSpecifications(Nullable<int> productSpecificationID, Nullable<int> projectProductID, Nullable<int> specificationLibraryItemID, string applicableSpecification, string revisionID, string specificationBookID, Nullable<int> lostModifiedBy, Nullable<System.DateTime> lostModifiedDate, ObjectParameter result)
        {
            var productSpecificationIDParameter = productSpecificationID.HasValue ?
                new ObjectParameter("ProductSpecificationID", productSpecificationID) :
                new ObjectParameter("ProductSpecificationID", typeof(int));
    
            var projectProductIDParameter = projectProductID.HasValue ?
                new ObjectParameter("ProjectProductID", projectProductID) :
                new ObjectParameter("ProjectProductID", typeof(int));
    
            var specificationLibraryItemIDParameter = specificationLibraryItemID.HasValue ?
                new ObjectParameter("SpecificationLibraryItemID", specificationLibraryItemID) :
                new ObjectParameter("SpecificationLibraryItemID", typeof(int));
    
            var applicableSpecificationParameter = applicableSpecification != null ?
                new ObjectParameter("ApplicableSpecification", applicableSpecification) :
                new ObjectParameter("ApplicableSpecification", typeof(string));
    
            var revisionIDParameter = revisionID != null ?
                new ObjectParameter("RevisionID", revisionID) :
                new ObjectParameter("RevisionID", typeof(string));
    
            var specificationBookIDParameter = specificationBookID != null ?
                new ObjectParameter("SpecificationBookID", specificationBookID) :
                new ObjectParameter("SpecificationBookID", typeof(string));
    
            var lostModifiedByParameter = lostModifiedBy.HasValue ?
                new ObjectParameter("LostModifiedBy", lostModifiedBy) :
                new ObjectParameter("LostModifiedBy", typeof(int));
    
            var lostModifiedDateParameter = lostModifiedDate.HasValue ?
                new ObjectParameter("LostModifiedDate", lostModifiedDate) :
                new ObjectParameter("LostModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTEProductSpecifications", productSpecificationIDParameter, projectProductIDParameter, specificationLibraryItemIDParameter, applicableSpecificationParameter, revisionIDParameter, specificationBookIDParameter, lostModifiedByParameter, lostModifiedDateParameter, result);
        }
    
        public virtual int UserProfile_DeleteUserProfile(Nullable<int> userId, ObjectParameter result)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserProfile_DeleteUserProfile", userIdParameter, result);
        }
    
        public virtual int usp_webpages_Roles_Insertwebpages_Roles(string roleName, string bizAppId, Nullable<bool> isDeleted, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var bizAppIdParameter = bizAppId != null ?
                new ObjectParameter("BizAppId", bizAppId) :
                new ObjectParameter("BizAppId", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_webpages_Roles_Insertwebpages_Roles", roleNameParameter, bizAppIdParameter, isDeletedParameter, lastModifiedDateParameter, result);
        }
    
        public virtual ObjectResult<uspbyMasterSpecialConditionID_Result> uspbyMasterSpecialConditionID(Nullable<int> masterSpecialConditionID)
        {
            var masterSpecialConditionIDParameter = masterSpecialConditionID.HasValue ?
                new ObjectParameter("MasterSpecialConditionID", masterSpecialConditionID) :
                new ObjectParameter("MasterSpecialConditionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspbyMasterSpecialConditionID_Result>("uspbyMasterSpecialConditionID", masterSpecialConditionIDParameter);
        }
    
        public virtual int uspByMasterTermsandConditionID(Nullable<int> masterTermsandConditionID)
        {
            var masterTermsandConditionIDParameter = masterTermsandConditionID.HasValue ?
                new ObjectParameter("MasterTermsandConditionID", masterTermsandConditionID) :
                new ObjectParameter("MasterTermsandConditionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspByMasterTermsandConditionID", masterTermsandConditionIDParameter);
        }
    
        public virtual ObjectResult<uspByOrderPaymentScheduleID_Result> uspByOrderPaymentScheduleID(Nullable<int> orderPaymentScheduleID)
        {
            var orderPaymentScheduleIDParameter = orderPaymentScheduleID.HasValue ?
                new ObjectParameter("OrderPaymentScheduleID", orderPaymentScheduleID) :
                new ObjectParameter("OrderPaymentScheduleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspByOrderPaymentScheduleID_Result>("uspByOrderPaymentScheduleID", orderPaymentScheduleIDParameter);
        }
    
        public virtual int uspByProductSpecificationID(Nullable<int> productSpecificationID)
        {
            var productSpecificationIDParameter = productSpecificationID.HasValue ?
                new ObjectParameter("ProductSpecificationID", productSpecificationID) :
                new ObjectParameter("ProductSpecificationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspByProductSpecificationID", productSpecificationIDParameter);
        }
    
        public virtual ObjectResult<uspByProjectUnitPremiumID_Result> uspByProjectUnitPremiumID(Nullable<int> projectUnitPremiumID)
        {
            var projectUnitPremiumIDParameter = projectUnitPremiumID.HasValue ?
                new ObjectParameter("ProjectUnitPremiumID", projectUnitPremiumID) :
                new ObjectParameter("ProjectUnitPremiumID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspByProjectUnitPremiumID_Result>("uspByProjectUnitPremiumID", projectUnitPremiumIDParameter);
        }
    
        public virtual int uspDeleteTEStandardSchemeTermsAndConditions(Nullable<int> standardSchemaTermsAndConditionID, ObjectParameter result)
        {
            var standardSchemaTermsAndConditionIDParameter = standardSchemaTermsAndConditionID.HasValue ?
                new ObjectParameter("StandardSchemaTermsAndConditionID", standardSchemaTermsAndConditionID) :
                new ObjectParameter("StandardSchemaTermsAndConditionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteTEStandardSchemeTermsAndConditions", standardSchemaTermsAndConditionIDParameter, result);
        }
    
        public virtual ObjectResult<uspGetAllTEStandardSchemeTermsAndConditions_Result> uspGetAllTEStandardSchemeTermsAndConditions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAllTEStandardSchemeTermsAndConditions_Result>("uspGetAllTEStandardSchemeTermsAndConditions");
        }
    
        public virtual int uspGetTEProductSpecificationByProductID(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetTEProductSpecificationByProductID", productIDParameter);
        }
    
        public virtual ObjectResult<uspGetTESpecificationDetailedBySpecificationDetailedID_Result> uspGetTESpecificationDetailedBySpecificationDetailedID(Nullable<int> specificationDetailedID)
        {
            var specificationDetailedIDParameter = specificationDetailedID.HasValue ?
                new ObjectParameter("SpecificationDetailedID", specificationDetailedID) :
                new ObjectParameter("SpecificationDetailedID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetTESpecificationDetailedBySpecificationDetailedID_Result>("uspGetTESpecificationDetailedBySpecificationDetailedID", specificationDetailedIDParameter);
        }
    
        public virtual int uspInsertTEStandardSchemeTermsAndConditions(Nullable<int> projectID, Nullable<int> productID, string seqNo, Nullable<int> tandCID, Nullable<bool> isTEORJD, Nullable<int> schemaID, Nullable<bool> isDelete, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var seqNoParameter = seqNo != null ?
                new ObjectParameter("SeqNo", seqNo) :
                new ObjectParameter("SeqNo", typeof(string));
    
            var tandCIDParameter = tandCID.HasValue ?
                new ObjectParameter("TandCID", tandCID) :
                new ObjectParameter("TandCID", typeof(int));
    
            var isTEORJDParameter = isTEORJD.HasValue ?
                new ObjectParameter("IsTEORJD", isTEORJD) :
                new ObjectParameter("IsTEORJD", typeof(bool));
    
            var schemaIDParameter = schemaID.HasValue ?
                new ObjectParameter("SchemaID", schemaID) :
                new ObjectParameter("SchemaID", typeof(int));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertTEStandardSchemeTermsAndConditions", projectIDParameter, productIDParameter, seqNoParameter, tandCIDParameter, isTEORJDParameter, schemaIDParameter, isDeleteParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEApplicants_CreateInsert(Nullable<int> contextID, Nullable<int> contactID, string type, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, ObjectParameter result)
        {
            var contextIDParameter = contextID.HasValue ?
                new ObjectParameter("ContextID", contextID) :
                new ObjectParameter("ContextID", typeof(int));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEApplicants_CreateInsert", contextIDParameter, contactIDParameter, typeParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedOnParameter, result);
        }
    
        public virtual int uspTEApplicants_DeleteTEApplicant(Nullable<int> applicantID, ObjectParameter result)
        {
            var applicantIDParameter = applicantID.HasValue ?
                new ObjectParameter("ApplicantID", applicantID) :
                new ObjectParameter("ApplicantID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEApplicants_DeleteTEApplicant", applicantIDParameter, result);
        }
    
        public virtual ObjectResult<uspTEApplicants_GetAllTEApplicants_Result> uspTEApplicants_GetAllTEApplicants()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEApplicants_GetAllTEApplicants_Result>("uspTEApplicants_GetAllTEApplicants");
        }
    
        public virtual ObjectResult<uspTEApplicants_GetAllTEApplicantsByContactID_Result> uspTEApplicants_GetAllTEApplicantsByContactID(Nullable<int> contactID)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEApplicants_GetAllTEApplicantsByContactID_Result>("uspTEApplicants_GetAllTEApplicantsByContactID", contactIDParameter);
        }
    
        public virtual int uspTEApplicants_UpdateTEApplicants(Nullable<int> applicantID, Nullable<int> contextID, Nullable<int> contactID, string type, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, ObjectParameter result)
        {
            var applicantIDParameter = applicantID.HasValue ?
                new ObjectParameter("ApplicantID", applicantID) :
                new ObjectParameter("ApplicantID", typeof(int));
    
            var contextIDParameter = contextID.HasValue ?
                new ObjectParameter("ContextID", contextID) :
                new ObjectParameter("ContextID", typeof(int));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEApplicants_UpdateTEApplicants", applicantIDParameter, contextIDParameter, contactIDParameter, typeParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedOnParameter, result);
        }
    
        public virtual int uspTEBankDetails_DeleteTEBankDetails(Nullable<int> bankDetailsID, ObjectParameter result)
        {
            var bankDetailsIDParameter = bankDetailsID.HasValue ?
                new ObjectParameter("BankDetailsID", bankDetailsID) :
                new ObjectParameter("BankDetailsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEBankDetails_DeleteTEBankDetails", bankDetailsIDParameter, result);
        }
    
        public virtual int uspTEBankDetails_InsertTEBankDetails(Nullable<int> projectID, string towerID, string collectionType, string accountName, string accountNumber, string bankCategory, string bankName, string city, string branchName, string mICRCode, string iFSCSWiftCode, string swiftCode, string sapBankCode, string type, string bankAddress, Nullable<int> companyID, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var towerIDParameter = towerID != null ?
                new ObjectParameter("TowerID", towerID) :
                new ObjectParameter("TowerID", typeof(string));
    
            var collectionTypeParameter = collectionType != null ?
                new ObjectParameter("CollectionType", collectionType) :
                new ObjectParameter("CollectionType", typeof(string));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var bankCategoryParameter = bankCategory != null ?
                new ObjectParameter("BankCategory", bankCategory) :
                new ObjectParameter("BankCategory", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var mICRCodeParameter = mICRCode != null ?
                new ObjectParameter("MICRCode", mICRCode) :
                new ObjectParameter("MICRCode", typeof(string));
    
            var iFSCSWiftCodeParameter = iFSCSWiftCode != null ?
                new ObjectParameter("IFSCSWiftCode", iFSCSWiftCode) :
                new ObjectParameter("IFSCSWiftCode", typeof(string));
    
            var swiftCodeParameter = swiftCode != null ?
                new ObjectParameter("SwiftCode", swiftCode) :
                new ObjectParameter("SwiftCode", typeof(string));
    
            var sapBankCodeParameter = sapBankCode != null ?
                new ObjectParameter("SapBankCode", sapBankCode) :
                new ObjectParameter("SapBankCode", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var bankAddressParameter = bankAddress != null ?
                new ObjectParameter("BankAddress", bankAddress) :
                new ObjectParameter("BankAddress", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEBankDetails_InsertTEBankDetails", projectIDParameter, towerIDParameter, collectionTypeParameter, accountNameParameter, accountNumberParameter, bankCategoryParameter, bankNameParameter, cityParameter, branchNameParameter, mICRCodeParameter, iFSCSWiftCodeParameter, swiftCodeParameter, sapBankCodeParameter, typeParameter, bankAddressParameter, companyIDParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEBankDetails_UpdateTEBankDetails(Nullable<int> bankDetailsID, Nullable<int> projectID, string towerID, string collectionType, string accountName, string accountNumber, string bankCategory, string bankName, string city, string branchName, string mICRCode, string iFSCSWiftCode, string swiftCode, string sapBankCode, string type, string bankAddress, Nullable<int> companyID, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var bankDetailsIDParameter = bankDetailsID.HasValue ?
                new ObjectParameter("BankDetailsID", bankDetailsID) :
                new ObjectParameter("BankDetailsID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var towerIDParameter = towerID != null ?
                new ObjectParameter("TowerID", towerID) :
                new ObjectParameter("TowerID", typeof(string));
    
            var collectionTypeParameter = collectionType != null ?
                new ObjectParameter("CollectionType", collectionType) :
                new ObjectParameter("CollectionType", typeof(string));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var bankCategoryParameter = bankCategory != null ?
                new ObjectParameter("BankCategory", bankCategory) :
                new ObjectParameter("BankCategory", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var mICRCodeParameter = mICRCode != null ?
                new ObjectParameter("MICRCode", mICRCode) :
                new ObjectParameter("MICRCode", typeof(string));
    
            var iFSCSWiftCodeParameter = iFSCSWiftCode != null ?
                new ObjectParameter("IFSCSWiftCode", iFSCSWiftCode) :
                new ObjectParameter("IFSCSWiftCode", typeof(string));
    
            var swiftCodeParameter = swiftCode != null ?
                new ObjectParameter("SwiftCode", swiftCode) :
                new ObjectParameter("SwiftCode", typeof(string));
    
            var sapBankCodeParameter = sapBankCode != null ?
                new ObjectParameter("SapBankCode", sapBankCode) :
                new ObjectParameter("SapBankCode", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var bankAddressParameter = bankAddress != null ?
                new ObjectParameter("BankAddress", bankAddress) :
                new ObjectParameter("BankAddress", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEBankDetails_UpdateTEBankDetails", bankDetailsIDParameter, projectIDParameter, towerIDParameter, collectionTypeParameter, accountNameParameter, accountNumberParameter, bankCategoryParameter, bankNameParameter, cityParameter, branchNameParameter, mICRCodeParameter, iFSCSWiftCodeParameter, swiftCodeParameter, sapBankCodeParameter, typeParameter, bankAddressParameter, companyIDParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEBusinessSegmentMaster_DeleteTEBusinessSegmentMaster(Nullable<int> businessSegmentID, ObjectParameter result)
        {
            var businessSegmentIDParameter = businessSegmentID.HasValue ?
                new ObjectParameter("BusinessSegmentID", businessSegmentID) :
                new ObjectParameter("BusinessSegmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEBusinessSegmentMaster_DeleteTEBusinessSegmentMaster", businessSegmentIDParameter, result);
        }
    
        public virtual ObjectResult<uspTEBusinessSegmentMaster_GetAllTEBusinessSegmentMaster_Result> uspTEBusinessSegmentMaster_GetAllTEBusinessSegmentMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEBusinessSegmentMaster_GetAllTEBusinessSegmentMaster_Result>("uspTEBusinessSegmentMaster_GetAllTEBusinessSegmentMaster");
        }
    
        public virtual int uspTEBusinessSegmentMaster_InsertTEBusinessSegmentMaster(string businessSegmentName, string businessSegmentCode, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var businessSegmentNameParameter = businessSegmentName != null ?
                new ObjectParameter("BusinessSegmentName", businessSegmentName) :
                new ObjectParameter("BusinessSegmentName", typeof(string));
    
            var businessSegmentCodeParameter = businessSegmentCode != null ?
                new ObjectParameter("BusinessSegmentCode", businessSegmentCode) :
                new ObjectParameter("BusinessSegmentCode", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEBusinessSegmentMaster_InsertTEBusinessSegmentMaster", businessSegmentNameParameter, businessSegmentCodeParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEBusinessSegmentMaster_UpdateTEBusinessSegmentMaster(Nullable<int> businessSegmentID, string businessSegmentName, string businessSegmentCode, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var businessSegmentIDParameter = businessSegmentID.HasValue ?
                new ObjectParameter("BusinessSegmentID", businessSegmentID) :
                new ObjectParameter("BusinessSegmentID", typeof(int));
    
            var businessSegmentNameParameter = businessSegmentName != null ?
                new ObjectParameter("BusinessSegmentName", businessSegmentName) :
                new ObjectParameter("BusinessSegmentName", typeof(string));
    
            var businessSegmentCodeParameter = businessSegmentCode != null ?
                new ObjectParameter("BusinessSegmentCode", businessSegmentCode) :
                new ObjectParameter("BusinessSegmentCode", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEBusinessSegmentMaster_UpdateTEBusinessSegmentMaster", businessSegmentIDParameter, businessSegmentNameParameter, businessSegmentCodeParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual ObjectResult<uspTEBusinessSid_Result> uspTEBusinessSid(Nullable<int> businessSegmentID)
        {
            var businessSegmentIDParameter = businessSegmentID.HasValue ?
                new ObjectParameter("BusinessSegmentID", businessSegmentID) :
                new ObjectParameter("BusinessSegmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEBusinessSid_Result>("uspTEBusinessSid", businessSegmentIDParameter);
        }
    
        public virtual ObjectResult<uspTEbyConstructionRateBookID_Result> uspTEbyConstructionRateBookID(Nullable<int> constructionRateBookID)
        {
            var constructionRateBookIDParameter = constructionRateBookID.HasValue ?
                new ObjectParameter("ConstructionRateBookID", constructionRateBookID) :
                new ObjectParameter("ConstructionRateBookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEbyConstructionRateBookID_Result>("uspTEbyConstructionRateBookID", constructionRateBookIDParameter);
        }
    
        public virtual int uspTECAancellations_DeleteTECancellations(Nullable<int> cancellationsID, ObjectParameter result)
        {
            var cancellationsIDParameter = cancellationsID.HasValue ?
                new ObjectParameter("CancellationsID", cancellationsID) :
                new ObjectParameter("CancellationsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTECAancellations_DeleteTECancellations", cancellationsIDParameter, result);
        }
    
        public virtual int uspTECampaignMaster_DeleteTECampaignMaster(Nullable<int> mCMID, ObjectParameter result)
        {
            var mCMIDParameter = mCMID.HasValue ?
                new ObjectParameter("MCMID", mCMID) :
                new ObjectParameter("MCMID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTECampaignMaster_DeleteTECampaignMaster", mCMIDParameter, result);
        }
    
        public virtual ObjectResult<uspTECampaignMaster_GetAllTECampaignMaster_Result> uspTECampaignMaster_GetAllTECampaignMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECampaignMaster_GetAllTECampaignMaster_Result>("uspTECampaignMaster_GetAllTECampaignMaster");
        }
    
        public virtual ObjectResult<uspTECampaignMaster_GetAllTECampaignMasterByMCMID_Result> uspTECampaignMaster_GetAllTECampaignMasterByMCMID(Nullable<int> mCMID)
        {
            var mCMIDParameter = mCMID.HasValue ?
                new ObjectParameter("MCMID", mCMID) :
                new ObjectParameter("MCMID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECampaignMaster_GetAllTECampaignMasterByMCMID_Result>("uspTECampaignMaster_GetAllTECampaignMasterByMCMID", mCMIDParameter);
        }
    
        public virtual int uspTECampaignMaster_InsertTECampaignMaster(string name, string agencyCode, Nullable<decimal> overHeadCost, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var agencyCodeParameter = agencyCode != null ?
                new ObjectParameter("AgencyCode", agencyCode) :
                new ObjectParameter("AgencyCode", typeof(string));
    
            var overHeadCostParameter = overHeadCost.HasValue ?
                new ObjectParameter("OverHeadCost", overHeadCost) :
                new ObjectParameter("OverHeadCost", typeof(decimal));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTECampaignMaster_InsertTECampaignMaster", nameParameter, agencyCodeParameter, overHeadCostParameter, fromDateParameter, toDateParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTECampaignMaster_UpdateTECampaignMaster(Nullable<int> mCMID, string name, string agencyCode, Nullable<decimal> overHeadCost, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var mCMIDParameter = mCMID.HasValue ?
                new ObjectParameter("MCMID", mCMID) :
                new ObjectParameter("MCMID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var agencyCodeParameter = agencyCode != null ?
                new ObjectParameter("AgencyCode", agencyCode) :
                new ObjectParameter("AgencyCode", typeof(string));
    
            var overHeadCostParameter = overHeadCost.HasValue ?
                new ObjectParameter("OverHeadCost", overHeadCost) :
                new ObjectParameter("OverHeadCost", typeof(decimal));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTECampaignMaster_UpdateTECampaignMaster", mCMIDParameter, nameParameter, agencyCodeParameter, overHeadCostParameter, fromDateParameter, toDateParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTECancellations_CreateInsert(Nullable<int> offerID, string cancellationType, string cancellationReason, Nullable<decimal> termSheetValue, Nullable<decimal> totalInvoiceAmount, Nullable<decimal> totalPaid, Nullable<decimal> towardsConsideration, Nullable<decimal> towardsServiceTax, Nullable<decimal> towardsVAT, Nullable<decimal> refundableSWC, Nullable<decimal> cancellationFee, Nullable<decimal> towardsSWC, Nullable<decimal> potentialInterest, Nullable<decimal> brokerageFee, Nullable<decimal> marketingFee, Nullable<decimal> sAmountPaidTowardsConsideration, Nullable<decimal> refundableServiceTax, Nullable<decimal> refundableVAT, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, ObjectParameter result)
        {
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            var cancellationTypeParameter = cancellationType != null ?
                new ObjectParameter("CancellationType", cancellationType) :
                new ObjectParameter("CancellationType", typeof(string));
    
            var cancellationReasonParameter = cancellationReason != null ?
                new ObjectParameter("cancellationReason", cancellationReason) :
                new ObjectParameter("cancellationReason", typeof(string));
    
            var termSheetValueParameter = termSheetValue.HasValue ?
                new ObjectParameter("TermSheetValue", termSheetValue) :
                new ObjectParameter("TermSheetValue", typeof(decimal));
    
            var totalInvoiceAmountParameter = totalInvoiceAmount.HasValue ?
                new ObjectParameter("TotalInvoiceAmount", totalInvoiceAmount) :
                new ObjectParameter("TotalInvoiceAmount", typeof(decimal));
    
            var totalPaidParameter = totalPaid.HasValue ?
                new ObjectParameter("TotalPaid", totalPaid) :
                new ObjectParameter("TotalPaid", typeof(decimal));
    
            var towardsConsiderationParameter = towardsConsideration.HasValue ?
                new ObjectParameter("TowardsConsideration", towardsConsideration) :
                new ObjectParameter("TowardsConsideration", typeof(decimal));
    
            var towardsServiceTaxParameter = towardsServiceTax.HasValue ?
                new ObjectParameter("TowardsServiceTax", towardsServiceTax) :
                new ObjectParameter("TowardsServiceTax", typeof(decimal));
    
            var towardsVATParameter = towardsVAT.HasValue ?
                new ObjectParameter("TowardsVAT", towardsVAT) :
                new ObjectParameter("TowardsVAT", typeof(decimal));
    
            var refundableSWCParameter = refundableSWC.HasValue ?
                new ObjectParameter("RefundableSWC", refundableSWC) :
                new ObjectParameter("RefundableSWC", typeof(decimal));
    
            var cancellationFeeParameter = cancellationFee.HasValue ?
                new ObjectParameter("CancellationFee", cancellationFee) :
                new ObjectParameter("CancellationFee", typeof(decimal));
    
            var towardsSWCParameter = towardsSWC.HasValue ?
                new ObjectParameter("TowardsSWC", towardsSWC) :
                new ObjectParameter("TowardsSWC", typeof(decimal));
    
            var potentialInterestParameter = potentialInterest.HasValue ?
                new ObjectParameter("PotentialInterest", potentialInterest) :
                new ObjectParameter("PotentialInterest", typeof(decimal));
    
            var brokerageFeeParameter = brokerageFee.HasValue ?
                new ObjectParameter("BrokerageFee", brokerageFee) :
                new ObjectParameter("BrokerageFee", typeof(decimal));
    
            var marketingFeeParameter = marketingFee.HasValue ?
                new ObjectParameter("MarketingFee", marketingFee) :
                new ObjectParameter("MarketingFee", typeof(decimal));
    
            var sAmountPaidTowardsConsiderationParameter = sAmountPaidTowardsConsideration.HasValue ?
                new ObjectParameter("SAmountPaidTowardsConsideration", sAmountPaidTowardsConsideration) :
                new ObjectParameter("SAmountPaidTowardsConsideration", typeof(decimal));
    
            var refundableServiceTaxParameter = refundableServiceTax.HasValue ?
                new ObjectParameter("RefundableServiceTax", refundableServiceTax) :
                new ObjectParameter("RefundableServiceTax", typeof(decimal));
    
            var refundableVATParameter = refundableVAT.HasValue ?
                new ObjectParameter("RefundableVAT", refundableVAT) :
                new ObjectParameter("RefundableVAT", typeof(decimal));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTECancellations_CreateInsert", offerIDParameter, cancellationTypeParameter, cancellationReasonParameter, termSheetValueParameter, totalInvoiceAmountParameter, totalPaidParameter, towardsConsiderationParameter, towardsServiceTaxParameter, towardsVATParameter, refundableSWCParameter, cancellationFeeParameter, towardsSWCParameter, potentialInterestParameter, brokerageFeeParameter, marketingFeeParameter, sAmountPaidTowardsConsiderationParameter, refundableServiceTaxParameter, refundableVATParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedOnParameter, result);
        }
    
        public virtual ObjectResult<uspTECancellations_GetAllTECancellationsByOfferID_Result> uspTECancellations_GetAllTECancellationsByOfferID(Nullable<int> pageNumber, Nullable<int> pagePerCount, Nullable<int> offerID)
        {
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pagePerCountParameter = pagePerCount.HasValue ?
                new ObjectParameter("PagePerCount", pagePerCount) :
                new ObjectParameter("PagePerCount", typeof(int));
    
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECancellations_GetAllTECancellationsByOfferID_Result>("uspTECancellations_GetAllTECancellationsByOfferID", pageNumberParameter, pagePerCountParameter, offerIDParameter);
        }
    
        public virtual int uspTECancellations_UpdateTECancellations(Nullable<int> cancellationsID, Nullable<int> offerID, string cancellationType, string cancellationReason, Nullable<decimal> termSheetValue, Nullable<decimal> totalInvoiceAmount, Nullable<decimal> totalPaid, Nullable<decimal> towardsConsideration, Nullable<decimal> towardsServiceTax, Nullable<decimal> towardsVAT, Nullable<decimal> refundableSWC, Nullable<decimal> cancellationFee, Nullable<decimal> towardsSWC, Nullable<decimal> potentialInterest, Nullable<decimal> brokerageFee, Nullable<decimal> marketingFee, Nullable<decimal> sAmountPaidTowardsConsideration, Nullable<decimal> refundableServiceTax, Nullable<decimal> refundableVAT, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, ObjectParameter result)
        {
            var cancellationsIDParameter = cancellationsID.HasValue ?
                new ObjectParameter("CancellationsID", cancellationsID) :
                new ObjectParameter("CancellationsID", typeof(int));
    
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            var cancellationTypeParameter = cancellationType != null ?
                new ObjectParameter("CancellationType", cancellationType) :
                new ObjectParameter("CancellationType", typeof(string));
    
            var cancellationReasonParameter = cancellationReason != null ?
                new ObjectParameter("cancellationReason", cancellationReason) :
                new ObjectParameter("cancellationReason", typeof(string));
    
            var termSheetValueParameter = termSheetValue.HasValue ?
                new ObjectParameter("TermSheetValue", termSheetValue) :
                new ObjectParameter("TermSheetValue", typeof(decimal));
    
            var totalInvoiceAmountParameter = totalInvoiceAmount.HasValue ?
                new ObjectParameter("TotalInvoiceAmount", totalInvoiceAmount) :
                new ObjectParameter("TotalInvoiceAmount", typeof(decimal));
    
            var totalPaidParameter = totalPaid.HasValue ?
                new ObjectParameter("TotalPaid", totalPaid) :
                new ObjectParameter("TotalPaid", typeof(decimal));
    
            var towardsConsiderationParameter = towardsConsideration.HasValue ?
                new ObjectParameter("TowardsConsideration", towardsConsideration) :
                new ObjectParameter("TowardsConsideration", typeof(decimal));
    
            var towardsServiceTaxParameter = towardsServiceTax.HasValue ?
                new ObjectParameter("TowardsServiceTax", towardsServiceTax) :
                new ObjectParameter("TowardsServiceTax", typeof(decimal));
    
            var towardsVATParameter = towardsVAT.HasValue ?
                new ObjectParameter("TowardsVAT", towardsVAT) :
                new ObjectParameter("TowardsVAT", typeof(decimal));
    
            var refundableSWCParameter = refundableSWC.HasValue ?
                new ObjectParameter("RefundableSWC", refundableSWC) :
                new ObjectParameter("RefundableSWC", typeof(decimal));
    
            var cancellationFeeParameter = cancellationFee.HasValue ?
                new ObjectParameter("CancellationFee", cancellationFee) :
                new ObjectParameter("CancellationFee", typeof(decimal));
    
            var towardsSWCParameter = towardsSWC.HasValue ?
                new ObjectParameter("TowardsSWC", towardsSWC) :
                new ObjectParameter("TowardsSWC", typeof(decimal));
    
            var potentialInterestParameter = potentialInterest.HasValue ?
                new ObjectParameter("PotentialInterest", potentialInterest) :
                new ObjectParameter("PotentialInterest", typeof(decimal));
    
            var brokerageFeeParameter = brokerageFee.HasValue ?
                new ObjectParameter("BrokerageFee", brokerageFee) :
                new ObjectParameter("BrokerageFee", typeof(decimal));
    
            var marketingFeeParameter = marketingFee.HasValue ?
                new ObjectParameter("MarketingFee", marketingFee) :
                new ObjectParameter("MarketingFee", typeof(decimal));
    
            var sAmountPaidTowardsConsiderationParameter = sAmountPaidTowardsConsideration.HasValue ?
                new ObjectParameter("SAmountPaidTowardsConsideration", sAmountPaidTowardsConsideration) :
                new ObjectParameter("SAmountPaidTowardsConsideration", typeof(decimal));
    
            var refundableServiceTaxParameter = refundableServiceTax.HasValue ?
                new ObjectParameter("RefundableServiceTax", refundableServiceTax) :
                new ObjectParameter("RefundableServiceTax", typeof(decimal));
    
            var refundableVATParameter = refundableVAT.HasValue ?
                new ObjectParameter("RefundableVAT", refundableVAT) :
                new ObjectParameter("RefundableVAT", typeof(decimal));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTECancellations_UpdateTECancellations", cancellationsIDParameter, offerIDParameter, cancellationTypeParameter, cancellationReasonParameter, termSheetValueParameter, totalInvoiceAmountParameter, totalPaidParameter, towardsConsiderationParameter, towardsServiceTaxParameter, towardsVATParameter, refundableSWCParameter, cancellationFeeParameter, towardsSWCParameter, potentialInterestParameter, brokerageFeeParameter, marketingFeeParameter, sAmountPaidTowardsConsiderationParameter, refundableServiceTaxParameter, refundableVATParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedOnParameter, result);
        }
    
        public virtual int uspTECarParkInventory_DeleteTECarParkInventory(Nullable<int> carParkInventoryID, ObjectParameter result)
        {
            var carParkInventoryIDParameter = carParkInventoryID.HasValue ?
                new ObjectParameter("CarParkInventoryID", carParkInventoryID) :
                new ObjectParameter("CarParkInventoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTECarParkInventory_DeleteTECarParkInventory", carParkInventoryIDParameter, result);
        }
    
        public virtual ObjectResult<uspTECarParkInventory_GetAllTECarParkInventory_Result> uspTECarParkInventory_GetAllTECarParkInventory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECarParkInventory_GetAllTECarParkInventory_Result>("uspTECarParkInventory_GetAllTECarParkInventory");
        }
    
        public virtual int uspTECarParkInventory_InsertTECarParkInventory(Nullable<int> carParkID, Nullable<int> carParkNumber, Nullable<int> allocationOrderID, string allocatedOn, string allocationDocumentID, string towerProximityID, string carParkFeatures, string carParkInventoryStatus, string lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var carParkIDParameter = carParkID.HasValue ?
                new ObjectParameter("CarParkID", carParkID) :
                new ObjectParameter("CarParkID", typeof(int));
    
            var carParkNumberParameter = carParkNumber.HasValue ?
                new ObjectParameter("CarParkNumber", carParkNumber) :
                new ObjectParameter("CarParkNumber", typeof(int));
    
            var allocationOrderIDParameter = allocationOrderID.HasValue ?
                new ObjectParameter("AllocationOrderID", allocationOrderID) :
                new ObjectParameter("AllocationOrderID", typeof(int));
    
            var allocatedOnParameter = allocatedOn != null ?
                new ObjectParameter("AllocatedOn", allocatedOn) :
                new ObjectParameter("AllocatedOn", typeof(string));
    
            var allocationDocumentIDParameter = allocationDocumentID != null ?
                new ObjectParameter("AllocationDocumentID", allocationDocumentID) :
                new ObjectParameter("AllocationDocumentID", typeof(string));
    
            var towerProximityIDParameter = towerProximityID != null ?
                new ObjectParameter("TowerProximityID", towerProximityID) :
                new ObjectParameter("TowerProximityID", typeof(string));
    
            var carParkFeaturesParameter = carParkFeatures != null ?
                new ObjectParameter("CarParkFeatures", carParkFeatures) :
                new ObjectParameter("CarParkFeatures", typeof(string));
    
            var carParkInventoryStatusParameter = carParkInventoryStatus != null ?
                new ObjectParameter("CarParkInventoryStatus", carParkInventoryStatus) :
                new ObjectParameter("CarParkInventoryStatus", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy != null ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(string));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTECarParkInventory_InsertTECarParkInventory", carParkIDParameter, carParkNumberParameter, allocationOrderIDParameter, allocatedOnParameter, allocationDocumentIDParameter, towerProximityIDParameter, carParkFeaturesParameter, carParkInventoryStatusParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTECarParkInventory_UpdateTECarParkInventory(Nullable<int> carParkInventoryID, Nullable<int> carParkID, Nullable<int> carParkNumber, Nullable<int> allocationOrderID, string allocatedOn, string allocationDocumentID, string towerProximityID, string carParkFeatures, string carParkInventoryStatus, string lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var carParkInventoryIDParameter = carParkInventoryID.HasValue ?
                new ObjectParameter("CarParkInventoryID", carParkInventoryID) :
                new ObjectParameter("CarParkInventoryID", typeof(int));
    
            var carParkIDParameter = carParkID.HasValue ?
                new ObjectParameter("CarParkID", carParkID) :
                new ObjectParameter("CarParkID", typeof(int));
    
            var carParkNumberParameter = carParkNumber.HasValue ?
                new ObjectParameter("CarParkNumber", carParkNumber) :
                new ObjectParameter("CarParkNumber", typeof(int));
    
            var allocationOrderIDParameter = allocationOrderID.HasValue ?
                new ObjectParameter("AllocationOrderID", allocationOrderID) :
                new ObjectParameter("AllocationOrderID", typeof(int));
    
            var allocatedOnParameter = allocatedOn != null ?
                new ObjectParameter("AllocatedOn", allocatedOn) :
                new ObjectParameter("AllocatedOn", typeof(string));
    
            var allocationDocumentIDParameter = allocationDocumentID != null ?
                new ObjectParameter("AllocationDocumentID", allocationDocumentID) :
                new ObjectParameter("AllocationDocumentID", typeof(string));
    
            var towerProximityIDParameter = towerProximityID != null ?
                new ObjectParameter("TowerProximityID", towerProximityID) :
                new ObjectParameter("TowerProximityID", typeof(string));
    
            var carParkFeaturesParameter = carParkFeatures != null ?
                new ObjectParameter("CarParkFeatures", carParkFeatures) :
                new ObjectParameter("CarParkFeatures", typeof(string));
    
            var carParkInventoryStatusParameter = carParkInventoryStatus != null ?
                new ObjectParameter("CarParkInventoryStatus", carParkInventoryStatus) :
                new ObjectParameter("CarParkInventoryStatus", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy != null ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(string));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTECarParkInventory_UpdateTECarParkInventory", carParkInventoryIDParameter, carParkIDParameter, carParkNumberParameter, allocationOrderIDParameter, allocatedOnParameter, allocationDocumentIDParameter, towerProximityIDParameter, carParkFeaturesParameter, carParkInventoryStatusParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTECarParks_CreateInsert(Nullable<int> offerID, string typeName, Nullable<int> noOfCarparks, Nullable<decimal> costOfPerCarParkRate, Nullable<decimal> totalCarParkPrice, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, ObjectParameter result)
        {
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            var noOfCarparksParameter = noOfCarparks.HasValue ?
                new ObjectParameter("NoOfCarparks", noOfCarparks) :
                new ObjectParameter("NoOfCarparks", typeof(int));
    
            var costOfPerCarParkRateParameter = costOfPerCarParkRate.HasValue ?
                new ObjectParameter("CostOfPerCarParkRate", costOfPerCarParkRate) :
                new ObjectParameter("CostOfPerCarParkRate", typeof(decimal));
    
            var totalCarParkPriceParameter = totalCarParkPrice.HasValue ?
                new ObjectParameter("TotalCarParkPrice", totalCarParkPrice) :
                new ObjectParameter("TotalCarParkPrice", typeof(decimal));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTECarParks_CreateInsert", offerIDParameter, typeNameParameter, noOfCarparksParameter, costOfPerCarParkRateParameter, totalCarParkPriceParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedOnParameter, result);
        }
    
        public virtual int uspTECarParks_DeleteTECarPark(Nullable<int> carParkID, ObjectParameter result)
        {
            var carParkIDParameter = carParkID.HasValue ?
                new ObjectParameter("CarParkID", carParkID) :
                new ObjectParameter("CarParkID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTECarParks_DeleteTECarPark", carParkIDParameter, result);
        }
    
        public virtual ObjectResult<uspTECarParks_GetAllTECarParks_Result> uspTECarParks_GetAllTECarParks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECarParks_GetAllTECarParks_Result>("uspTECarParks_GetAllTECarParks");
        }
    
        public virtual ObjectResult<uspTECarParks_GetAllTECarParksByOfferID_Result> uspTECarParks_GetAllTECarParksByOfferID(Nullable<int> offerId)
        {
            var offerIdParameter = offerId.HasValue ?
                new ObjectParameter("OfferId", offerId) :
                new ObjectParameter("OfferId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECarParks_GetAllTECarParksByOfferID_Result>("uspTECarParks_GetAllTECarParksByOfferID", offerIdParameter);
        }
    
        public virtual int uspTECarParks_UpdateTECarParks(Nullable<int> carParkID, Nullable<int> offerID, string typeName, Nullable<int> noOfCarparks, Nullable<decimal> costOfPerCarParkRate, Nullable<decimal> totalCarParkPrice, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, ObjectParameter result)
        {
            var carParkIDParameter = carParkID.HasValue ?
                new ObjectParameter("CarParkID", carParkID) :
                new ObjectParameter("CarParkID", typeof(int));
    
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            var noOfCarparksParameter = noOfCarparks.HasValue ?
                new ObjectParameter("NoOfCarparks", noOfCarparks) :
                new ObjectParameter("NoOfCarparks", typeof(int));
    
            var costOfPerCarParkRateParameter = costOfPerCarParkRate.HasValue ?
                new ObjectParameter("CostOfPerCarParkRate", costOfPerCarParkRate) :
                new ObjectParameter("CostOfPerCarParkRate", typeof(decimal));
    
            var totalCarParkPriceParameter = totalCarParkPrice.HasValue ?
                new ObjectParameter("TotalCarParkPrice", totalCarParkPrice) :
                new ObjectParameter("TotalCarParkPrice", typeof(decimal));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTECarParks_UpdateTECarParks", carParkIDParameter, offerIDParameter, typeNameParameter, noOfCarparksParameter, costOfPerCarParkRateParameter, totalCarParkPriceParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedOnParameter, result);
        }
    
        public virtual int uspTECarParksMaster_DeleteTECarParksMaster(Nullable<int> carParkMasterID, ObjectParameter result)
        {
            var carParkMasterIDParameter = carParkMasterID.HasValue ?
                new ObjectParameter("CarParkMasterID", carParkMasterID) :
                new ObjectParameter("CarParkMasterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTECarParksMaster_DeleteTECarParksMaster", carParkMasterIDParameter, result);
        }
    
        public virtual ObjectResult<uspTECarParksMaster_GetAllTECarParksMaster_Result> uspTECarParksMaster_GetAllTECarParksMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECarParksMaster_GetAllTECarParksMaster_Result>("uspTECarParksMaster_GetAllTECarParksMaster");
        }
    
        public virtual int uspTECarParksMaster_InsertTECarParksMaster(string carParkShortName, string carParkDimension, string description, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var carParkShortNameParameter = carParkShortName != null ?
                new ObjectParameter("CarParkShortName", carParkShortName) :
                new ObjectParameter("CarParkShortName", typeof(string));
    
            var carParkDimensionParameter = carParkDimension != null ?
                new ObjectParameter("CarParkDimension", carParkDimension) :
                new ObjectParameter("CarParkDimension", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTECarParksMaster_InsertTECarParksMaster", carParkShortNameParameter, carParkDimensionParameter, descriptionParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTECarParksMaster_UpdateTECarParksMaster(Nullable<int> carParkMasterID, string carParkShortName, string carParkDimension, string description, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var carParkMasterIDParameter = carParkMasterID.HasValue ?
                new ObjectParameter("CarParkMasterID", carParkMasterID) :
                new ObjectParameter("CarParkMasterID", typeof(int));
    
            var carParkShortNameParameter = carParkShortName != null ?
                new ObjectParameter("CarParkShortName", carParkShortName) :
                new ObjectParameter("CarParkShortName", typeof(string));
    
            var carParkDimensionParameter = carParkDimension != null ?
                new ObjectParameter("CarParkDimension", carParkDimension) :
                new ObjectParameter("CarParkDimension", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTECarParksMaster_UpdateTECarParksMaster", carParkMasterIDParameter, carParkShortNameParameter, carParkDimensionParameter, descriptionParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTECarParkSummary_DeleteTECarParkSummary(Nullable<int> carParkID, ObjectParameter result)
        {
            var carParkIDParameter = carParkID.HasValue ?
                new ObjectParameter("CarParkID", carParkID) :
                new ObjectParameter("CarParkID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTECarParkSummary_DeleteTECarParkSummary", carParkIDParameter, result);
        }
    
        public virtual ObjectResult<uspTECarParkSummary_GetAllTECarParkSummary_Result> uspTECarParkSummary_GetAllTECarParkSummary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECarParkSummary_GetAllTECarParkSummary_Result>("uspTECarParkSummary_GetAllTECarParkSummary");
        }
    
        public virtual ObjectResult<uspTECarParkSummary_GetAllTECarParkSummaryByCarParkID_Result> uspTECarParkSummary_GetAllTECarParkSummaryByCarParkID(Nullable<int> carParkID)
        {
            var carParkIDParameter = carParkID.HasValue ?
                new ObjectParameter("CarParkID", carParkID) :
                new ObjectParameter("CarParkID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECarParkSummary_GetAllTECarParkSummaryByCarParkID_Result>("uspTECarParkSummary_GetAllTECarParkSummaryByCarParkID", carParkIDParameter);
        }
    
        public virtual int uspTECarParkSummary_InsertTECarParkSummary(string carParkName, Nullable<decimal> ratePerCarPark, string description, Nullable<int> lostModifiedby, Nullable<System.DateTime> lostModifiedDate, ObjectParameter result)
        {
            var carParkNameParameter = carParkName != null ?
                new ObjectParameter("CarParkName", carParkName) :
                new ObjectParameter("CarParkName", typeof(string));
    
            var ratePerCarParkParameter = ratePerCarPark.HasValue ?
                new ObjectParameter("RatePerCarPark", ratePerCarPark) :
                new ObjectParameter("RatePerCarPark", typeof(decimal));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var lostModifiedbyParameter = lostModifiedby.HasValue ?
                new ObjectParameter("LostModifiedby", lostModifiedby) :
                new ObjectParameter("LostModifiedby", typeof(int));
    
            var lostModifiedDateParameter = lostModifiedDate.HasValue ?
                new ObjectParameter("LostModifiedDate", lostModifiedDate) :
                new ObjectParameter("LostModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTECarParkSummary_InsertTECarParkSummary", carParkNameParameter, ratePerCarParkParameter, descriptionParameter, lostModifiedbyParameter, lostModifiedDateParameter, result);
        }
    
        public virtual int uspTECarParkSummary_UpdateTECarParkSummary(Nullable<int> carParkID, string carParkName, Nullable<decimal> ratePerCarPark, string description, Nullable<int> lostModifiedby, Nullable<System.DateTime> lostModifiedDate, ObjectParameter result)
        {
            var carParkIDParameter = carParkID.HasValue ?
                new ObjectParameter("CarParkID", carParkID) :
                new ObjectParameter("CarParkID", typeof(int));
    
            var carParkNameParameter = carParkName != null ?
                new ObjectParameter("CarParkName", carParkName) :
                new ObjectParameter("CarParkName", typeof(string));
    
            var ratePerCarParkParameter = ratePerCarPark.HasValue ?
                new ObjectParameter("RatePerCarPark", ratePerCarPark) :
                new ObjectParameter("RatePerCarPark", typeof(decimal));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var lostModifiedbyParameter = lostModifiedby.HasValue ?
                new ObjectParameter("LostModifiedby", lostModifiedby) :
                new ObjectParameter("LostModifiedby", typeof(int));
    
            var lostModifiedDateParameter = lostModifiedDate.HasValue ?
                new ObjectParameter("LostModifiedDate", lostModifiedDate) :
                new ObjectParameter("LostModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTECarParkSummary_UpdateTECarParkSummary", carParkIDParameter, carParkNameParameter, ratePerCarParkParameter, descriptionParameter, lostModifiedbyParameter, lostModifiedDateParameter, result);
        }
    
        public virtual ObjectResult<uspTECEM_GetCancelledCustomerDetails_Result> uspTECEM_GetCancelledCustomerDetails(string projectId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetCancelledCustomerDetails_Result>("uspTECEM_GetCancelledCustomerDetails", projectIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetCancelledCustomerDetailsForCEM_Result> uspTECEM_GetCancelledCustomerDetailsForCEM(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetCancelledCustomerDetailsForCEM_Result>("uspTECEM_GetCancelledCustomerDetailsForCEM", userIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetDelayCompensationDetails_Result> uspTECEM_GetDelayCompensationDetails(string projectId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetDelayCompensationDetails_Result>("uspTECEM_GetDelayCompensationDetails", projectIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetDelayCompensatonDetailsForCEM_Result> uspTECEM_GetDelayCompensatonDetailsForCEM(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetDelayCompensatonDetailsForCEM_Result>("uspTECEM_GetDelayCompensatonDetailsForCEM", userIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetFiscalYearSalesDetailsForSalesTracker_Result> uspTECEM_GetFiscalYearSalesDetailsForSalesTracker(string projectId, string passYear)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            var passYearParameter = passYear != null ?
                new ObjectParameter("passYear", passYear) :
                new ObjectParameter("passYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetFiscalYearSalesDetailsForSalesTracker_Result>("uspTECEM_GetFiscalYearSalesDetailsForSalesTracker", projectIdParameter, passYearParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetMonthlySalesDetailsForSalesTracker_Result> uspTECEM_GetMonthlySalesDetailsForSalesTracker(string projectId, Nullable<int> monthPart, Nullable<int> yearPart)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            var monthPartParameter = monthPart.HasValue ?
                new ObjectParameter("monthPart", monthPart) :
                new ObjectParameter("monthPart", typeof(int));
    
            var yearPartParameter = yearPart.HasValue ?
                new ObjectParameter("yearPart", yearPart) :
                new ObjectParameter("yearPart", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetMonthlySalesDetailsForSalesTracker_Result>("uspTECEM_GetMonthlySalesDetailsForSalesTracker", projectIdParameter, monthPartParameter, yearPartParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetMyCustomersSearch_Result> uspTECEM_GetMyCustomersSearch(string projectId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetMyCustomersSearch_Result>("uspTECEM_GetMyCustomersSearch", projectIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetMyCustomersSearchForCEM_Result> uspTECEM_GetMyCustomersSearchForCEM(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetMyCustomersSearchForCEM_Result>("uspTECEM_GetMyCustomersSearchForCEM", userIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetPrjMileStoneDtlsToConfirm_Result> uspTECEM_GetPrjMileStoneDtlsToConfirm(string projectId, string towerId, string userId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            var towerIdParameter = towerId != null ?
                new ObjectParameter("towerId", towerId) :
                new ObjectParameter("towerId", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetPrjMileStoneDtlsToConfirm_Result>("uspTECEM_GetPrjMileStoneDtlsToConfirm", projectIdParameter, towerIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetPrjMStnCustrDtlsToCnfrm_Result> uspTECEM_GetPrjMStnCustrDtlsToCnfrm(string projectId, string userId, string towerId, string specificationId, string productId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var towerIdParameter = towerId != null ?
                new ObjectParameter("towerId", towerId) :
                new ObjectParameter("towerId", typeof(string));
    
            var specificationIdParameter = specificationId != null ?
                new ObjectParameter("specificationId", specificationId) :
                new ObjectParameter("specificationId", typeof(string));
    
            var productIdParameter = productId != null ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetPrjMStnCustrDtlsToCnfrm_Result>("uspTECEM_GetPrjMStnCustrDtlsToCnfrm", projectIdParameter, userIdParameter, towerIdParameter, specificationIdParameter, productIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetPrjMStnOrderDtlsToCnfrm_Result> uspTECEM_GetPrjMStnOrderDtlsToCnfrm(string projectId, string userId, string towerId, string specificationId, string productId, string milestoneCode)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var towerIdParameter = towerId != null ?
                new ObjectParameter("towerId", towerId) :
                new ObjectParameter("towerId", typeof(string));
    
            var specificationIdParameter = specificationId != null ?
                new ObjectParameter("specificationId", specificationId) :
                new ObjectParameter("specificationId", typeof(string));
    
            var productIdParameter = productId != null ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(string));
    
            var milestoneCodeParameter = milestoneCode != null ?
                new ObjectParameter("milestoneCode", milestoneCode) :
                new ObjectParameter("milestoneCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetPrjMStnOrderDtlsToCnfrm_Result>("uspTECEM_GetPrjMStnOrderDtlsToCnfrm", projectIdParameter, userIdParameter, towerIdParameter, specificationIdParameter, productIdParameter, milestoneCodeParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetPrjsForSalesTracker_Result> uspTECEM_GetPrjsForSalesTracker()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetPrjsForSalesTracker_Result>("uspTECEM_GetPrjsForSalesTracker");
        }
    
        public virtual ObjectResult<uspTECEM_GetPrjTransApprAcceptedCustDtlsByProjectTowerProd_Result> uspTECEM_GetPrjTransApprAcceptedCustDtlsByProjectTowerProd(string projectId, string towerId, string productId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            var towerIdParameter = towerId != null ?
                new ObjectParameter("towerId", towerId) :
                new ObjectParameter("towerId", typeof(string));
    
            var productIdParameter = productId != null ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetPrjTransApprAcceptedCustDtlsByProjectTowerProd_Result>("uspTECEM_GetPrjTransApprAcceptedCustDtlsByProjectTowerProd", projectIdParameter, towerIdParameter, productIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetPrjTransApprPendingCustDtlsByProjectTowerProd_Result> uspTECEM_GetPrjTransApprPendingCustDtlsByProjectTowerProd(string projectId, string towerId, string productId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            var towerIdParameter = towerId != null ?
                new ObjectParameter("towerId", towerId) :
                new ObjectParameter("towerId", typeof(string));
    
            var productIdParameter = productId != null ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetPrjTransApprPendingCustDtlsByProjectTowerProd_Result>("uspTECEM_GetPrjTransApprPendingCustDtlsByProjectTowerProd", projectIdParameter, towerIdParameter, productIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetPrjTransitionAcceptedProjectDetails_Result> uspTECEM_GetPrjTransitionAcceptedProjectDetails(string projectId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetPrjTransitionAcceptedProjectDetails_Result>("uspTECEM_GetPrjTransitionAcceptedProjectDetails", projectIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetPrjTransitionAcceptedTowerDetailsByProject_Result> uspTECEM_GetPrjTransitionAcceptedTowerDetailsByProject(string projectId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetPrjTransitionAcceptedTowerDetailsByProject_Result>("uspTECEM_GetPrjTransitionAcceptedTowerDetailsByProject", projectIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetPrjTransitionApprovalPendingProjectDetails_Result> uspTECEM_GetPrjTransitionApprovalPendingProjectDetails(string projectId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetPrjTransitionApprovalPendingProjectDetails_Result>("uspTECEM_GetPrjTransitionApprovalPendingProjectDetails", projectIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetPrjTransitionApprovalPendingTowerDetailsByProject_Result> uspTECEM_GetPrjTransitionApprovalPendingTowerDetailsByProject(string projectId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetPrjTransitionApprovalPendingTowerDetailsByProject_Result>("uspTECEM_GetPrjTransitionApprovalPendingTowerDetailsByProject", projectIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetPrjWiseDetailsForSalesTracker_Result> uspTECEM_GetPrjWiseDetailsForSalesTracker(string projectId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetPrjWiseDetailsForSalesTracker_Result>("uspTECEM_GetPrjWiseDetailsForSalesTracker", projectIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetPrjWisePrjMileStonesToConfirm_Result> uspTECEM_GetPrjWisePrjMileStonesToConfirm(string projectId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetPrjWisePrjMileStonesToConfirm_Result>("uspTECEM_GetPrjWisePrjMileStonesToConfirm", projectIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetPrjWiseUnitMileStonesToConfirm_Result> uspTECEM_GetPrjWiseUnitMileStonesToConfirm(string projectId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetPrjWiseUnitMileStonesToConfirm_Result>("uspTECEM_GetPrjWiseUnitMileStonesToConfirm", projectIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetPrjWiseUpcomingMileStones_Result> uspTECEM_GetPrjWiseUpcomingMileStones(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetPrjWiseUpcomingMileStones_Result>("uspTECEM_GetPrjWiseUpcomingMileStones", dateParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetProjUnitWiseOutStandingCollns_Result> uspTECEM_GetProjUnitWiseOutStandingCollns(string projectId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetProjUnitWiseOutStandingCollns_Result>("uspTECEM_GetProjUnitWiseOutStandingCollns", projectIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetTowerWisePrjMileStonesToConfirm_Result> uspTECEM_GetTowerWisePrjMileStonesToConfirm(string projectId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetTowerWisePrjMileStonesToConfirm_Result>("uspTECEM_GetTowerWisePrjMileStonesToConfirm", projectIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetTowerWiseUnitMileStonesToConfirm_Result> uspTECEM_GetTowerWiseUnitMileStonesToConfirm(string projectId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetTowerWiseUnitMileStonesToConfirm_Result>("uspTECEM_GetTowerWiseUnitMileStonesToConfirm", projectIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetTransApprAcceptedCustDtlsByProjectTowerProd_Result> uspTECEM_GetTransApprAcceptedCustDtlsByProjectTowerProd(string projectId, string towerId, string productId, string userId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            var towerIdParameter = towerId != null ?
                new ObjectParameter("towerId", towerId) :
                new ObjectParameter("towerId", typeof(string));
    
            var productIdParameter = productId != null ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetTransApprAcceptedCustDtlsByProjectTowerProd_Result>("uspTECEM_GetTransApprAcceptedCustDtlsByProjectTowerProd", projectIdParameter, towerIdParameter, productIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetTransApprPendingCustDtlsByProjectTowerProd_Result> uspTECEM_GetTransApprPendingCustDtlsByProjectTowerProd(string projectId, string towerId, string productId, string userId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            var towerIdParameter = towerId != null ?
                new ObjectParameter("towerId", towerId) :
                new ObjectParameter("towerId", typeof(string));
    
            var productIdParameter = productId != null ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetTransApprPendingCustDtlsByProjectTowerProd_Result>("uspTECEM_GetTransApprPendingCustDtlsByProjectTowerProd", projectIdParameter, towerIdParameter, productIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetTransitionAcceptedCustomerDetailsByProjectAndTower_Result> uspTECEM_GetTransitionAcceptedCustomerDetailsByProjectAndTower(string projectId, string towerId, string userId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            var towerIdParameter = towerId != null ?
                new ObjectParameter("towerId", towerId) :
                new ObjectParameter("towerId", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetTransitionAcceptedCustomerDetailsByProjectAndTower_Result>("uspTECEM_GetTransitionAcceptedCustomerDetailsByProjectAndTower", projectIdParameter, towerIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetTransitionAcceptedProjectDetails_Result> uspTECEM_GetTransitionAcceptedProjectDetails(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetTransitionAcceptedProjectDetails_Result>("uspTECEM_GetTransitionAcceptedProjectDetails", userIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetTransitionAcceptedTowerDetailsByProject_Result> uspTECEM_GetTransitionAcceptedTowerDetailsByProject(string projectId, string userId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetTransitionAcceptedTowerDetailsByProject_Result>("uspTECEM_GetTransitionAcceptedTowerDetailsByProject", projectIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetTransitionApprovalPendingCustomerDetailsByProjectAndTower_Result> uspTECEM_GetTransitionApprovalPendingCustomerDetailsByProjectAndTower(string projectId, string towerId, string userId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            var towerIdParameter = towerId != null ?
                new ObjectParameter("towerId", towerId) :
                new ObjectParameter("towerId", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetTransitionApprovalPendingCustomerDetailsByProjectAndTower_Result>("uspTECEM_GetTransitionApprovalPendingCustomerDetailsByProjectAndTower", projectIdParameter, towerIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetTransitionApprovalPendingProjectDetails_Result> uspTECEM_GetTransitionApprovalPendingProjectDetails(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetTransitionApprovalPendingProjectDetails_Result>("uspTECEM_GetTransitionApprovalPendingProjectDetails", userIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetTransitionApprovalPendingTowerDetailsByProject_Result> uspTECEM_GetTransitionApprovalPendingTowerDetailsByProject(string projectId, string userId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetTransitionApprovalPendingTowerDetailsByProject_Result>("uspTECEM_GetTransitionApprovalPendingTowerDetailsByProject", projectIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetUnitMileStnDtlsToConfirm_Result> uspTECEM_GetUnitMileStnDtlsToConfirm(string projectId, string userId, string towerId, string unitId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var towerIdParameter = towerId != null ?
                new ObjectParameter("towerId", towerId) :
                new ObjectParameter("towerId", typeof(string));
    
            var unitIdParameter = unitId != null ?
                new ObjectParameter("unitId", unitId) :
                new ObjectParameter("unitId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetUnitMileStnDtlsToConfirm_Result>("uspTECEM_GetUnitMileStnDtlsToConfirm", projectIdParameter, userIdParameter, towerIdParameter, unitIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetUnitMileStoneDtlsToConfirm_Result> uspTECEM_GetUnitMileStoneDtlsToConfirm(string projectId, string userId, string towerId, string specificationId, string productId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var towerIdParameter = towerId != null ?
                new ObjectParameter("towerId", towerId) :
                new ObjectParameter("towerId", typeof(string));
    
            var specificationIdParameter = specificationId != null ?
                new ObjectParameter("specificationId", specificationId) :
                new ObjectParameter("specificationId", typeof(string));
    
            var productIdParameter = productId != null ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetUnitMileStoneDtlsToConfirm_Result>("uspTECEM_GetUnitMileStoneDtlsToConfirm", projectIdParameter, userIdParameter, towerIdParameter, specificationIdParameter, productIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetUnitWiseUnitMileStnToConfirm_Result> uspTECEM_GetUnitWiseUnitMileStnToConfirm(string projectId, string towerId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            var towerIdParameter = towerId != null ?
                new ObjectParameter("towerId", towerId) :
                new ObjectParameter("towerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetUnitWiseUnitMileStnToConfirm_Result>("uspTECEM_GetUnitWiseUnitMileStnToConfirm", projectIdParameter, towerIdParameter);
        }
    
        public virtual ObjectResult<uspTECEM_GetUpcomingMileStoneByProjId_Result> uspTECEM_GetUpcomingMileStoneByProjId(string projectId, Nullable<System.DateTime> date)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECEM_GetUpcomingMileStoneByProjId_Result>("uspTECEM_GetUpcomingMileStoneByProjId", projectIdParameter, dateParameter);
        }
    
        public virtual int uspTECEM_RemoveAllPaymentAllocation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTECEM_RemoveAllPaymentAllocation");
        }
    
        public virtual int uspTECEM_RemoveAllSAPReceipts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTECEM_RemoveAllSAPReceipts");
        }
    
        public virtual int uspTECEM_UpdateAllInvoicesAsUnPaid()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTECEM_UpdateAllInvoicesAsUnPaid");
        }
    
        public virtual int uspTEChangeOrder_CreateInsert(Nullable<int> currentOfferId, Nullable<int> newOfferID, string status, string documentID, Nullable<System.DateTime> termSheetDate, Nullable<System.DateTime> changeOrderPreparedOn, Nullable<int> changeOrderPreparedBy, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, ObjectParameter result)
        {
            var currentOfferIdParameter = currentOfferId.HasValue ?
                new ObjectParameter("CurrentOfferId", currentOfferId) :
                new ObjectParameter("CurrentOfferId", typeof(int));
    
            var newOfferIDParameter = newOfferID.HasValue ?
                new ObjectParameter("NewOfferID", newOfferID) :
                new ObjectParameter("NewOfferID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var documentIDParameter = documentID != null ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(string));
    
            var termSheetDateParameter = termSheetDate.HasValue ?
                new ObjectParameter("TermSheetDate", termSheetDate) :
                new ObjectParameter("TermSheetDate", typeof(System.DateTime));
    
            var changeOrderPreparedOnParameter = changeOrderPreparedOn.HasValue ?
                new ObjectParameter("ChangeOrderPreparedOn", changeOrderPreparedOn) :
                new ObjectParameter("ChangeOrderPreparedOn", typeof(System.DateTime));
    
            var changeOrderPreparedByParameter = changeOrderPreparedBy.HasValue ?
                new ObjectParameter("ChangeOrderPreparedBy", changeOrderPreparedBy) :
                new ObjectParameter("ChangeOrderPreparedBy", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEChangeOrder_CreateInsert", currentOfferIdParameter, newOfferIDParameter, statusParameter, documentIDParameter, termSheetDateParameter, changeOrderPreparedOnParameter, changeOrderPreparedByParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedOnParameter, result);
        }
    
        public virtual int uspTEChangeOrder_DeleteTEChangeOrde(Nullable<int> changeOrderID, ObjectParameter result)
        {
            var changeOrderIDParameter = changeOrderID.HasValue ?
                new ObjectParameter("ChangeOrderID", changeOrderID) :
                new ObjectParameter("ChangeOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEChangeOrder_DeleteTEChangeOrde", changeOrderIDParameter, result);
        }
    
        public virtual ObjectResult<uspTEChangeOrder_GetAllTEChangeOrder_Result> uspTEChangeOrder_GetAllTEChangeOrder()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEChangeOrder_GetAllTEChangeOrder_Result>("uspTEChangeOrder_GetAllTEChangeOrder");
        }
    
        public virtual ObjectResult<uspTEChangeOrder_GetAllTEChangeOrderByOfferID_Result> uspTEChangeOrder_GetAllTEChangeOrderByOfferID(Nullable<int> offerID)
        {
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEChangeOrder_GetAllTEChangeOrderByOfferID_Result>("uspTEChangeOrder_GetAllTEChangeOrderByOfferID", offerIDParameter);
        }
    
        public virtual int uspTEChangeOrder_UpdateTEChangeOrder(Nullable<int> changeOrderID, Nullable<int> currentOfferId, Nullable<int> newOfferID, string status, string documentID, Nullable<System.DateTime> termSheetDate, Nullable<System.DateTime> changeOrderPreparedOn, Nullable<int> changeOrderPreparedBy, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, ObjectParameter result)
        {
            var changeOrderIDParameter = changeOrderID.HasValue ?
                new ObjectParameter("ChangeOrderID", changeOrderID) :
                new ObjectParameter("ChangeOrderID", typeof(int));
    
            var currentOfferIdParameter = currentOfferId.HasValue ?
                new ObjectParameter("CurrentOfferId", currentOfferId) :
                new ObjectParameter("CurrentOfferId", typeof(int));
    
            var newOfferIDParameter = newOfferID.HasValue ?
                new ObjectParameter("NewOfferID", newOfferID) :
                new ObjectParameter("NewOfferID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var documentIDParameter = documentID != null ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(string));
    
            var termSheetDateParameter = termSheetDate.HasValue ?
                new ObjectParameter("TermSheetDate", termSheetDate) :
                new ObjectParameter("TermSheetDate", typeof(System.DateTime));
    
            var changeOrderPreparedOnParameter = changeOrderPreparedOn.HasValue ?
                new ObjectParameter("ChangeOrderPreparedOn", changeOrderPreparedOn) :
                new ObjectParameter("ChangeOrderPreparedOn", typeof(System.DateTime));
    
            var changeOrderPreparedByParameter = changeOrderPreparedBy.HasValue ?
                new ObjectParameter("ChangeOrderPreparedBy", changeOrderPreparedBy) :
                new ObjectParameter("ChangeOrderPreparedBy", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEChangeOrder_UpdateTEChangeOrder", changeOrderIDParameter, currentOfferIdParameter, newOfferIDParameter, statusParameter, documentIDParameter, termSheetDateParameter, changeOrderPreparedOnParameter, changeOrderPreparedByParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedOnParameter, result);
        }
    
        public virtual ObjectResult<uspTECollections_GetDailyInvoice_Result> uspTECollections_GetDailyInvoice(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECollections_GetDailyInvoice_Result>("uspTECollections_GetDailyInvoice", dateParameter);
        }
    
        public virtual ObjectResult<uspTECollections_GetDailyReceipts_Result> uspTECollections_GetDailyReceipts(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECollections_GetDailyReceipts_Result>("uspTECollections_GetDailyReceipts", dateParameter);
        }
    
        public virtual ObjectResult<uspTECollections_GetDispatchPendingInvoice_Result> uspTECollections_GetDispatchPendingInvoice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECollections_GetDispatchPendingInvoice_Result>("uspTECollections_GetDispatchPendingInvoice");
        }
    
        public virtual ObjectResult<uspTECollections_GetFortNightInvoiceDetail_Result> uspTECollections_GetFortNightInvoiceDetail(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string projectId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECollections_GetFortNightInvoiceDetail_Result>("uspTECollections_GetFortNightInvoiceDetail", fromDateParameter, toDateParameter, projectIdParameter);
        }
    
        public virtual ObjectResult<uspTECollections_GetFortNightInvoiceSummary_Result> uspTECollections_GetFortNightInvoiceSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECollections_GetFortNightInvoiceSummary_Result>("uspTECollections_GetFortNightInvoiceSummary", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<uspTECollections_GetFortNightReceiptsDetail_Result> uspTECollections_GetFortNightReceiptsDetail(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string projectId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECollections_GetFortNightReceiptsDetail_Result>("uspTECollections_GetFortNightReceiptsDetail", fromDateParameter, toDateParameter, projectIdParameter);
        }
    
        public virtual ObjectResult<uspTECollections_GetFortNightReceiptsDetailForMobileApp_Result> uspTECollections_GetFortNightReceiptsDetailForMobileApp(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECollections_GetFortNightReceiptsDetailForMobileApp_Result>("uspTECollections_GetFortNightReceiptsDetailForMobileApp", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<uspTECollections_GetFortNightReceiptsSummary_Result> uspTECollections_GetFortNightReceiptsSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECollections_GetFortNightReceiptsSummary_Result>("uspTECollections_GetFortNightReceiptsSummary", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<uspTECollections_GetPendingInvoice_Result> uspTECollections_GetPendingInvoice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECollections_GetPendingInvoice_Result>("uspTECollections_GetPendingInvoice");
        }
    
        public virtual ObjectResult<uspTECollections_GetSAPDailyInvoice_Result> uspTECollections_GetSAPDailyInvoice(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECollections_GetSAPDailyInvoice_Result>("uspTECollections_GetSAPDailyInvoice", dateParameter);
        }
    
        public virtual ObjectResult<uspTECollections_GetSAPDailyInvoiceBySAP_PKey_Result> uspTECollections_GetSAPDailyInvoiceBySAP_PKey(Nullable<int> sAPId)
        {
            var sAPIdParameter = sAPId.HasValue ?
                new ObjectParameter("SAPId", sAPId) :
                new ObjectParameter("SAPId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECollections_GetSAPDailyInvoiceBySAP_PKey_Result>("uspTECollections_GetSAPDailyInvoiceBySAP_PKey", sAPIdParameter);
        }
    
        public virtual ObjectResult<uspTECollections_GetYearlyInvoiceCustomerSummary_Result> uspTECollections_GetYearlyInvoiceCustomerSummary(string year, string projectId)
        {
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECollections_GetYearlyInvoiceCustomerSummary_Result>("uspTECollections_GetYearlyInvoiceCustomerSummary", yearParameter, projectIdParameter);
        }
    
        public virtual ObjectResult<uspTECollections_GetYearlyInvoiceDetail_Result> uspTECollections_GetYearlyInvoiceDetail(string year, string projectId, string sAPCustomerID)
        {
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            var sAPCustomerIDParameter = sAPCustomerID != null ?
                new ObjectParameter("SAPCustomerID", sAPCustomerID) :
                new ObjectParameter("SAPCustomerID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECollections_GetYearlyInvoiceDetail_Result>("uspTECollections_GetYearlyInvoiceDetail", yearParameter, projectIdParameter, sAPCustomerIDParameter);
        }
    
        public virtual ObjectResult<uspTECollections_GetYearlyInvoiceSummary_Result> uspTECollections_GetYearlyInvoiceSummary(string year)
        {
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECollections_GetYearlyInvoiceSummary_Result>("uspTECollections_GetYearlyInvoiceSummary", yearParameter);
        }
    
        public virtual ObjectResult<uspTECollections_GetYearlyReceiptsCustomerSummary_Result> uspTECollections_GetYearlyReceiptsCustomerSummary(string year, string projectId)
        {
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECollections_GetYearlyReceiptsCustomerSummary_Result>("uspTECollections_GetYearlyReceiptsCustomerSummary", yearParameter, projectIdParameter);
        }
    
        public virtual ObjectResult<uspTECollections_GetYearlyReceiptsDetail_Result> uspTECollections_GetYearlyReceiptsDetail(string year, string projectId, string sAPCustomerID)
        {
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            var sAPCustomerIDParameter = sAPCustomerID != null ?
                new ObjectParameter("SAPCustomerID", sAPCustomerID) :
                new ObjectParameter("SAPCustomerID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECollections_GetYearlyReceiptsDetail_Result>("uspTECollections_GetYearlyReceiptsDetail", yearParameter, projectIdParameter, sAPCustomerIDParameter);
        }
    
        public virtual ObjectResult<uspTECollections_GetYearlyReceiptsSummary_Result> uspTECollections_GetYearlyReceiptsSummary(string year)
        {
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTECollections_GetYearlyReceiptsSummary_Result>("uspTECollections_GetYearlyReceiptsSummary", yearParameter);
        }
    
        public virtual int uspTEContact_DeleteTEContact(Nullable<int> uniqueid, ObjectParameter result)
        {
            var uniqueidParameter = uniqueid.HasValue ?
                new ObjectParameter("Uniqueid", uniqueid) :
                new ObjectParameter("Uniqueid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEContact_DeleteTEContact", uniqueidParameter, result);
        }
    
        public virtual ObjectResult<uspTEContact_GetAllTEContactData_Result> uspTEContact_GetAllTEContactData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEContact_GetAllTEContactData_Result>("uspTEContact_GetAllTEContactData");
        }
    
        public virtual ObjectResult<uspTEContact_GetById_Result> uspTEContact_GetById(Nullable<int> uniqueid)
        {
            var uniqueidParameter = uniqueid.HasValue ?
                new ObjectParameter("Uniqueid", uniqueid) :
                new ObjectParameter("Uniqueid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEContact_GetById_Result>("uspTEContact_GetById", uniqueidParameter);
        }
    
        public virtual ObjectResult<uspTEContact_GetPotentialMatch_Result> uspTEContact_GetPotentialMatch(string match, string firstname, string emailid)
        {
            var matchParameter = match != null ?
                new ObjectParameter("Match", match) :
                new ObjectParameter("Match", typeof(string));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var emailidParameter = emailid != null ?
                new ObjectParameter("emailid", emailid) :
                new ObjectParameter("emailid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEContact_GetPotentialMatch_Result>("uspTEContact_GetPotentialMatch", matchParameter, firstnameParameter, emailidParameter);
        }
    
        public virtual int uspTEContact_InsertTEContact(Nullable<int> oldUniqueid, Nullable<int> objectid, Nullable<int> projectid, Nullable<int> towerid, Nullable<int> unitid, Nullable<System.DateTime> lastModifiedOn, Nullable<int> lastModifiedBy_Id, Nullable<bool> isDeleted, string mobile, string emailid, string type, string prefferedContact, string prefferedMode, Nullable<bool> iSProfilesPublic, Nullable<bool> isAdvertise, string photo, string approvedBy, Nullable<System.DateTime> approvedOn, string status, string salutation, string firstName, string lastName, string callName, string contactType, string nationality, string countryOfBirth, Nullable<int> age, string gender, string maritalStatus, string category, string importance, string prefferedSaleConsultant, string countryCode, Nullable<int> userId, string residentStatus, string value, string organisation, string createdBy, Nullable<System.DateTime> createdOn, Nullable<System.DateTime> dOB, Nullable<System.DateTime> dOM, string middleName, Nullable<int> tEOrganisation, string contactid, ObjectParameter result)
        {
            var oldUniqueidParameter = oldUniqueid.HasValue ?
                new ObjectParameter("OldUniqueid", oldUniqueid) :
                new ObjectParameter("OldUniqueid", typeof(int));
    
            var objectidParameter = objectid.HasValue ?
                new ObjectParameter("Objectid", objectid) :
                new ObjectParameter("Objectid", typeof(int));
    
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("Projectid", projectid) :
                new ObjectParameter("Projectid", typeof(int));
    
            var toweridParameter = towerid.HasValue ?
                new ObjectParameter("Towerid", towerid) :
                new ObjectParameter("Towerid", typeof(int));
    
            var unitidParameter = unitid.HasValue ?
                new ObjectParameter("Unitid", unitid) :
                new ObjectParameter("Unitid", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var emailidParameter = emailid != null ?
                new ObjectParameter("Emailid", emailid) :
                new ObjectParameter("Emailid", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var prefferedContactParameter = prefferedContact != null ?
                new ObjectParameter("PrefferedContact", prefferedContact) :
                new ObjectParameter("PrefferedContact", typeof(string));
    
            var prefferedModeParameter = prefferedMode != null ?
                new ObjectParameter("PrefferedMode", prefferedMode) :
                new ObjectParameter("PrefferedMode", typeof(string));
    
            var iSProfilesPublicParameter = iSProfilesPublic.HasValue ?
                new ObjectParameter("ISProfilesPublic", iSProfilesPublic) :
                new ObjectParameter("ISProfilesPublic", typeof(bool));
    
            var isAdvertiseParameter = isAdvertise.HasValue ?
                new ObjectParameter("IsAdvertise", isAdvertise) :
                new ObjectParameter("IsAdvertise", typeof(bool));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(string));
    
            var approvedByParameter = approvedBy != null ?
                new ObjectParameter("ApprovedBy", approvedBy) :
                new ObjectParameter("ApprovedBy", typeof(string));
    
            var approvedOnParameter = approvedOn.HasValue ?
                new ObjectParameter("ApprovedOn", approvedOn) :
                new ObjectParameter("ApprovedOn", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var salutationParameter = salutation != null ?
                new ObjectParameter("Salutation", salutation) :
                new ObjectParameter("Salutation", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var callNameParameter = callName != null ?
                new ObjectParameter("CallName", callName) :
                new ObjectParameter("CallName", typeof(string));
    
            var contactTypeParameter = contactType != null ?
                new ObjectParameter("ContactType", contactType) :
                new ObjectParameter("ContactType", typeof(string));
    
            var nationalityParameter = nationality != null ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(string));
    
            var countryOfBirthParameter = countryOfBirth != null ?
                new ObjectParameter("CountryOfBirth", countryOfBirth) :
                new ObjectParameter("CountryOfBirth", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var maritalStatusParameter = maritalStatus != null ?
                new ObjectParameter("MaritalStatus", maritalStatus) :
                new ObjectParameter("MaritalStatus", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var importanceParameter = importance != null ?
                new ObjectParameter("Importance", importance) :
                new ObjectParameter("Importance", typeof(string));
    
            var prefferedSaleConsultantParameter = prefferedSaleConsultant != null ?
                new ObjectParameter("PrefferedSaleConsultant", prefferedSaleConsultant) :
                new ObjectParameter("PrefferedSaleConsultant", typeof(string));
    
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var residentStatusParameter = residentStatus != null ?
                new ObjectParameter("ResidentStatus", residentStatus) :
                new ObjectParameter("ResidentStatus", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var organisationParameter = organisation != null ?
                new ObjectParameter("Organisation", organisation) :
                new ObjectParameter("Organisation", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var dOMParameter = dOM.HasValue ?
                new ObjectParameter("DOM", dOM) :
                new ObjectParameter("DOM", typeof(System.DateTime));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var tEOrganisationParameter = tEOrganisation.HasValue ?
                new ObjectParameter("TEOrganisation", tEOrganisation) :
                new ObjectParameter("TEOrganisation", typeof(int));
    
            var contactidParameter = contactid != null ?
                new ObjectParameter("Contactid", contactid) :
                new ObjectParameter("Contactid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEContact_InsertTEContact", oldUniqueidParameter, objectidParameter, projectidParameter, toweridParameter, unitidParameter, lastModifiedOnParameter, lastModifiedBy_IdParameter, isDeletedParameter, mobileParameter, emailidParameter, typeParameter, prefferedContactParameter, prefferedModeParameter, iSProfilesPublicParameter, isAdvertiseParameter, photoParameter, approvedByParameter, approvedOnParameter, statusParameter, salutationParameter, firstNameParameter, lastNameParameter, callNameParameter, contactTypeParameter, nationalityParameter, countryOfBirthParameter, ageParameter, genderParameter, maritalStatusParameter, categoryParameter, importanceParameter, prefferedSaleConsultantParameter, countryCodeParameter, userIdParameter, residentStatusParameter, valueParameter, organisationParameter, createdByParameter, createdOnParameter, dOBParameter, dOMParameter, middleNameParameter, tEOrganisationParameter, contactidParameter, result);
        }
    
        public virtual int uspTEContact_UpdateTEContact(Nullable<int> uniqueid, Nullable<int> oldUniqueid, string objectid, Nullable<int> projectid, Nullable<int> towerid, Nullable<int> unitid, Nullable<System.DateTime> lastModifiedOn, Nullable<int> lastModifiedBy_Id, Nullable<bool> isDeleted, string mobile, string emailid, Nullable<System.DateTime> dOB, Nullable<System.DateTime> dOM, string type, string prefferedContact, string prefferedMode, Nullable<bool> iSProfilesPublic, Nullable<bool> isAdvertise, string photo, string approvedBy, Nullable<System.DateTime> approvedOn, string status, string salutation, string firstName, string lastName, string callName, string contactType, string nationality, string countryOfBirth, Nullable<int> age, string gender, string maritalStatus, string category, string importance, string prefferedSaleConsultant, string countryCode, Nullable<int> userId, string residentStatus, string value, string organisation, string createdBy, Nullable<System.DateTime> createdOn, string middleName, Nullable<int> tEOrganisation, string contactid, ObjectParameter result)
        {
            var uniqueidParameter = uniqueid.HasValue ?
                new ObjectParameter("Uniqueid", uniqueid) :
                new ObjectParameter("Uniqueid", typeof(int));
    
            var oldUniqueidParameter = oldUniqueid.HasValue ?
                new ObjectParameter("OldUniqueid", oldUniqueid) :
                new ObjectParameter("OldUniqueid", typeof(int));
    
            var objectidParameter = objectid != null ?
                new ObjectParameter("Objectid", objectid) :
                new ObjectParameter("Objectid", typeof(string));
    
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("Projectid", projectid) :
                new ObjectParameter("Projectid", typeof(int));
    
            var toweridParameter = towerid.HasValue ?
                new ObjectParameter("Towerid", towerid) :
                new ObjectParameter("Towerid", typeof(int));
    
            var unitidParameter = unitid.HasValue ?
                new ObjectParameter("Unitid", unitid) :
                new ObjectParameter("Unitid", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var emailidParameter = emailid != null ?
                new ObjectParameter("Emailid", emailid) :
                new ObjectParameter("Emailid", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var dOMParameter = dOM.HasValue ?
                new ObjectParameter("DOM", dOM) :
                new ObjectParameter("DOM", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var prefferedContactParameter = prefferedContact != null ?
                new ObjectParameter("PrefferedContact", prefferedContact) :
                new ObjectParameter("PrefferedContact", typeof(string));
    
            var prefferedModeParameter = prefferedMode != null ?
                new ObjectParameter("PrefferedMode", prefferedMode) :
                new ObjectParameter("PrefferedMode", typeof(string));
    
            var iSProfilesPublicParameter = iSProfilesPublic.HasValue ?
                new ObjectParameter("ISProfilesPublic", iSProfilesPublic) :
                new ObjectParameter("ISProfilesPublic", typeof(bool));
    
            var isAdvertiseParameter = isAdvertise.HasValue ?
                new ObjectParameter("IsAdvertise", isAdvertise) :
                new ObjectParameter("IsAdvertise", typeof(bool));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(string));
    
            var approvedByParameter = approvedBy != null ?
                new ObjectParameter("ApprovedBy", approvedBy) :
                new ObjectParameter("ApprovedBy", typeof(string));
    
            var approvedOnParameter = approvedOn.HasValue ?
                new ObjectParameter("ApprovedOn", approvedOn) :
                new ObjectParameter("ApprovedOn", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var salutationParameter = salutation != null ?
                new ObjectParameter("Salutation", salutation) :
                new ObjectParameter("Salutation", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var callNameParameter = callName != null ?
                new ObjectParameter("CallName", callName) :
                new ObjectParameter("CallName", typeof(string));
    
            var contactTypeParameter = contactType != null ?
                new ObjectParameter("ContactType", contactType) :
                new ObjectParameter("ContactType", typeof(string));
    
            var nationalityParameter = nationality != null ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(string));
    
            var countryOfBirthParameter = countryOfBirth != null ?
                new ObjectParameter("CountryOfBirth", countryOfBirth) :
                new ObjectParameter("CountryOfBirth", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var maritalStatusParameter = maritalStatus != null ?
                new ObjectParameter("MaritalStatus", maritalStatus) :
                new ObjectParameter("MaritalStatus", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var importanceParameter = importance != null ?
                new ObjectParameter("Importance", importance) :
                new ObjectParameter("Importance", typeof(string));
    
            var prefferedSaleConsultantParameter = prefferedSaleConsultant != null ?
                new ObjectParameter("PrefferedSaleConsultant", prefferedSaleConsultant) :
                new ObjectParameter("PrefferedSaleConsultant", typeof(string));
    
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var residentStatusParameter = residentStatus != null ?
                new ObjectParameter("ResidentStatus", residentStatus) :
                new ObjectParameter("ResidentStatus", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var organisationParameter = organisation != null ?
                new ObjectParameter("Organisation", organisation) :
                new ObjectParameter("Organisation", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var tEOrganisationParameter = tEOrganisation.HasValue ?
                new ObjectParameter("TEOrganisation", tEOrganisation) :
                new ObjectParameter("TEOrganisation", typeof(int));
    
            var contactidParameter = contactid != null ?
                new ObjectParameter("Contactid", contactid) :
                new ObjectParameter("Contactid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEContact_UpdateTEContact", uniqueidParameter, oldUniqueidParameter, objectidParameter, projectidParameter, toweridParameter, unitidParameter, lastModifiedOnParameter, lastModifiedBy_IdParameter, isDeletedParameter, mobileParameter, emailidParameter, dOBParameter, dOMParameter, typeParameter, prefferedContactParameter, prefferedModeParameter, iSProfilesPublicParameter, isAdvertiseParameter, photoParameter, approvedByParameter, approvedOnParameter, statusParameter, salutationParameter, firstNameParameter, lastNameParameter, callNameParameter, contactTypeParameter, nationalityParameter, countryOfBirthParameter, ageParameter, genderParameter, maritalStatusParameter, categoryParameter, importanceParameter, prefferedSaleConsultantParameter, countryCodeParameter, userIdParameter, residentStatusParameter, valueParameter, organisationParameter, createdByParameter, createdOnParameter, middleNameParameter, tEOrganisationParameter, contactidParameter, result);
        }
    
        public virtual int uspTEContactEmail_CreateInsertTEContactEmail(Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<System.DateTime> lastModifiedOn, string lastModifiedBy, Nullable<bool> isDeleted, string oldUniqueid, string objectid, Nullable<int> tEContact, string emailid, string type, string approvedBy, Nullable<System.DateTime> approvedOn, string status, Nullable<bool> isPreferredContact, Nullable<int> lastModifiedBy_Id, ObjectParameter result)
        {
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var lastModifiedByParameter = lastModifiedBy != null ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var oldUniqueidParameter = oldUniqueid != null ?
                new ObjectParameter("OldUniqueid", oldUniqueid) :
                new ObjectParameter("OldUniqueid", typeof(string));
    
            var objectidParameter = objectid != null ?
                new ObjectParameter("Objectid", objectid) :
                new ObjectParameter("Objectid", typeof(string));
    
            var tEContactParameter = tEContact.HasValue ?
                new ObjectParameter("TEContact", tEContact) :
                new ObjectParameter("TEContact", typeof(int));
    
            var emailidParameter = emailid != null ?
                new ObjectParameter("Emailid", emailid) :
                new ObjectParameter("Emailid", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var approvedByParameter = approvedBy != null ?
                new ObjectParameter("ApprovedBy", approvedBy) :
                new ObjectParameter("ApprovedBy", typeof(string));
    
            var approvedOnParameter = approvedOn.HasValue ?
                new ObjectParameter("ApprovedOn", approvedOn) :
                new ObjectParameter("ApprovedOn", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var isPreferredContactParameter = isPreferredContact.HasValue ?
                new ObjectParameter("IsPreferredContact", isPreferredContact) :
                new ObjectParameter("IsPreferredContact", typeof(bool));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEContactEmail_CreateInsertTEContactEmail", createdOnParameter, createdByParameter, lastModifiedOnParameter, lastModifiedByParameter, isDeletedParameter, oldUniqueidParameter, objectidParameter, tEContactParameter, emailidParameter, typeParameter, approvedByParameter, approvedOnParameter, statusParameter, isPreferredContactParameter, lastModifiedBy_IdParameter, result);
        }
    
        public virtual ObjectResult<string> uspTEContactMobil_GetAllTEContactMobileNos(Nullable<int> uniqueid)
        {
            var uniqueidParameter = uniqueid.HasValue ?
                new ObjectParameter("Uniqueid", uniqueid) :
                new ObjectParameter("Uniqueid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspTEContactMobil_GetAllTEContactMobileNos", uniqueidParameter);
        }
    
        public virtual int uspTEContactMobile_CreateInsertTEContactMobile(Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<System.DateTime> lastModifiedOn, Nullable<int> lastModifiedBy, Nullable<bool> isDeleted, string oldUniqueid, string objectid, Nullable<int> tEContact, string mobile, string type, string approvedBy, Nullable<System.DateTime> approvedOn, Nullable<bool> isPreferredContact, ObjectParameter result)
        {
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var oldUniqueidParameter = oldUniqueid != null ?
                new ObjectParameter("OldUniqueid", oldUniqueid) :
                new ObjectParameter("OldUniqueid", typeof(string));
    
            var objectidParameter = objectid != null ?
                new ObjectParameter("Objectid", objectid) :
                new ObjectParameter("Objectid", typeof(string));
    
            var tEContactParameter = tEContact.HasValue ?
                new ObjectParameter("TEContact", tEContact) :
                new ObjectParameter("TEContact", typeof(int));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var approvedByParameter = approvedBy != null ?
                new ObjectParameter("ApprovedBy", approvedBy) :
                new ObjectParameter("ApprovedBy", typeof(string));
    
            var approvedOnParameter = approvedOn.HasValue ?
                new ObjectParameter("ApprovedOn", approvedOn) :
                new ObjectParameter("ApprovedOn", typeof(System.DateTime));
    
            var isPreferredContactParameter = isPreferredContact.HasValue ?
                new ObjectParameter("IsPreferredContact", isPreferredContact) :
                new ObjectParameter("IsPreferredContact", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEContactMobile_CreateInsertTEContactMobile", createdOnParameter, createdByParameter, lastModifiedOnParameter, lastModifiedByParameter, isDeletedParameter, oldUniqueidParameter, objectidParameter, tEContactParameter, mobileParameter, typeParameter, approvedByParameter, approvedOnParameter, isPreferredContactParameter, result);
        }
    
        public virtual int uspTEDefaultCarParks_DeleteTEDefaultCarParks(Nullable<int> defaultCarParkID, ObjectParameter result)
        {
            var defaultCarParkIDParameter = defaultCarParkID.HasValue ?
                new ObjectParameter("DefaultCarParkID", defaultCarParkID) :
                new ObjectParameter("DefaultCarParkID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEDefaultCarParks_DeleteTEDefaultCarParks", defaultCarParkIDParameter, result);
        }
    
        public virtual int uspTEDefaultCarParks_GetAllTEDefaultCarParks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEDefaultCarParks_GetAllTEDefaultCarParks");
        }
    
        public virtual int uspTEDefaultCarParks_GetAllTEDefaultCarParksByDefaultCarParkID(Nullable<int> defaultCarParkID)
        {
            var defaultCarParkIDParameter = defaultCarParkID.HasValue ?
                new ObjectParameter("DefaultCarParkID", defaultCarParkID) :
                new ObjectParameter("DefaultCarParkID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEDefaultCarParks_GetAllTEDefaultCarParksByDefaultCarParkID", defaultCarParkIDParameter);
        }
    
        public virtual int uspTEDefaultCarParks_InsertTEDefaultCarParks(Nullable<int> projectCarParkID, Nullable<int> productID, Nullable<int> defaultCarParks, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var projectCarParkIDParameter = projectCarParkID.HasValue ?
                new ObjectParameter("ProjectCarParkID", projectCarParkID) :
                new ObjectParameter("ProjectCarParkID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var defaultCarParksParameter = defaultCarParks.HasValue ?
                new ObjectParameter("DefaultCarParks", defaultCarParks) :
                new ObjectParameter("DefaultCarParks", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEDefaultCarParks_InsertTEDefaultCarParks", projectCarParkIDParameter, productIDParameter, defaultCarParksParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEDefaultCarParks_UpdateTEDefaultCarParks(Nullable<int> defaultCarParkID, Nullable<int> projectCarParkID, Nullable<int> productID, Nullable<int> defaultCarParks, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var defaultCarParkIDParameter = defaultCarParkID.HasValue ?
                new ObjectParameter("DefaultCarParkID", defaultCarParkID) :
                new ObjectParameter("DefaultCarParkID", typeof(int));
    
            var projectCarParkIDParameter = projectCarParkID.HasValue ?
                new ObjectParameter("ProjectCarParkID", projectCarParkID) :
                new ObjectParameter("ProjectCarParkID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var defaultCarParksParameter = defaultCarParks.HasValue ?
                new ObjectParameter("DefaultCarParks", defaultCarParks) :
                new ObjectParameter("DefaultCarParks", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEDefaultCarParks_UpdateTEDefaultCarParks", defaultCarParkIDParameter, projectCarParkIDParameter, productIDParameter, defaultCarParksParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEDocuments_DeleteTEDocuments(Nullable<int> uniqueid, ObjectParameter result)
        {
            var uniqueidParameter = uniqueid.HasValue ?
                new ObjectParameter("Uniqueid", uniqueid) :
                new ObjectParameter("Uniqueid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEDocuments_DeleteTEDocuments", uniqueidParameter, result);
        }
    
        public virtual ObjectResult<uspTEDocuments_GetAllTEDocumentsByobj_Result> uspTEDocuments_GetAllTEDocumentsByobj(Nullable<int> objectID, Nullable<int> keyID, string documentType)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            var keyIDParameter = keyID.HasValue ?
                new ObjectParameter("KeyID", keyID) :
                new ObjectParameter("KeyID", typeof(int));
    
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEDocuments_GetAllTEDocumentsByobj_Result>("uspTEDocuments_GetAllTEDocumentsByobj", objectIDParameter, keyIDParameter, documentTypeParameter);
        }
    
        public virtual int uspTEDocuments_InsertTEDocuments(string uploadedBy, Nullable<System.DateTime> uploadedOn, Nullable<int> lastModifiedBy_Id, Nullable<System.DateTime> lastModifiedOn, string oldUniqueid, string objectid, Nullable<int> tEEmpBasicInfo, Nullable<int> keyId, string documentName, string documentType, string documentSubType, string description, string path, ObjectParameter result)
        {
            var uploadedByParameter = uploadedBy != null ?
                new ObjectParameter("UploadedBy", uploadedBy) :
                new ObjectParameter("UploadedBy", typeof(string));
    
            var uploadedOnParameter = uploadedOn.HasValue ?
                new ObjectParameter("UploadedOn", uploadedOn) :
                new ObjectParameter("UploadedOn", typeof(System.DateTime));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var oldUniqueidParameter = oldUniqueid != null ?
                new ObjectParameter("OldUniqueid", oldUniqueid) :
                new ObjectParameter("OldUniqueid", typeof(string));
    
            var objectidParameter = objectid != null ?
                new ObjectParameter("Objectid", objectid) :
                new ObjectParameter("Objectid", typeof(string));
    
            var tEEmpBasicInfoParameter = tEEmpBasicInfo.HasValue ?
                new ObjectParameter("TEEmpBasicInfo", tEEmpBasicInfo) :
                new ObjectParameter("TEEmpBasicInfo", typeof(int));
    
            var keyIdParameter = keyId.HasValue ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(int));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            var documentSubTypeParameter = documentSubType != null ?
                new ObjectParameter("DocumentSubType", documentSubType) :
                new ObjectParameter("DocumentSubType", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEDocuments_InsertTEDocuments", uploadedByParameter, uploadedOnParameter, lastModifiedBy_IdParameter, lastModifiedOnParameter, oldUniqueidParameter, objectidParameter, tEEmpBasicInfoParameter, keyIdParameter, documentNameParameter, documentTypeParameter, documentSubTypeParameter, descriptionParameter, pathParameter, result);
        }
    
        public virtual int uspTEDocuments_UpdateTEDocuments(Nullable<int> uniqueid, string uploadedBy, Nullable<System.DateTime> uploadedOn, Nullable<int> lastModifiedBy_Id, Nullable<System.DateTime> lastModifiedOn, string oldUniqueid, string objectid, Nullable<int> tEEmpBasicInfo, Nullable<int> keyId, string documentName, string documentType, string documentSubType, string description, string path, ObjectParameter result)
        {
            var uniqueidParameter = uniqueid.HasValue ?
                new ObjectParameter("Uniqueid", uniqueid) :
                new ObjectParameter("Uniqueid", typeof(int));
    
            var uploadedByParameter = uploadedBy != null ?
                new ObjectParameter("UploadedBy", uploadedBy) :
                new ObjectParameter("UploadedBy", typeof(string));
    
            var uploadedOnParameter = uploadedOn.HasValue ?
                new ObjectParameter("UploadedOn", uploadedOn) :
                new ObjectParameter("UploadedOn", typeof(System.DateTime));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var oldUniqueidParameter = oldUniqueid != null ?
                new ObjectParameter("OldUniqueid", oldUniqueid) :
                new ObjectParameter("OldUniqueid", typeof(string));
    
            var objectidParameter = objectid != null ?
                new ObjectParameter("Objectid", objectid) :
                new ObjectParameter("Objectid", typeof(string));
    
            var tEEmpBasicInfoParameter = tEEmpBasicInfo.HasValue ?
                new ObjectParameter("TEEmpBasicInfo", tEEmpBasicInfo) :
                new ObjectParameter("TEEmpBasicInfo", typeof(int));
    
            var keyIdParameter = keyId.HasValue ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(int));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            var documentSubTypeParameter = documentSubType != null ?
                new ObjectParameter("DocumentSubType", documentSubType) :
                new ObjectParameter("DocumentSubType", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEDocuments_UpdateTEDocuments", uniqueidParameter, uploadedByParameter, uploadedOnParameter, lastModifiedBy_IdParameter, lastModifiedOnParameter, oldUniqueidParameter, objectidParameter, tEEmpBasicInfoParameter, keyIdParameter, documentNameParameter, documentTypeParameter, documentSubTypeParameter, descriptionParameter, pathParameter, result);
        }
    
        public virtual int uspTEEvaluation_CreateInsertTEEvaluation(Nullable<int> leadID, Nullable<int> eQMID, string evaluationAnswer, string evaluationNotes, string weigtage, Nullable<System.DateTime> lastModifiedOn, Nullable<int> lastModifiedBy_Id, Nullable<bool> isDeleted, Nullable<int> isAnswered, ObjectParameter result)
        {
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            var eQMIDParameter = eQMID.HasValue ?
                new ObjectParameter("EQMID", eQMID) :
                new ObjectParameter("EQMID", typeof(int));
    
            var evaluationAnswerParameter = evaluationAnswer != null ?
                new ObjectParameter("EvaluationAnswer", evaluationAnswer) :
                new ObjectParameter("EvaluationAnswer", typeof(string));
    
            var evaluationNotesParameter = evaluationNotes != null ?
                new ObjectParameter("EvaluationNotes", evaluationNotes) :
                new ObjectParameter("EvaluationNotes", typeof(string));
    
            var weigtageParameter = weigtage != null ?
                new ObjectParameter("Weigtage", weigtage) :
                new ObjectParameter("Weigtage", typeof(string));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isAnsweredParameter = isAnswered.HasValue ?
                new ObjectParameter("IsAnswered", isAnswered) :
                new ObjectParameter("IsAnswered", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEEvaluation_CreateInsertTEEvaluation", leadIDParameter, eQMIDParameter, evaluationAnswerParameter, evaluationNotesParameter, weigtageParameter, lastModifiedOnParameter, lastModifiedBy_IdParameter, isDeletedParameter, isAnsweredParameter, result);
        }
    
        public virtual int uspTEEvaluation_DeleteTEEvaluationsBYEvaluationID(Nullable<int> evaluationID, ObjectParameter result)
        {
            var evaluationIDParameter = evaluationID.HasValue ?
                new ObjectParameter("EvaluationID", evaluationID) :
                new ObjectParameter("EvaluationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEEvaluation_DeleteTEEvaluationsBYEvaluationID", evaluationIDParameter, result);
        }
    
        public virtual ObjectResult<string> uspTEEvaluation_GetAllEmails(Nullable<int> contactid)
        {
            var contactidParameter = contactid.HasValue ?
                new ObjectParameter("contactid", contactid) :
                new ObjectParameter("contactid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspTEEvaluation_GetAllEmails", contactidParameter);
        }
    
        public virtual ObjectResult<string> uspTEEvaluation_GetAllMobiles(Nullable<int> contactid)
        {
            var contactidParameter = contactid.HasValue ?
                new ObjectParameter("contactid", contactid) :
                new ObjectParameter("contactid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspTEEvaluation_GetAllMobiles", contactidParameter);
        }
    
        public virtual ObjectResult<uspTEEvaluation_GetAllTEEvaluationtByLeadID_Result> uspTEEvaluation_GetAllTEEvaluationtByLeadID(Nullable<int> leadID)
        {
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEEvaluation_GetAllTEEvaluationtByLeadID_Result>("uspTEEvaluation_GetAllTEEvaluationtByLeadID", leadIDParameter);
        }
    
        public virtual ObjectResult<uspTEEvaluation_GetAllTEEvaluationtData_Result> uspTEEvaluation_GetAllTEEvaluationtData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEEvaluation_GetAllTEEvaluationtData_Result>("uspTEEvaluation_GetAllTEEvaluationtData");
        }
    
        public virtual ObjectResult<uspTEEvaluation_GetByEvaluationID_Result> uspTEEvaluation_GetByEvaluationID(Nullable<int> evaluationID)
        {
            var evaluationIDParameter = evaluationID.HasValue ?
                new ObjectParameter("EvaluationID", evaluationID) :
                new ObjectParameter("EvaluationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEEvaluation_GetByEvaluationID_Result>("uspTEEvaluation_GetByEvaluationID", evaluationIDParameter);
        }
    
        public virtual int uspTEEvaluation_UpdateTEEvaluation(Nullable<int> evaluationID, Nullable<int> leadID, Nullable<int> eQMID, string evaluationAnswer, string evaluationNotes, string weigtage, Nullable<System.DateTime> lastModifiedOn, Nullable<int> lastModifiedBy_Id, Nullable<bool> isDeleted, Nullable<int> isAnswered, ObjectParameter result)
        {
            var evaluationIDParameter = evaluationID.HasValue ?
                new ObjectParameter("EvaluationID", evaluationID) :
                new ObjectParameter("EvaluationID", typeof(int));
    
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            var eQMIDParameter = eQMID.HasValue ?
                new ObjectParameter("EQMID", eQMID) :
                new ObjectParameter("EQMID", typeof(int));
    
            var evaluationAnswerParameter = evaluationAnswer != null ?
                new ObjectParameter("EvaluationAnswer", evaluationAnswer) :
                new ObjectParameter("EvaluationAnswer", typeof(string));
    
            var evaluationNotesParameter = evaluationNotes != null ?
                new ObjectParameter("EvaluationNotes", evaluationNotes) :
                new ObjectParameter("EvaluationNotes", typeof(string));
    
            var weigtageParameter = weigtage != null ?
                new ObjectParameter("Weigtage", weigtage) :
                new ObjectParameter("Weigtage", typeof(string));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isAnsweredParameter = isAnswered.HasValue ?
                new ObjectParameter("IsAnswered", isAnswered) :
                new ObjectParameter("IsAnswered", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEEvaluation_UpdateTEEvaluation", evaluationIDParameter, leadIDParameter, eQMIDParameter, evaluationAnswerParameter, evaluationNotesParameter, weigtageParameter, lastModifiedOnParameter, lastModifiedBy_IdParameter, isDeletedParameter, isAnsweredParameter, result);
        }
    
        public virtual int uspTEEvaluationQuestionMaster_CreateInsert(string questionName, string weigtage, Nullable<System.DateTime> lastModifiedOn, Nullable<int> lastModifiedBy_Id, Nullable<bool> isDeleted, ObjectParameter result)
        {
            var questionNameParameter = questionName != null ?
                new ObjectParameter("QuestionName", questionName) :
                new ObjectParameter("QuestionName", typeof(string));
    
            var weigtageParameter = weigtage != null ?
                new ObjectParameter("Weigtage", weigtage) :
                new ObjectParameter("Weigtage", typeof(string));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEEvaluationQuestionMaster_CreateInsert", questionNameParameter, weigtageParameter, lastModifiedOnParameter, lastModifiedBy_IdParameter, isDeletedParameter, result);
        }
    
        public virtual int uspTEEvaluationQuestionMaster_DeleteTEQuestionBYEQMID(Nullable<int> eQMID, ObjectParameter result)
        {
            var eQMIDParameter = eQMID.HasValue ?
                new ObjectParameter("EQMID", eQMID) :
                new ObjectParameter("EQMID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEEvaluationQuestionMaster_DeleteTEQuestionBYEQMID", eQMIDParameter, result);
        }
    
        public virtual ObjectResult<uspTEEvaluationQuestionMaster_GetAllTEQuestions_Result> uspTEEvaluationQuestionMaster_GetAllTEQuestions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEEvaluationQuestionMaster_GetAllTEQuestions_Result>("uspTEEvaluationQuestionMaster_GetAllTEQuestions");
        }
    
        public virtual ObjectResult<uspTEEvaluationQuestionMaster_GetByEQMID_Result> uspTEEvaluationQuestionMaster_GetByEQMID(Nullable<int> eQMID)
        {
            var eQMIDParameter = eQMID.HasValue ?
                new ObjectParameter("EQMID", eQMID) :
                new ObjectParameter("EQMID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEEvaluationQuestionMaster_GetByEQMID_Result>("uspTEEvaluationQuestionMaster_GetByEQMID", eQMIDParameter);
        }
    
        public virtual int uspTEEvaluationQuestionMaster_UpdateTEQuestionMaster(Nullable<int> eQMID, string questionName, string weigtage, Nullable<System.DateTime> lastModifiedOn, Nullable<int> lastModifiedBy_Id, Nullable<bool> isDeleted, ObjectParameter result)
        {
            var eQMIDParameter = eQMID.HasValue ?
                new ObjectParameter("EQMID", eQMID) :
                new ObjectParameter("EQMID", typeof(int));
    
            var questionNameParameter = questionName != null ?
                new ObjectParameter("QuestionName", questionName) :
                new ObjectParameter("QuestionName", typeof(string));
    
            var weigtageParameter = weigtage != null ?
                new ObjectParameter("Weigtage", weigtage) :
                new ObjectParameter("Weigtage", typeof(string));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEEvaluationQuestionMaster_UpdateTEQuestionMaster", eQMIDParameter, questionNameParameter, weigtageParameter, lastModifiedOnParameter, lastModifiedBy_IdParameter, isDeletedParameter, result);
        }
    
        public virtual ObjectResult<uspTEferid_Result> uspTEferid(Nullable<int> offerID)
        {
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEferid_Result>("uspTEferid", offerIDParameter);
        }
    
        public virtual ObjectResult<uspTELandparcelbreakupDetailID_Result> uspTELandparcelbreakupDetailID(Nullable<int> landParcelBreakupDetailID)
        {
            var landParcelBreakupDetailIDParameter = landParcelBreakupDetailID.HasValue ?
                new ObjectParameter("LandParcelBreakupDetailID", landParcelBreakupDetailID) :
                new ObjectParameter("LandParcelBreakupDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTELandparcelbreakupDetailID_Result>("uspTELandparcelbreakupDetailID", landParcelBreakupDetailIDParameter);
        }
    
        public virtual int uspTELandParcelBreakupDetails_DeleteTELandParcelBreakupDetails(Nullable<int> landParcelBreakupDetailID, ObjectParameter result)
        {
            var landParcelBreakupDetailIDParameter = landParcelBreakupDetailID.HasValue ?
                new ObjectParameter("LandParcelBreakupDetailID", landParcelBreakupDetailID) :
                new ObjectParameter("LandParcelBreakupDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTELandParcelBreakupDetails_DeleteTELandParcelBreakupDetails", landParcelBreakupDetailIDParameter, result);
        }
    
        public virtual ObjectResult<uspTELandParcelBreakupDetails_GetAllTELandParcelBreakupDetails_Result> uspTELandParcelBreakupDetails_GetAllTELandParcelBreakupDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTELandParcelBreakupDetails_GetAllTELandParcelBreakupDetails_Result>("uspTELandParcelBreakupDetails_GetAllTELandParcelBreakupDetails");
        }
    
        public virtual int uspTELandParcelBreakupDetails_InsertTELandParcelBreakupDetails(Nullable<int> landParcelDetailID, string projectLandInformationCategory, string measureType, string category, string remarks, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var landParcelDetailIDParameter = landParcelDetailID.HasValue ?
                new ObjectParameter("LandParcelDetailID", landParcelDetailID) :
                new ObjectParameter("LandParcelDetailID", typeof(int));
    
            var projectLandInformationCategoryParameter = projectLandInformationCategory != null ?
                new ObjectParameter("ProjectLandInformationCategory", projectLandInformationCategory) :
                new ObjectParameter("ProjectLandInformationCategory", typeof(string));
    
            var measureTypeParameter = measureType != null ?
                new ObjectParameter("MeasureType", measureType) :
                new ObjectParameter("MeasureType", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTELandParcelBreakupDetails_InsertTELandParcelBreakupDetails", landParcelDetailIDParameter, projectLandInformationCategoryParameter, measureTypeParameter, categoryParameter, remarksParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTELandParcelBreakupDetails_UpdateTELandParcelBreakupDetails(Nullable<int> landParcelBreakupDetailID, Nullable<int> landParcelDetailID, string projectLandInformationCategory, string measureType, string category, string remarks, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var landParcelBreakupDetailIDParameter = landParcelBreakupDetailID.HasValue ?
                new ObjectParameter("LandParcelBreakupDetailID", landParcelBreakupDetailID) :
                new ObjectParameter("LandParcelBreakupDetailID", typeof(int));
    
            var landParcelDetailIDParameter = landParcelDetailID.HasValue ?
                new ObjectParameter("LandParcelDetailID", landParcelDetailID) :
                new ObjectParameter("LandParcelDetailID", typeof(int));
    
            var projectLandInformationCategoryParameter = projectLandInformationCategory != null ?
                new ObjectParameter("ProjectLandInformationCategory", projectLandInformationCategory) :
                new ObjectParameter("ProjectLandInformationCategory", typeof(string));
    
            var measureTypeParameter = measureType != null ?
                new ObjectParameter("MeasureType", measureType) :
                new ObjectParameter("MeasureType", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTELandParcelBreakupDetails_UpdateTELandParcelBreakupDetails", landParcelBreakupDetailIDParameter, landParcelDetailIDParameter, projectLandInformationCategoryParameter, measureTypeParameter, categoryParameter, remarksParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTELandParcelDetails_DeleteTELandParcelDetails(Nullable<int> landParcelDetailID, ObjectParameter result)
        {
            var landParcelDetailIDParameter = landParcelDetailID.HasValue ?
                new ObjectParameter("LandParcelDetailID", landParcelDetailID) :
                new ObjectParameter("LandParcelDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTELandParcelDetails_DeleteTELandParcelDetails", landParcelDetailIDParameter, result);
        }
    
        public virtual ObjectResult<uspTELandParcelDetails_GetAllTELandParcelDetails_Result> uspTELandParcelDetails_GetAllTELandParcelDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTELandParcelDetails_GetAllTELandParcelDetails_Result>("uspTELandParcelDetails_GetAllTELandParcelDetails");
        }
    
        public virtual ObjectResult<uspTELandParcelDetails_GetAllTELandParcelDetailsByLandParcelDetailID_Result> uspTELandParcelDetails_GetAllTELandParcelDetailsByLandParcelDetailID(Nullable<int> landParcelDetailID)
        {
            var landParcelDetailIDParameter = landParcelDetailID.HasValue ?
                new ObjectParameter("LandParcelDetailID", landParcelDetailID) :
                new ObjectParameter("LandParcelDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTELandParcelDetails_GetAllTELandParcelDetailsByLandParcelDetailID_Result>("uspTELandParcelDetails_GetAllTELandParcelDetailsByLandParcelDetailID", landParcelDetailIDParameter);
        }
    
        public virtual ObjectResult<uspTELandParcelDetails_GetAllTELandParcelDetailsByProjectID_Result> uspTELandParcelDetails_GetAllTELandParcelDetailsByProjectID(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTELandParcelDetails_GetAllTELandParcelDetailsByProjectID_Result>("uspTELandParcelDetails_GetAllTELandParcelDetailsByProjectID", projectIDParameter);
        }
    
        public virtual int uspTELandParcelDetails_InsertTELandParcelDetails(Nullable<int> projectID, string surveyNo, string measureType, string landArea, string khathaNo, string amalgamatedSurveyNo, string remarks, string ownerID, string sAPVendorID, string methodOfPayment, string powerOfAttorney, string munipalZone, string permittedLandUse, string regsitrationStatus, string address, string landUseConversionStatus, string mouDocumentID, Nullable<System.DateTime> purchaseDate, string ownerShipDocumentID, string buildingPlanSanactionNumber, string locality, string state, string street, string country, string landMark, string pincode, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var surveyNoParameter = surveyNo != null ?
                new ObjectParameter("SurveyNo", surveyNo) :
                new ObjectParameter("SurveyNo", typeof(string));
    
            var measureTypeParameter = measureType != null ?
                new ObjectParameter("MeasureType", measureType) :
                new ObjectParameter("MeasureType", typeof(string));
    
            var landAreaParameter = landArea != null ?
                new ObjectParameter("LandArea", landArea) :
                new ObjectParameter("LandArea", typeof(string));
    
            var khathaNoParameter = khathaNo != null ?
                new ObjectParameter("KhathaNo", khathaNo) :
                new ObjectParameter("KhathaNo", typeof(string));
    
            var amalgamatedSurveyNoParameter = amalgamatedSurveyNo != null ?
                new ObjectParameter("AmalgamatedSurveyNo", amalgamatedSurveyNo) :
                new ObjectParameter("AmalgamatedSurveyNo", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var ownerIDParameter = ownerID != null ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(string));
    
            var sAPVendorIDParameter = sAPVendorID != null ?
                new ObjectParameter("SAPVendorID", sAPVendorID) :
                new ObjectParameter("SAPVendorID", typeof(string));
    
            var methodOfPaymentParameter = methodOfPayment != null ?
                new ObjectParameter("MethodOfPayment", methodOfPayment) :
                new ObjectParameter("MethodOfPayment", typeof(string));
    
            var powerOfAttorneyParameter = powerOfAttorney != null ?
                new ObjectParameter("PowerOfAttorney", powerOfAttorney) :
                new ObjectParameter("PowerOfAttorney", typeof(string));
    
            var munipalZoneParameter = munipalZone != null ?
                new ObjectParameter("MunipalZone", munipalZone) :
                new ObjectParameter("MunipalZone", typeof(string));
    
            var permittedLandUseParameter = permittedLandUse != null ?
                new ObjectParameter("PermittedLandUse", permittedLandUse) :
                new ObjectParameter("PermittedLandUse", typeof(string));
    
            var regsitrationStatusParameter = regsitrationStatus != null ?
                new ObjectParameter("RegsitrationStatus", regsitrationStatus) :
                new ObjectParameter("RegsitrationStatus", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var landUseConversionStatusParameter = landUseConversionStatus != null ?
                new ObjectParameter("LandUseConversionStatus", landUseConversionStatus) :
                new ObjectParameter("LandUseConversionStatus", typeof(string));
    
            var mouDocumentIDParameter = mouDocumentID != null ?
                new ObjectParameter("MouDocumentID", mouDocumentID) :
                new ObjectParameter("MouDocumentID", typeof(string));
    
            var purchaseDateParameter = purchaseDate.HasValue ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(System.DateTime));
    
            var ownerShipDocumentIDParameter = ownerShipDocumentID != null ?
                new ObjectParameter("OwnerShipDocumentID", ownerShipDocumentID) :
                new ObjectParameter("OwnerShipDocumentID", typeof(string));
    
            var buildingPlanSanactionNumberParameter = buildingPlanSanactionNumber != null ?
                new ObjectParameter("BuildingPlanSanactionNumber", buildingPlanSanactionNumber) :
                new ObjectParameter("BuildingPlanSanactionNumber", typeof(string));
    
            var localityParameter = locality != null ?
                new ObjectParameter("Locality", locality) :
                new ObjectParameter("Locality", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var landMarkParameter = landMark != null ?
                new ObjectParameter("LandMark", landMark) :
                new ObjectParameter("LandMark", typeof(string));
    
            var pincodeParameter = pincode != null ?
                new ObjectParameter("Pincode", pincode) :
                new ObjectParameter("Pincode", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTELandParcelDetails_InsertTELandParcelDetails", projectIDParameter, surveyNoParameter, measureTypeParameter, landAreaParameter, khathaNoParameter, amalgamatedSurveyNoParameter, remarksParameter, ownerIDParameter, sAPVendorIDParameter, methodOfPaymentParameter, powerOfAttorneyParameter, munipalZoneParameter, permittedLandUseParameter, regsitrationStatusParameter, addressParameter, landUseConversionStatusParameter, mouDocumentIDParameter, purchaseDateParameter, ownerShipDocumentIDParameter, buildingPlanSanactionNumberParameter, localityParameter, stateParameter, streetParameter, countryParameter, landMarkParameter, pincodeParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTELandParcelDetails_UpdateTELandParcelDetails(Nullable<int> landParcelDetailID, Nullable<int> projectID, string surveyNo, string measureType, string landArea, string khathaNo, string amalgamatedSurveyNo, string remarks, string ownerID, string sAPVendorID, string methodOfPayment, string powerOfAttorney, string munipalZone, string permittedLandUse, string regsitrationStatus, string address, string landUseConversionStatus, string mouDocumentID, Nullable<System.DateTime> purchaseDate, string ownerShipDocumentID, string buildingPlanSanactionNumber, string locality, string state, string street, string country, string landMark, string pincode, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var landParcelDetailIDParameter = landParcelDetailID.HasValue ?
                new ObjectParameter("LandParcelDetailID", landParcelDetailID) :
                new ObjectParameter("LandParcelDetailID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var surveyNoParameter = surveyNo != null ?
                new ObjectParameter("SurveyNo", surveyNo) :
                new ObjectParameter("SurveyNo", typeof(string));
    
            var measureTypeParameter = measureType != null ?
                new ObjectParameter("MeasureType", measureType) :
                new ObjectParameter("MeasureType", typeof(string));
    
            var landAreaParameter = landArea != null ?
                new ObjectParameter("LandArea", landArea) :
                new ObjectParameter("LandArea", typeof(string));
    
            var khathaNoParameter = khathaNo != null ?
                new ObjectParameter("KhathaNo", khathaNo) :
                new ObjectParameter("KhathaNo", typeof(string));
    
            var amalgamatedSurveyNoParameter = amalgamatedSurveyNo != null ?
                new ObjectParameter("AmalgamatedSurveyNo", amalgamatedSurveyNo) :
                new ObjectParameter("AmalgamatedSurveyNo", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var ownerIDParameter = ownerID != null ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(string));
    
            var sAPVendorIDParameter = sAPVendorID != null ?
                new ObjectParameter("SAPVendorID", sAPVendorID) :
                new ObjectParameter("SAPVendorID", typeof(string));
    
            var methodOfPaymentParameter = methodOfPayment != null ?
                new ObjectParameter("MethodOfPayment", methodOfPayment) :
                new ObjectParameter("MethodOfPayment", typeof(string));
    
            var powerOfAttorneyParameter = powerOfAttorney != null ?
                new ObjectParameter("PowerOfAttorney", powerOfAttorney) :
                new ObjectParameter("PowerOfAttorney", typeof(string));
    
            var munipalZoneParameter = munipalZone != null ?
                new ObjectParameter("MunipalZone", munipalZone) :
                new ObjectParameter("MunipalZone", typeof(string));
    
            var permittedLandUseParameter = permittedLandUse != null ?
                new ObjectParameter("PermittedLandUse", permittedLandUse) :
                new ObjectParameter("PermittedLandUse", typeof(string));
    
            var regsitrationStatusParameter = regsitrationStatus != null ?
                new ObjectParameter("RegsitrationStatus", regsitrationStatus) :
                new ObjectParameter("RegsitrationStatus", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var landUseConversionStatusParameter = landUseConversionStatus != null ?
                new ObjectParameter("LandUseConversionStatus", landUseConversionStatus) :
                new ObjectParameter("LandUseConversionStatus", typeof(string));
    
            var mouDocumentIDParameter = mouDocumentID != null ?
                new ObjectParameter("MouDocumentID", mouDocumentID) :
                new ObjectParameter("MouDocumentID", typeof(string));
    
            var purchaseDateParameter = purchaseDate.HasValue ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(System.DateTime));
    
            var ownerShipDocumentIDParameter = ownerShipDocumentID != null ?
                new ObjectParameter("OwnerShipDocumentID", ownerShipDocumentID) :
                new ObjectParameter("OwnerShipDocumentID", typeof(string));
    
            var buildingPlanSanactionNumberParameter = buildingPlanSanactionNumber != null ?
                new ObjectParameter("BuildingPlanSanactionNumber", buildingPlanSanactionNumber) :
                new ObjectParameter("BuildingPlanSanactionNumber", typeof(string));
    
            var localityParameter = locality != null ?
                new ObjectParameter("Locality", locality) :
                new ObjectParameter("Locality", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var landMarkParameter = landMark != null ?
                new ObjectParameter("LandMark", landMark) :
                new ObjectParameter("LandMark", typeof(string));
    
            var pincodeParameter = pincode != null ?
                new ObjectParameter("Pincode", pincode) :
                new ObjectParameter("Pincode", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTELandParcelDetails_UpdateTELandParcelDetails", landParcelDetailIDParameter, projectIDParameter, surveyNoParameter, measureTypeParameter, landAreaParameter, khathaNoParameter, amalgamatedSurveyNoParameter, remarksParameter, ownerIDParameter, sAPVendorIDParameter, methodOfPaymentParameter, powerOfAttorneyParameter, munipalZoneParameter, permittedLandUseParameter, regsitrationStatusParameter, addressParameter, landUseConversionStatusParameter, mouDocumentIDParameter, purchaseDateParameter, ownerShipDocumentIDParameter, buildingPlanSanactionNumberParameter, localityParameter, stateParameter, streetParameter, countryParameter, landMarkParameter, pincodeParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTELead_CreateInsert(Nullable<int> contactID, string salutation, string firstName, string lastName, string callName, string email, string mobile, string leadOrginCity, string leadOriginLocation, string leadOriginState, string leadOrginRegion, string leadOriginPaAdress, string cityChoice, string preferredLocation, Nullable<int> budget, Nullable<int> unitType, Nullable<int> unitSize, Nullable<int> firstConnect, Nullable<int> firstConnectMode, Nullable<int> primarySource, Nullable<int> secondarySource, Nullable<int> campaignEventid, Nullable<int> refferedContactID, string interstedProject, Nullable<int> preferredProjects, Nullable<int> salesEngine, string responseTeamLeadCategorisation, Nullable<int> responseTeamUpdateBy, Nullable<System.DateTime> responseTeamLeadUpdatedOn, string leadTemperature, string leadStatus, string leadStage, Nullable<int> responseteamMember, Nullable<System.DateTime> responseTeamMemberAssignedOn, Nullable<int> connectedTeamMemeber, Nullable<System.DateTime> connectedTeamAssignedDate, Nullable<int> closeTeamMember, Nullable<System.DateTime> closeTeamAssignDate, Nullable<System.DateTime> createdOn, string createdBy, Nullable<System.DateTime> lastModifiedOn, Nullable<int> lastModifiedBy_Id, string firstResponseType, Nullable<System.DateTime> firstResponseDate, Nullable<int> assistedTeamMember, Nullable<System.DateTime> assistedTeamAssignDate, Nullable<bool> isDeleted, string organisation, string designation, string specification, Nullable<decimal> eSV, Nullable<decimal> eEV, Nullable<System.DateTime> eSD, string channelPartner, ObjectParameter result)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            var salutationParameter = salutation != null ?
                new ObjectParameter("Salutation", salutation) :
                new ObjectParameter("Salutation", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var callNameParameter = callName != null ?
                new ObjectParameter("CallName", callName) :
                new ObjectParameter("CallName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var leadOrginCityParameter = leadOrginCity != null ?
                new ObjectParameter("LeadOrginCity", leadOrginCity) :
                new ObjectParameter("LeadOrginCity", typeof(string));
    
            var leadOriginLocationParameter = leadOriginLocation != null ?
                new ObjectParameter("LeadOriginLocation", leadOriginLocation) :
                new ObjectParameter("LeadOriginLocation", typeof(string));
    
            var leadOriginStateParameter = leadOriginState != null ?
                new ObjectParameter("LeadOriginState", leadOriginState) :
                new ObjectParameter("LeadOriginState", typeof(string));
    
            var leadOrginRegionParameter = leadOrginRegion != null ?
                new ObjectParameter("LeadOrginRegion", leadOrginRegion) :
                new ObjectParameter("LeadOrginRegion", typeof(string));
    
            var leadOriginPaAdressParameter = leadOriginPaAdress != null ?
                new ObjectParameter("LeadOriginPaAdress", leadOriginPaAdress) :
                new ObjectParameter("LeadOriginPaAdress", typeof(string));
    
            var cityChoiceParameter = cityChoice != null ?
                new ObjectParameter("CityChoice", cityChoice) :
                new ObjectParameter("CityChoice", typeof(string));
    
            var preferredLocationParameter = preferredLocation != null ?
                new ObjectParameter("PreferredLocation", preferredLocation) :
                new ObjectParameter("PreferredLocation", typeof(string));
    
            var budgetParameter = budget.HasValue ?
                new ObjectParameter("Budget", budget) :
                new ObjectParameter("Budget", typeof(int));
    
            var unitTypeParameter = unitType.HasValue ?
                new ObjectParameter("UnitType", unitType) :
                new ObjectParameter("UnitType", typeof(int));
    
            var unitSizeParameter = unitSize.HasValue ?
                new ObjectParameter("UnitSize", unitSize) :
                new ObjectParameter("UnitSize", typeof(int));
    
            var firstConnectParameter = firstConnect.HasValue ?
                new ObjectParameter("FirstConnect", firstConnect) :
                new ObjectParameter("FirstConnect", typeof(int));
    
            var firstConnectModeParameter = firstConnectMode.HasValue ?
                new ObjectParameter("FirstConnectMode", firstConnectMode) :
                new ObjectParameter("FirstConnectMode", typeof(int));
    
            var primarySourceParameter = primarySource.HasValue ?
                new ObjectParameter("PrimarySource", primarySource) :
                new ObjectParameter("PrimarySource", typeof(int));
    
            var secondarySourceParameter = secondarySource.HasValue ?
                new ObjectParameter("SecondarySource", secondarySource) :
                new ObjectParameter("SecondarySource", typeof(int));
    
            var campaignEventidParameter = campaignEventid.HasValue ?
                new ObjectParameter("CampaignEventid", campaignEventid) :
                new ObjectParameter("CampaignEventid", typeof(int));
    
            var refferedContactIDParameter = refferedContactID.HasValue ?
                new ObjectParameter("RefferedContactID", refferedContactID) :
                new ObjectParameter("RefferedContactID", typeof(int));
    
            var interstedProjectParameter = interstedProject != null ?
                new ObjectParameter("InterstedProject", interstedProject) :
                new ObjectParameter("InterstedProject", typeof(string));
    
            var preferredProjectsParameter = preferredProjects.HasValue ?
                new ObjectParameter("PreferredProjects", preferredProjects) :
                new ObjectParameter("PreferredProjects", typeof(int));
    
            var salesEngineParameter = salesEngine.HasValue ?
                new ObjectParameter("SalesEngine", salesEngine) :
                new ObjectParameter("SalesEngine", typeof(int));
    
            var responseTeamLeadCategorisationParameter = responseTeamLeadCategorisation != null ?
                new ObjectParameter("ResponseTeamLeadCategorisation", responseTeamLeadCategorisation) :
                new ObjectParameter("ResponseTeamLeadCategorisation", typeof(string));
    
            var responseTeamUpdateByParameter = responseTeamUpdateBy.HasValue ?
                new ObjectParameter("ResponseTeamUpdateBy", responseTeamUpdateBy) :
                new ObjectParameter("ResponseTeamUpdateBy", typeof(int));
    
            var responseTeamLeadUpdatedOnParameter = responseTeamLeadUpdatedOn.HasValue ?
                new ObjectParameter("ResponseTeamLeadUpdatedOn", responseTeamLeadUpdatedOn) :
                new ObjectParameter("ResponseTeamLeadUpdatedOn", typeof(System.DateTime));
    
            var leadTemperatureParameter = leadTemperature != null ?
                new ObjectParameter("LeadTemperature", leadTemperature) :
                new ObjectParameter("LeadTemperature", typeof(string));
    
            var leadStatusParameter = leadStatus != null ?
                new ObjectParameter("LeadStatus", leadStatus) :
                new ObjectParameter("LeadStatus", typeof(string));
    
            var leadStageParameter = leadStage != null ?
                new ObjectParameter("LeadStage", leadStage) :
                new ObjectParameter("LeadStage", typeof(string));
    
            var responseteamMemberParameter = responseteamMember.HasValue ?
                new ObjectParameter("ResponseteamMember", responseteamMember) :
                new ObjectParameter("ResponseteamMember", typeof(int));
    
            var responseTeamMemberAssignedOnParameter = responseTeamMemberAssignedOn.HasValue ?
                new ObjectParameter("ResponseTeamMemberAssignedOn", responseTeamMemberAssignedOn) :
                new ObjectParameter("ResponseTeamMemberAssignedOn", typeof(System.DateTime));
    
            var connectedTeamMemeberParameter = connectedTeamMemeber.HasValue ?
                new ObjectParameter("ConnectedTeamMemeber", connectedTeamMemeber) :
                new ObjectParameter("ConnectedTeamMemeber", typeof(int));
    
            var connectedTeamAssignedDateParameter = connectedTeamAssignedDate.HasValue ?
                new ObjectParameter("ConnectedTeamAssignedDate", connectedTeamAssignedDate) :
                new ObjectParameter("ConnectedTeamAssignedDate", typeof(System.DateTime));
    
            var closeTeamMemberParameter = closeTeamMember.HasValue ?
                new ObjectParameter("CloseTeamMember", closeTeamMember) :
                new ObjectParameter("CloseTeamMember", typeof(int));
    
            var closeTeamAssignDateParameter = closeTeamAssignDate.HasValue ?
                new ObjectParameter("CloseTeamAssignDate", closeTeamAssignDate) :
                new ObjectParameter("CloseTeamAssignDate", typeof(System.DateTime));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var firstResponseTypeParameter = firstResponseType != null ?
                new ObjectParameter("FirstResponseType", firstResponseType) :
                new ObjectParameter("FirstResponseType", typeof(string));
    
            var firstResponseDateParameter = firstResponseDate.HasValue ?
                new ObjectParameter("FirstResponseDate", firstResponseDate) :
                new ObjectParameter("FirstResponseDate", typeof(System.DateTime));
    
            var assistedTeamMemberParameter = assistedTeamMember.HasValue ?
                new ObjectParameter("AssistedTeamMember", assistedTeamMember) :
                new ObjectParameter("AssistedTeamMember", typeof(int));
    
            var assistedTeamAssignDateParameter = assistedTeamAssignDate.HasValue ?
                new ObjectParameter("AssistedTeamAssignDate", assistedTeamAssignDate) :
                new ObjectParameter("AssistedTeamAssignDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var organisationParameter = organisation != null ?
                new ObjectParameter("Organisation", organisation) :
                new ObjectParameter("Organisation", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var specificationParameter = specification != null ?
                new ObjectParameter("Specification", specification) :
                new ObjectParameter("Specification", typeof(string));
    
            var eSVParameter = eSV.HasValue ?
                new ObjectParameter("ESV", eSV) :
                new ObjectParameter("ESV", typeof(decimal));
    
            var eEVParameter = eEV.HasValue ?
                new ObjectParameter("EEV", eEV) :
                new ObjectParameter("EEV", typeof(decimal));
    
            var eSDParameter = eSD.HasValue ?
                new ObjectParameter("ESD", eSD) :
                new ObjectParameter("ESD", typeof(System.DateTime));
    
            var channelPartnerParameter = channelPartner != null ?
                new ObjectParameter("ChannelPartner", channelPartner) :
                new ObjectParameter("ChannelPartner", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTELead_CreateInsert", contactIDParameter, salutationParameter, firstNameParameter, lastNameParameter, callNameParameter, emailParameter, mobileParameter, leadOrginCityParameter, leadOriginLocationParameter, leadOriginStateParameter, leadOrginRegionParameter, leadOriginPaAdressParameter, cityChoiceParameter, preferredLocationParameter, budgetParameter, unitTypeParameter, unitSizeParameter, firstConnectParameter, firstConnectModeParameter, primarySourceParameter, secondarySourceParameter, campaignEventidParameter, refferedContactIDParameter, interstedProjectParameter, preferredProjectsParameter, salesEngineParameter, responseTeamLeadCategorisationParameter, responseTeamUpdateByParameter, responseTeamLeadUpdatedOnParameter, leadTemperatureParameter, leadStatusParameter, leadStageParameter, responseteamMemberParameter, responseTeamMemberAssignedOnParameter, connectedTeamMemeberParameter, connectedTeamAssignedDateParameter, closeTeamMemberParameter, closeTeamAssignDateParameter, createdOnParameter, createdByParameter, lastModifiedOnParameter, lastModifiedBy_IdParameter, firstResponseTypeParameter, firstResponseDateParameter, assistedTeamMemberParameter, assistedTeamAssignDateParameter, isDeletedParameter, organisationParameter, designationParameter, specificationParameter, eSVParameter, eEVParameter, eSDParameter, channelPartnerParameter, result);
        }
    
        public virtual int uspTELead_CreateInsertNew(Nullable<int> contactID, string salutation, string firstName, string lastName, string callName, string email, string mobile, string leadOrginCity, string leadOriginLocation, string leadOriginState, string leadOrginRegion, string leadOriginPaAdress, string cityChoice, string preferredLocation, Nullable<int> budget, Nullable<int> unitType, Nullable<int> unitSize, Nullable<int> firstConnect, Nullable<int> firstConnectMode, Nullable<int> primarySource, Nullable<int> secondarySource, Nullable<int> campaignEventid, Nullable<int> refferedContactID, string interstedProject, Nullable<int> preferredProjects, Nullable<int> salesEngine, string responseTeamLeadCategorisation, Nullable<int> responseTeamUpdateBy, Nullable<System.DateTime> responseTeamLeadUpdatedOn, string leadTemperature, string leadStatus, string leadStage, Nullable<int> responseteamMember, Nullable<System.DateTime> responseTeamMemberAssignedOn, Nullable<int> connectedTeamMemeber, Nullable<System.DateTime> connectedTeamAssignedDate, Nullable<int> closeTeamMember, Nullable<System.DateTime> closeTeamAssignDate, Nullable<System.DateTime> createdOn, string createdBy, Nullable<System.DateTime> lastModifiedOn, Nullable<int> lastModifiedBy_Id, string firstResponseType, Nullable<System.DateTime> firstResponseDate, Nullable<int> assistedTeamMember, Nullable<System.DateTime> assistedTeamAssignDate, Nullable<bool> isDeleted, ObjectParameter result)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            var salutationParameter = salutation != null ?
                new ObjectParameter("Salutation", salutation) :
                new ObjectParameter("Salutation", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var callNameParameter = callName != null ?
                new ObjectParameter("CallName", callName) :
                new ObjectParameter("CallName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var leadOrginCityParameter = leadOrginCity != null ?
                new ObjectParameter("LeadOrginCity", leadOrginCity) :
                new ObjectParameter("LeadOrginCity", typeof(string));
    
            var leadOriginLocationParameter = leadOriginLocation != null ?
                new ObjectParameter("LeadOriginLocation", leadOriginLocation) :
                new ObjectParameter("LeadOriginLocation", typeof(string));
    
            var leadOriginStateParameter = leadOriginState != null ?
                new ObjectParameter("LeadOriginState", leadOriginState) :
                new ObjectParameter("LeadOriginState", typeof(string));
    
            var leadOrginRegionParameter = leadOrginRegion != null ?
                new ObjectParameter("LeadOrginRegion", leadOrginRegion) :
                new ObjectParameter("LeadOrginRegion", typeof(string));
    
            var leadOriginPaAdressParameter = leadOriginPaAdress != null ?
                new ObjectParameter("LeadOriginPaAdress", leadOriginPaAdress) :
                new ObjectParameter("LeadOriginPaAdress", typeof(string));
    
            var cityChoiceParameter = cityChoice != null ?
                new ObjectParameter("CityChoice", cityChoice) :
                new ObjectParameter("CityChoice", typeof(string));
    
            var preferredLocationParameter = preferredLocation != null ?
                new ObjectParameter("PreferredLocation", preferredLocation) :
                new ObjectParameter("PreferredLocation", typeof(string));
    
            var budgetParameter = budget.HasValue ?
                new ObjectParameter("Budget", budget) :
                new ObjectParameter("Budget", typeof(int));
    
            var unitTypeParameter = unitType.HasValue ?
                new ObjectParameter("UnitType", unitType) :
                new ObjectParameter("UnitType", typeof(int));
    
            var unitSizeParameter = unitSize.HasValue ?
                new ObjectParameter("UnitSize", unitSize) :
                new ObjectParameter("UnitSize", typeof(int));
    
            var firstConnectParameter = firstConnect.HasValue ?
                new ObjectParameter("FirstConnect", firstConnect) :
                new ObjectParameter("FirstConnect", typeof(int));
    
            var firstConnectModeParameter = firstConnectMode.HasValue ?
                new ObjectParameter("FirstConnectMode", firstConnectMode) :
                new ObjectParameter("FirstConnectMode", typeof(int));
    
            var primarySourceParameter = primarySource.HasValue ?
                new ObjectParameter("PrimarySource", primarySource) :
                new ObjectParameter("PrimarySource", typeof(int));
    
            var secondarySourceParameter = secondarySource.HasValue ?
                new ObjectParameter("SecondarySource", secondarySource) :
                new ObjectParameter("SecondarySource", typeof(int));
    
            var campaignEventidParameter = campaignEventid.HasValue ?
                new ObjectParameter("CampaignEventid", campaignEventid) :
                new ObjectParameter("CampaignEventid", typeof(int));
    
            var refferedContactIDParameter = refferedContactID.HasValue ?
                new ObjectParameter("RefferedContactID", refferedContactID) :
                new ObjectParameter("RefferedContactID", typeof(int));
    
            var interstedProjectParameter = interstedProject != null ?
                new ObjectParameter("InterstedProject", interstedProject) :
                new ObjectParameter("InterstedProject", typeof(string));
    
            var preferredProjectsParameter = preferredProjects.HasValue ?
                new ObjectParameter("PreferredProjects", preferredProjects) :
                new ObjectParameter("PreferredProjects", typeof(int));
    
            var salesEngineParameter = salesEngine.HasValue ?
                new ObjectParameter("SalesEngine", salesEngine) :
                new ObjectParameter("SalesEngine", typeof(int));
    
            var responseTeamLeadCategorisationParameter = responseTeamLeadCategorisation != null ?
                new ObjectParameter("ResponseTeamLeadCategorisation", responseTeamLeadCategorisation) :
                new ObjectParameter("ResponseTeamLeadCategorisation", typeof(string));
    
            var responseTeamUpdateByParameter = responseTeamUpdateBy.HasValue ?
                new ObjectParameter("ResponseTeamUpdateBy", responseTeamUpdateBy) :
                new ObjectParameter("ResponseTeamUpdateBy", typeof(int));
    
            var responseTeamLeadUpdatedOnParameter = responseTeamLeadUpdatedOn.HasValue ?
                new ObjectParameter("ResponseTeamLeadUpdatedOn", responseTeamLeadUpdatedOn) :
                new ObjectParameter("ResponseTeamLeadUpdatedOn", typeof(System.DateTime));
    
            var leadTemperatureParameter = leadTemperature != null ?
                new ObjectParameter("LeadTemperature", leadTemperature) :
                new ObjectParameter("LeadTemperature", typeof(string));
    
            var leadStatusParameter = leadStatus != null ?
                new ObjectParameter("LeadStatus", leadStatus) :
                new ObjectParameter("LeadStatus", typeof(string));
    
            var leadStageParameter = leadStage != null ?
                new ObjectParameter("LeadStage", leadStage) :
                new ObjectParameter("LeadStage", typeof(string));
    
            var responseteamMemberParameter = responseteamMember.HasValue ?
                new ObjectParameter("ResponseteamMember", responseteamMember) :
                new ObjectParameter("ResponseteamMember", typeof(int));
    
            var responseTeamMemberAssignedOnParameter = responseTeamMemberAssignedOn.HasValue ?
                new ObjectParameter("ResponseTeamMemberAssignedOn", responseTeamMemberAssignedOn) :
                new ObjectParameter("ResponseTeamMemberAssignedOn", typeof(System.DateTime));
    
            var connectedTeamMemeberParameter = connectedTeamMemeber.HasValue ?
                new ObjectParameter("ConnectedTeamMemeber", connectedTeamMemeber) :
                new ObjectParameter("ConnectedTeamMemeber", typeof(int));
    
            var connectedTeamAssignedDateParameter = connectedTeamAssignedDate.HasValue ?
                new ObjectParameter("ConnectedTeamAssignedDate", connectedTeamAssignedDate) :
                new ObjectParameter("ConnectedTeamAssignedDate", typeof(System.DateTime));
    
            var closeTeamMemberParameter = closeTeamMember.HasValue ?
                new ObjectParameter("CloseTeamMember", closeTeamMember) :
                new ObjectParameter("CloseTeamMember", typeof(int));
    
            var closeTeamAssignDateParameter = closeTeamAssignDate.HasValue ?
                new ObjectParameter("CloseTeamAssignDate", closeTeamAssignDate) :
                new ObjectParameter("CloseTeamAssignDate", typeof(System.DateTime));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var firstResponseTypeParameter = firstResponseType != null ?
                new ObjectParameter("FirstResponseType", firstResponseType) :
                new ObjectParameter("FirstResponseType", typeof(string));
    
            var firstResponseDateParameter = firstResponseDate.HasValue ?
                new ObjectParameter("FirstResponseDate", firstResponseDate) :
                new ObjectParameter("FirstResponseDate", typeof(System.DateTime));
    
            var assistedTeamMemberParameter = assistedTeamMember.HasValue ?
                new ObjectParameter("AssistedTeamMember", assistedTeamMember) :
                new ObjectParameter("AssistedTeamMember", typeof(int));
    
            var assistedTeamAssignDateParameter = assistedTeamAssignDate.HasValue ?
                new ObjectParameter("AssistedTeamAssignDate", assistedTeamAssignDate) :
                new ObjectParameter("AssistedTeamAssignDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTELead_CreateInsertNew", contactIDParameter, salutationParameter, firstNameParameter, lastNameParameter, callNameParameter, emailParameter, mobileParameter, leadOrginCityParameter, leadOriginLocationParameter, leadOriginStateParameter, leadOrginRegionParameter, leadOriginPaAdressParameter, cityChoiceParameter, preferredLocationParameter, budgetParameter, unitTypeParameter, unitSizeParameter, firstConnectParameter, firstConnectModeParameter, primarySourceParameter, secondarySourceParameter, campaignEventidParameter, refferedContactIDParameter, interstedProjectParameter, preferredProjectsParameter, salesEngineParameter, responseTeamLeadCategorisationParameter, responseTeamUpdateByParameter, responseTeamLeadUpdatedOnParameter, leadTemperatureParameter, leadStatusParameter, leadStageParameter, responseteamMemberParameter, responseTeamMemberAssignedOnParameter, connectedTeamMemeberParameter, connectedTeamAssignedDateParameter, closeTeamMemberParameter, closeTeamAssignDateParameter, createdOnParameter, createdByParameter, lastModifiedOnParameter, lastModifiedBy_IdParameter, firstResponseTypeParameter, firstResponseDateParameter, assistedTeamMemberParameter, assistedTeamAssignDateParameter, isDeletedParameter, result);
        }
    
        public virtual int uspTELead_DeleteTELead(Nullable<int> leadID, ObjectParameter result)
        {
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTELead_DeleteTELead", leadIDParameter, result);
        }
    
        public virtual ObjectResult<uspTELead_GetAllTELeadDashBoardDataWithNames_Result> uspTELead_GetAllTELeadDashBoardDataWithNames(Nullable<int> pageNumber, Nullable<int> pagePerCount)
        {
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pagePerCountParameter = pagePerCount.HasValue ?
                new ObjectParameter("PagePerCount", pagePerCount) :
                new ObjectParameter("PagePerCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTELead_GetAllTELeadDashBoardDataWithNames_Result>("uspTELead_GetAllTELeadDashBoardDataWithNames", pageNumberParameter, pagePerCountParameter);
        }
    
        public virtual ObjectResult<uspTELead_GetAllTELeadDashBoardDataWithNamesTest_Result> uspTELead_GetAllTELeadDashBoardDataWithNamesTest(Nullable<int> pageNumber, Nullable<int> pagePerCount, string queryinput)
        {
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pagePerCountParameter = pagePerCount.HasValue ?
                new ObjectParameter("PagePerCount", pagePerCount) :
                new ObjectParameter("PagePerCount", typeof(int));
    
            var queryinputParameter = queryinput != null ?
                new ObjectParameter("queryinput", queryinput) :
                new ObjectParameter("queryinput", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTELead_GetAllTELeadDashBoardDataWithNamesTest_Result>("uspTELead_GetAllTELeadDashBoardDataWithNamesTest", pageNumberParameter, pagePerCountParameter, queryinputParameter);
        }
    
        public virtual int uspTELead_GetAllTELeadDashBoardDataWithNamesTestFinal(Nullable<int> pageNumber, Nullable<int> pagePerCount, string queryinput)
        {
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pagePerCountParameter = pagePerCount.HasValue ?
                new ObjectParameter("PagePerCount", pagePerCount) :
                new ObjectParameter("PagePerCount", typeof(int));
    
            var queryinputParameter = queryinput != null ?
                new ObjectParameter("queryinput", queryinput) :
                new ObjectParameter("queryinput", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTELead_GetAllTELeadDashBoardDataWithNamesTestFinal", pageNumberParameter, pagePerCountParameter, queryinputParameter);
        }
    
        public virtual ObjectResult<uspTELead_GetAllTELeadData_Result> uspTELead_GetAllTELeadData(Nullable<int> pageNumber, Nullable<int> pagePerCount)
        {
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pagePerCountParameter = pagePerCount.HasValue ?
                new ObjectParameter("PagePerCount", pagePerCount) :
                new ObjectParameter("PagePerCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTELead_GetAllTELeadData_Result>("uspTELead_GetAllTELeadData", pageNumberParameter, pagePerCountParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspTELead_GetAssignedId(Nullable<int> leadID)
        {
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspTELead_GetAssignedId", leadIDParameter);
        }
    
        public virtual ObjectResult<uspTELead_GetByIdTELead_Result> uspTELead_GetByIdTELead(Nullable<int> leadID)
        {
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTELead_GetByIdTELead_Result>("uspTELead_GetByIdTELead", leadIDParameter);
        }
    
        public virtual ObjectResult<uspTELead_GetByIdTELeadWithData_Result> uspTELead_GetByIdTELeadWithData(Nullable<int> leadID)
        {
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTELead_GetByIdTELeadWithData_Result>("uspTELead_GetByIdTELeadWithData", leadIDParameter);
        }
    
        public virtual ObjectResult<string> uspTELead_GetByTELeadStatus(Nullable<int> leadID)
        {
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspTELead_GetByTELeadStatus", leadIDParameter);
        }
    
        public virtual ObjectResult<uspTELead_GetConsultantId_Result> uspTELead_GetConsultantId(Nullable<int> consultantID)
        {
            var consultantIDParameter = consultantID.HasValue ?
                new ObjectParameter("ConsultantID", consultantID) :
                new ObjectParameter("ConsultantID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTELead_GetConsultantId_Result>("uspTELead_GetConsultantId", consultantIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspTELead_GetLeadCampaignEventId(Nullable<int> leadID)
        {
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspTELead_GetLeadCampaignEventId", leadIDParameter);
        }
    
        public virtual ObjectResult<uspTELead_GetLeadFilter_Result> uspTELead_GetLeadFilter(string match)
        {
            var matchParameter = match != null ?
                new ObjectParameter("Match", match) :
                new ObjectParameter("Match", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTELead_GetLeadFilter_Result>("uspTELead_GetLeadFilter", matchParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspTELead_GetLeadMediumId(Nullable<int> leadID)
        {
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspTELead_GetLeadMediumId", leadIDParameter);
        }
    
        public virtual ObjectResult<uspTELead_GetLeadPotentialMatch_Result> uspTELead_GetLeadPotentialMatch(string match)
        {
            var matchParameter = match != null ?
                new ObjectParameter("Match", match) :
                new ObjectParameter("Match", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTELead_GetLeadPotentialMatch_Result>("uspTELead_GetLeadPotentialMatch", matchParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspTELead_GetLeadPrimarySourceId(Nullable<int> leadID)
        {
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspTELead_GetLeadPrimarySourceId", leadIDParameter);
        }
    
        public virtual ObjectResult<uspTELead_GetLeadStageAndCount_Result> uspTELead_GetLeadStageAndCount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTELead_GetLeadStageAndCount_Result>("uspTELead_GetLeadStageAndCount");
        }
    
        public virtual ObjectResult<string> uspTELead_GetProbabilityID(Nullable<int> leadID)
        {
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspTELead_GetProbabilityID", leadIDParameter);
        }
    
        public virtual int uspTELead_SetLeadStage(Nullable<int> leadId, string stage)
        {
            var leadIdParameter = leadId.HasValue ?
                new ObjectParameter("LeadId", leadId) :
                new ObjectParameter("LeadId", typeof(int));
    
            var stageParameter = stage != null ?
                new ObjectParameter("Stage", stage) :
                new ObjectParameter("Stage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTELead_SetLeadStage", leadIdParameter, stageParameter);
        }
    
        public virtual int uspTELead_SetLeadStatus(Nullable<int> leadId, string status)
        {
            var leadIdParameter = leadId.HasValue ?
                new ObjectParameter("LeadId", leadId) :
                new ObjectParameter("LeadId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTELead_SetLeadStatus", leadIdParameter, statusParameter);
        }
    
        public virtual int uspTELead_UpdateTELead(Nullable<int> contactID, Nullable<int> leadID, string salutation, string firstName, string lastName, string callName, string email, string mobile, string leadOrginCity, string leadOriginLocation, string leadOriginState, string leadOrginRegion, string leadOriginPaAdress, string cityChoice, string preferredLocation, Nullable<int> budget, Nullable<int> unitType, Nullable<int> unitSize, Nullable<int> firstConnect, Nullable<int> firstConnectMode, Nullable<int> primarySource, Nullable<int> secondarySource, Nullable<int> campaignEventid, Nullable<int> refferedContactID, string interstedProject, Nullable<int> preferredProjects, Nullable<int> salesEngine, string responseTeamLeadCategorisation, Nullable<int> responseTeamUpdateBy, Nullable<System.DateTime> responseTeamLeadUpdatedOn, string leadTemperature, string leadStatus, string leadStage, Nullable<int> responseteamMember, Nullable<System.DateTime> responseTeamMemberAssignedOn, Nullable<int> connectedTeamMemeber, Nullable<System.DateTime> connectedTeamAssignedDate, Nullable<int> closeTeamMember, Nullable<System.DateTime> closeTeamAssignDate, Nullable<System.DateTime> createdOn, string createdBy, Nullable<System.DateTime> lastModifiedOn, Nullable<int> lastModifiedBy_Id, string firstResponseType, Nullable<System.DateTime> firstResponseDate, Nullable<int> assistedTeamMember, Nullable<System.DateTime> assistedTeamAssignDate, Nullable<bool> isDeleted, string specification, Nullable<decimal> eSV, Nullable<decimal> eEV, Nullable<System.DateTime> eSD, string channelPartner, ObjectParameter result)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            var salutationParameter = salutation != null ?
                new ObjectParameter("Salutation", salutation) :
                new ObjectParameter("Salutation", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var callNameParameter = callName != null ?
                new ObjectParameter("CallName", callName) :
                new ObjectParameter("CallName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var leadOrginCityParameter = leadOrginCity != null ?
                new ObjectParameter("LeadOrginCity", leadOrginCity) :
                new ObjectParameter("LeadOrginCity", typeof(string));
    
            var leadOriginLocationParameter = leadOriginLocation != null ?
                new ObjectParameter("LeadOriginLocation", leadOriginLocation) :
                new ObjectParameter("LeadOriginLocation", typeof(string));
    
            var leadOriginStateParameter = leadOriginState != null ?
                new ObjectParameter("LeadOriginState", leadOriginState) :
                new ObjectParameter("LeadOriginState", typeof(string));
    
            var leadOrginRegionParameter = leadOrginRegion != null ?
                new ObjectParameter("LeadOrginRegion", leadOrginRegion) :
                new ObjectParameter("LeadOrginRegion", typeof(string));
    
            var leadOriginPaAdressParameter = leadOriginPaAdress != null ?
                new ObjectParameter("LeadOriginPaAdress", leadOriginPaAdress) :
                new ObjectParameter("LeadOriginPaAdress", typeof(string));
    
            var cityChoiceParameter = cityChoice != null ?
                new ObjectParameter("CityChoice", cityChoice) :
                new ObjectParameter("CityChoice", typeof(string));
    
            var preferredLocationParameter = preferredLocation != null ?
                new ObjectParameter("PreferredLocation", preferredLocation) :
                new ObjectParameter("PreferredLocation", typeof(string));
    
            var budgetParameter = budget.HasValue ?
                new ObjectParameter("Budget", budget) :
                new ObjectParameter("Budget", typeof(int));
    
            var unitTypeParameter = unitType.HasValue ?
                new ObjectParameter("UnitType", unitType) :
                new ObjectParameter("UnitType", typeof(int));
    
            var unitSizeParameter = unitSize.HasValue ?
                new ObjectParameter("UnitSize", unitSize) :
                new ObjectParameter("UnitSize", typeof(int));
    
            var firstConnectParameter = firstConnect.HasValue ?
                new ObjectParameter("FirstConnect", firstConnect) :
                new ObjectParameter("FirstConnect", typeof(int));
    
            var firstConnectModeParameter = firstConnectMode.HasValue ?
                new ObjectParameter("FirstConnectMode", firstConnectMode) :
                new ObjectParameter("FirstConnectMode", typeof(int));
    
            var primarySourceParameter = primarySource.HasValue ?
                new ObjectParameter("PrimarySource", primarySource) :
                new ObjectParameter("PrimarySource", typeof(int));
    
            var secondarySourceParameter = secondarySource.HasValue ?
                new ObjectParameter("SecondarySource", secondarySource) :
                new ObjectParameter("SecondarySource", typeof(int));
    
            var campaignEventidParameter = campaignEventid.HasValue ?
                new ObjectParameter("CampaignEventid", campaignEventid) :
                new ObjectParameter("CampaignEventid", typeof(int));
    
            var refferedContactIDParameter = refferedContactID.HasValue ?
                new ObjectParameter("RefferedContactID", refferedContactID) :
                new ObjectParameter("RefferedContactID", typeof(int));
    
            var interstedProjectParameter = interstedProject != null ?
                new ObjectParameter("InterstedProject", interstedProject) :
                new ObjectParameter("InterstedProject", typeof(string));
    
            var preferredProjectsParameter = preferredProjects.HasValue ?
                new ObjectParameter("PreferredProjects", preferredProjects) :
                new ObjectParameter("PreferredProjects", typeof(int));
    
            var salesEngineParameter = salesEngine.HasValue ?
                new ObjectParameter("SalesEngine", salesEngine) :
                new ObjectParameter("SalesEngine", typeof(int));
    
            var responseTeamLeadCategorisationParameter = responseTeamLeadCategorisation != null ?
                new ObjectParameter("ResponseTeamLeadCategorisation", responseTeamLeadCategorisation) :
                new ObjectParameter("ResponseTeamLeadCategorisation", typeof(string));
    
            var responseTeamUpdateByParameter = responseTeamUpdateBy.HasValue ?
                new ObjectParameter("ResponseTeamUpdateBy", responseTeamUpdateBy) :
                new ObjectParameter("ResponseTeamUpdateBy", typeof(int));
    
            var responseTeamLeadUpdatedOnParameter = responseTeamLeadUpdatedOn.HasValue ?
                new ObjectParameter("ResponseTeamLeadUpdatedOn", responseTeamLeadUpdatedOn) :
                new ObjectParameter("ResponseTeamLeadUpdatedOn", typeof(System.DateTime));
    
            var leadTemperatureParameter = leadTemperature != null ?
                new ObjectParameter("LeadTemperature", leadTemperature) :
                new ObjectParameter("LeadTemperature", typeof(string));
    
            var leadStatusParameter = leadStatus != null ?
                new ObjectParameter("LeadStatus", leadStatus) :
                new ObjectParameter("LeadStatus", typeof(string));
    
            var leadStageParameter = leadStage != null ?
                new ObjectParameter("LeadStage", leadStage) :
                new ObjectParameter("LeadStage", typeof(string));
    
            var responseteamMemberParameter = responseteamMember.HasValue ?
                new ObjectParameter("ResponseteamMember", responseteamMember) :
                new ObjectParameter("ResponseteamMember", typeof(int));
    
            var responseTeamMemberAssignedOnParameter = responseTeamMemberAssignedOn.HasValue ?
                new ObjectParameter("ResponseTeamMemberAssignedOn", responseTeamMemberAssignedOn) :
                new ObjectParameter("ResponseTeamMemberAssignedOn", typeof(System.DateTime));
    
            var connectedTeamMemeberParameter = connectedTeamMemeber.HasValue ?
                new ObjectParameter("ConnectedTeamMemeber", connectedTeamMemeber) :
                new ObjectParameter("ConnectedTeamMemeber", typeof(int));
    
            var connectedTeamAssignedDateParameter = connectedTeamAssignedDate.HasValue ?
                new ObjectParameter("ConnectedTeamAssignedDate", connectedTeamAssignedDate) :
                new ObjectParameter("ConnectedTeamAssignedDate", typeof(System.DateTime));
    
            var closeTeamMemberParameter = closeTeamMember.HasValue ?
                new ObjectParameter("CloseTeamMember", closeTeamMember) :
                new ObjectParameter("CloseTeamMember", typeof(int));
    
            var closeTeamAssignDateParameter = closeTeamAssignDate.HasValue ?
                new ObjectParameter("CloseTeamAssignDate", closeTeamAssignDate) :
                new ObjectParameter("CloseTeamAssignDate", typeof(System.DateTime));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var firstResponseTypeParameter = firstResponseType != null ?
                new ObjectParameter("FirstResponseType", firstResponseType) :
                new ObjectParameter("FirstResponseType", typeof(string));
    
            var firstResponseDateParameter = firstResponseDate.HasValue ?
                new ObjectParameter("FirstResponseDate", firstResponseDate) :
                new ObjectParameter("FirstResponseDate", typeof(System.DateTime));
    
            var assistedTeamMemberParameter = assistedTeamMember.HasValue ?
                new ObjectParameter("AssistedTeamMember", assistedTeamMember) :
                new ObjectParameter("AssistedTeamMember", typeof(int));
    
            var assistedTeamAssignDateParameter = assistedTeamAssignDate.HasValue ?
                new ObjectParameter("AssistedTeamAssignDate", assistedTeamAssignDate) :
                new ObjectParameter("AssistedTeamAssignDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var specificationParameter = specification != null ?
                new ObjectParameter("Specification", specification) :
                new ObjectParameter("Specification", typeof(string));
    
            var eSVParameter = eSV.HasValue ?
                new ObjectParameter("ESV", eSV) :
                new ObjectParameter("ESV", typeof(decimal));
    
            var eEVParameter = eEV.HasValue ?
                new ObjectParameter("EEV", eEV) :
                new ObjectParameter("EEV", typeof(decimal));
    
            var eSDParameter = eSD.HasValue ?
                new ObjectParameter("ESD", eSD) :
                new ObjectParameter("ESD", typeof(System.DateTime));
    
            var channelPartnerParameter = channelPartner != null ?
                new ObjectParameter("ChannelPartner", channelPartner) :
                new ObjectParameter("ChannelPartner", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTELead_UpdateTELead", contactIDParameter, leadIDParameter, salutationParameter, firstNameParameter, lastNameParameter, callNameParameter, emailParameter, mobileParameter, leadOrginCityParameter, leadOriginLocationParameter, leadOriginStateParameter, leadOrginRegionParameter, leadOriginPaAdressParameter, cityChoiceParameter, preferredLocationParameter, budgetParameter, unitTypeParameter, unitSizeParameter, firstConnectParameter, firstConnectModeParameter, primarySourceParameter, secondarySourceParameter, campaignEventidParameter, refferedContactIDParameter, interstedProjectParameter, preferredProjectsParameter, salesEngineParameter, responseTeamLeadCategorisationParameter, responseTeamUpdateByParameter, responseTeamLeadUpdatedOnParameter, leadTemperatureParameter, leadStatusParameter, leadStageParameter, responseteamMemberParameter, responseTeamMemberAssignedOnParameter, connectedTeamMemeberParameter, connectedTeamAssignedDateParameter, closeTeamMemberParameter, closeTeamAssignDateParameter, createdOnParameter, createdByParameter, lastModifiedOnParameter, lastModifiedBy_IdParameter, firstResponseTypeParameter, firstResponseDateParameter, assistedTeamMemberParameter, assistedTeamAssignDateParameter, isDeletedParameter, specificationParameter, eSVParameter, eEVParameter, eSDParameter, channelPartnerParameter, result);
        }
    
        public virtual int uspTELeadContact_UpdateTELeadProspectDetailsEditData(Nullable<int> contactID, Nullable<int> leadID, string salutation, string firstName, string lastName, string callName, string email, string mobile, string leadOrginCity, string organisation, string designation, ObjectParameter result)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            var salutationParameter = salutation != null ?
                new ObjectParameter("Salutation", salutation) :
                new ObjectParameter("Salutation", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var callNameParameter = callName != null ?
                new ObjectParameter("CallName", callName) :
                new ObjectParameter("CallName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var leadOrginCityParameter = leadOrginCity != null ?
                new ObjectParameter("LeadOrginCity", leadOrginCity) :
                new ObjectParameter("LeadOrginCity", typeof(string));
    
            var organisationParameter = organisation != null ?
                new ObjectParameter("Organisation", organisation) :
                new ObjectParameter("Organisation", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTELeadContact_UpdateTELeadProspectDetailsEditData", contactIDParameter, leadIDParameter, salutationParameter, firstNameParameter, lastNameParameter, callNameParameter, emailParameter, mobileParameter, leadOrginCityParameter, organisationParameter, designationParameter, result);
        }
    
        public virtual int uspTELeadSourceofEnquiry_UpdateLeadAssignedDetailes(Nullable<int> leadID, Nullable<int> contactID, Nullable<int> responseTeamMember, Nullable<int> assistedTeamMember, Nullable<int> closeTeamMember, Nullable<int> secondarySource, string createdBy, Nullable<System.DateTime> createdOn, ObjectParameter result)
        {
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            var responseTeamMemberParameter = responseTeamMember.HasValue ?
                new ObjectParameter("ResponseTeamMember", responseTeamMember) :
                new ObjectParameter("ResponseTeamMember", typeof(int));
    
            var assistedTeamMemberParameter = assistedTeamMember.HasValue ?
                new ObjectParameter("AssistedTeamMember", assistedTeamMember) :
                new ObjectParameter("AssistedTeamMember", typeof(int));
    
            var closeTeamMemberParameter = closeTeamMember.HasValue ?
                new ObjectParameter("CloseTeamMember", closeTeamMember) :
                new ObjectParameter("CloseTeamMember", typeof(int));
    
            var secondarySourceParameter = secondarySource.HasValue ?
                new ObjectParameter("SecondarySource", secondarySource) :
                new ObjectParameter("SecondarySource", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTELeadSourceofEnquiry_UpdateLeadAssignedDetailes", leadIDParameter, contactIDParameter, responseTeamMemberParameter, assistedTeamMemberParameter, closeTeamMemberParameter, secondarySourceParameter, createdByParameter, createdOnParameter, result);
        }
    
        public virtual int uspTELeadSourceofEnquiry_UpdateLeadSourceofEnquiry(Nullable<int> leadID, Nullable<int> contactID, Nullable<int> firstConnect, Nullable<int> firstConnectMode, Nullable<int> primarySource, Nullable<int> secondarySource, Nullable<int> campaignEventid, Nullable<int> salesEngine, string leadOriginCity, string preferredLocation, string interstedProject, ObjectParameter result)
        {
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            var firstConnectParameter = firstConnect.HasValue ?
                new ObjectParameter("FirstConnect", firstConnect) :
                new ObjectParameter("FirstConnect", typeof(int));
    
            var firstConnectModeParameter = firstConnectMode.HasValue ?
                new ObjectParameter("FirstConnectMode", firstConnectMode) :
                new ObjectParameter("FirstConnectMode", typeof(int));
    
            var primarySourceParameter = primarySource.HasValue ?
                new ObjectParameter("PrimarySource", primarySource) :
                new ObjectParameter("PrimarySource", typeof(int));
    
            var secondarySourceParameter = secondarySource.HasValue ?
                new ObjectParameter("SecondarySource", secondarySource) :
                new ObjectParameter("SecondarySource", typeof(int));
    
            var campaignEventidParameter = campaignEventid.HasValue ?
                new ObjectParameter("CampaignEventid", campaignEventid) :
                new ObjectParameter("CampaignEventid", typeof(int));
    
            var salesEngineParameter = salesEngine.HasValue ?
                new ObjectParameter("SalesEngine", salesEngine) :
                new ObjectParameter("SalesEngine", typeof(int));
    
            var leadOriginCityParameter = leadOriginCity != null ?
                new ObjectParameter("LeadOriginCity", leadOriginCity) :
                new ObjectParameter("LeadOriginCity", typeof(string));
    
            var preferredLocationParameter = preferredLocation != null ?
                new ObjectParameter("PreferredLocation", preferredLocation) :
                new ObjectParameter("PreferredLocation", typeof(string));
    
            var interstedProjectParameter = interstedProject != null ?
                new ObjectParameter("InterstedProject", interstedProject) :
                new ObjectParameter("InterstedProject", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTELeadSourceofEnquiry_UpdateLeadSourceofEnquiry", leadIDParameter, contactIDParameter, firstConnectParameter, firstConnectModeParameter, primarySourceParameter, secondarySourceParameter, campaignEventidParameter, salesEngineParameter, leadOriginCityParameter, preferredLocationParameter, interstedProjectParameter, result);
        }
    
        public virtual int uspTELeadSourceofEnquiry_UpdateLeadStageBlackList(Nullable<int> leadID, Nullable<int> contactID, string leadStage, ObjectParameter result)
        {
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            var leadStageParameter = leadStage != null ?
                new ObjectParameter("LeadStage", leadStage) :
                new ObjectParameter("LeadStage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTELeadSourceofEnquiry_UpdateLeadStageBlackList", leadIDParameter, contactIDParameter, leadStageParameter, result);
        }
    
        public virtual int uspTELeadSourceofEnquiry_UpdateLeadStageClosed(Nullable<int> leadID, Nullable<int> contactID, string leadStage, ObjectParameter result)
        {
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            var leadStageParameter = leadStage != null ?
                new ObjectParameter("LeadStage", leadStage) :
                new ObjectParameter("LeadStage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTELeadSourceofEnquiry_UpdateLeadStageClosed", leadIDParameter, contactIDParameter, leadStageParameter, result);
        }
    
        public virtual int uspTELeadSourceofEnquiry_UpdateLeadStagePropectus(Nullable<int> leadID, Nullable<int> contactID, string leadStage, ObjectParameter result)
        {
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            var leadStageParameter = leadStage != null ?
                new ObjectParameter("LeadStage", leadStage) :
                new ObjectParameter("LeadStage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTELeadSourceofEnquiry_UpdateLeadStagePropectus", leadIDParameter, contactIDParameter, leadStageParameter, result);
        }
    
        public virtual int uspTELeadSourceofEnquiry_UpdateLeadStageSuspect(Nullable<int> leadID, Nullable<int> contactID, string leadStage, ObjectParameter result)
        {
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            var leadStageParameter = leadStage != null ?
                new ObjectParameter("LeadStage", leadStage) :
                new ObjectParameter("LeadStage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTELeadSourceofEnquiry_UpdateLeadStageSuspect", leadIDParameter, contactIDParameter, leadStageParameter, result);
        }
    
        public virtual int uspTELeadSourceofEnquiry_UpdateLeadStageTrash(Nullable<int> leadID, Nullable<int> contactID, string leadStage, ObjectParameter result)
        {
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            var leadStageParameter = leadStage != null ?
                new ObjectParameter("LeadStage", leadStage) :
                new ObjectParameter("LeadStage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTELeadSourceofEnquiry_UpdateLeadStageTrash", leadIDParameter, contactIDParameter, leadStageParameter, result);
        }
    
        public virtual int uspTELeadTags_CreateInsertTELeadTags(Nullable<int> contextID, string leadTagName, Nullable<int> contactID, Nullable<System.DateTime> lastModifiedOn, Nullable<int> lastModifiedBy_Id, Nullable<bool> isDeleted, ObjectParameter result)
        {
            var contextIDParameter = contextID.HasValue ?
                new ObjectParameter("ContextID", contextID) :
                new ObjectParameter("ContextID", typeof(int));
    
            var leadTagNameParameter = leadTagName != null ?
                new ObjectParameter("LeadTagName", leadTagName) :
                new ObjectParameter("LeadTagName", typeof(string));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTELeadTags_CreateInsertTELeadTags", contextIDParameter, leadTagNameParameter, contactIDParameter, lastModifiedOnParameter, lastModifiedBy_IdParameter, isDeletedParameter, result);
        }
    
        public virtual int uspTELeadTags_DeleteBYLeadTagID(Nullable<int> leadTagID, ObjectParameter result)
        {
            var leadTagIDParameter = leadTagID.HasValue ?
                new ObjectParameter("LeadTagID", leadTagID) :
                new ObjectParameter("LeadTagID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTELeadTags_DeleteBYLeadTagID", leadTagIDParameter, result);
        }
    
        public virtual int uspTELeadTags_GetAllTELeadTagByContactID(Nullable<int> contactID)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTELeadTags_GetAllTELeadTagByContactID", contactIDParameter);
        }
    
        public virtual ObjectResult<uspTELeadTags_GetAllTELeadTags_Result> uspTELeadTags_GetAllTELeadTags()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTELeadTags_GetAllTELeadTags_Result>("uspTELeadTags_GetAllTELeadTags");
        }
    
        public virtual ObjectResult<uspTELeadTags_GetByContextId_Result> uspTELeadTags_GetByContextId(Nullable<int> contextID)
        {
            var contextIDParameter = contextID.HasValue ?
                new ObjectParameter("ContextID", contextID) :
                new ObjectParameter("ContextID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTELeadTags_GetByContextId_Result>("uspTELeadTags_GetByContextId", contextIDParameter);
        }
    
        public virtual ObjectResult<uspTELeadTags_GetByLeadTagId_Result> uspTELeadTags_GetByLeadTagId(Nullable<int> leadTagID)
        {
            var leadTagIDParameter = leadTagID.HasValue ?
                new ObjectParameter("LeadTagID", leadTagID) :
                new ObjectParameter("LeadTagID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTELeadTags_GetByLeadTagId_Result>("uspTELeadTags_GetByLeadTagId", leadTagIDParameter);
        }
    
        public virtual int uspTELeadTags_UpdateTELeadTags(Nullable<int> leadTagID, Nullable<int> contextID, Nullable<int> contactID, string leadTagName, Nullable<System.DateTime> lastModifiedOn, Nullable<int> lastModifiedBy_Id, Nullable<bool> isDeleted, ObjectParameter result)
        {
            var leadTagIDParameter = leadTagID.HasValue ?
                new ObjectParameter("LeadTagID", leadTagID) :
                new ObjectParameter("LeadTagID", typeof(int));
    
            var contextIDParameter = contextID.HasValue ?
                new ObjectParameter("ContextID", contextID) :
                new ObjectParameter("ContextID", typeof(int));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            var leadTagNameParameter = leadTagName != null ?
                new ObjectParameter("LeadTagName", leadTagName) :
                new ObjectParameter("LeadTagName", typeof(string));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTELeadTags_UpdateTELeadTags", leadTagIDParameter, contextIDParameter, contactIDParameter, leadTagNameParameter, lastModifiedOnParameter, lastModifiedBy_IdParameter, isDeletedParameter, result);
        }
    
        public virtual ObjectResult<uspTELeadTaskByContactID_TELeadGetByContactId_Result> uspTELeadTaskByContactID_TELeadGetByContactId(Nullable<int> contactID)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTELeadTaskByContactID_TELeadGetByContactId_Result>("uspTELeadTaskByContactID_TELeadGetByContactId", contactIDParameter);
        }
    
        public virtual int uspTELeadTempUpdate_UpdateLeadDeatils(Nullable<int> leadID, Nullable<int> contactID, string salutation, string firstName, string lastname, string mobile, string email, ObjectParameter result)
        {
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            var salutationParameter = salutation != null ?
                new ObjectParameter("salutation", salutation) :
                new ObjectParameter("salutation", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTELeadTempUpdate_UpdateLeadDeatils", leadIDParameter, contactIDParameter, salutationParameter, firstNameParameter, lastnameParameter, mobileParameter, emailParameter, result);
        }
    
        public virtual int uspTELeadTempUpdate_UpdateTELeadTemp(Nullable<int> leadID, Nullable<int> contactID, string leadTemperature, ObjectParameter result)
        {
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            var leadTemperatureParameter = leadTemperature != null ?
                new ObjectParameter("LeadTemperature", leadTemperature) :
                new ObjectParameter("LeadTemperature", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTELeadTempUpdate_UpdateTELeadTemp", leadIDParameter, contactIDParameter, leadTemperatureParameter, result);
        }
    
        public virtual int uspTEMasterSpecialConditions_DeleteTEMasterSpecialConditions(Nullable<int> masterSpecialConditionID, ObjectParameter result)
        {
            var masterSpecialConditionIDParameter = masterSpecialConditionID.HasValue ?
                new ObjectParameter("MasterSpecialConditionID", masterSpecialConditionID) :
                new ObjectParameter("MasterSpecialConditionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEMasterSpecialConditions_DeleteTEMasterSpecialConditions", masterSpecialConditionIDParameter, result);
        }
    
        public virtual ObjectResult<uspTEMasterSpecialConditions_GetAllTEMasterSpecialConditions_Result> uspTEMasterSpecialConditions_GetAllTEMasterSpecialConditions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEMasterSpecialConditions_GetAllTEMasterSpecialConditions_Result>("uspTEMasterSpecialConditions_GetAllTEMasterSpecialConditions");
        }
    
        public virtual int uspTEMasterSpecialConditions_InsertTEMasterSpecialConditions(string seqNo, string masterSpecialConditionText, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var seqNoParameter = seqNo != null ?
                new ObjectParameter("SeqNo", seqNo) :
                new ObjectParameter("SeqNo", typeof(string));
    
            var masterSpecialConditionTextParameter = masterSpecialConditionText != null ?
                new ObjectParameter("MasterSpecialConditionText", masterSpecialConditionText) :
                new ObjectParameter("MasterSpecialConditionText", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEMasterSpecialConditions_InsertTEMasterSpecialConditions", seqNoParameter, masterSpecialConditionTextParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEMasterSpecialConditions_UpdateTEMasterSpecialConditions(Nullable<int> masterSpecialConditionID, string seqNo, string masterSpecialConditionText, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var masterSpecialConditionIDParameter = masterSpecialConditionID.HasValue ?
                new ObjectParameter("MasterSpecialConditionID", masterSpecialConditionID) :
                new ObjectParameter("MasterSpecialConditionID", typeof(int));
    
            var seqNoParameter = seqNo != null ?
                new ObjectParameter("SeqNo", seqNo) :
                new ObjectParameter("SeqNo", typeof(string));
    
            var masterSpecialConditionTextParameter = masterSpecialConditionText != null ?
                new ObjectParameter("MasterSpecialConditionText", masterSpecialConditionText) :
                new ObjectParameter("MasterSpecialConditionText", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEMasterSpecialConditions_UpdateTEMasterSpecialConditions", masterSpecialConditionIDParameter, seqNoParameter, masterSpecialConditionTextParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEMasterTermsandConditions_DeleteTEMasterTermsandConditions(Nullable<int> masterTermsandConditionID, ObjectParameter result)
        {
            var masterTermsandConditionIDParameter = masterTermsandConditionID.HasValue ?
                new ObjectParameter("MasterTermsandConditionID", masterTermsandConditionID) :
                new ObjectParameter("MasterTermsandConditionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEMasterTermsandConditions_DeleteTEMasterTermsandConditions", masterTermsandConditionIDParameter, result);
        }
    
        public virtual ObjectResult<uspTEMasterTermsandConditions_GetAllTEMasterTermsandConditions_Result> uspTEMasterTermsandConditions_GetAllTEMasterTermsandConditions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEMasterTermsandConditions_GetAllTEMasterTermsandConditions_Result>("uspTEMasterTermsandConditions_GetAllTEMasterTermsandConditions");
        }
    
        public virtual int uspTEMasterTermsandConditions_InsertTEMasterTermsandConditions(string seqNo, string masterTermsandConditionText, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var seqNoParameter = seqNo != null ?
                new ObjectParameter("SeqNo", seqNo) :
                new ObjectParameter("SeqNo", typeof(string));
    
            var masterTermsandConditionTextParameter = masterTermsandConditionText != null ?
                new ObjectParameter("MasterTermsandConditionText", masterTermsandConditionText) :
                new ObjectParameter("MasterTermsandConditionText", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEMasterTermsandConditions_InsertTEMasterTermsandConditions", seqNoParameter, masterTermsandConditionTextParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEMasterTermsandConditions_UpdateTEMasterTermsandConditions(Nullable<int> masterTermsandConditionID, string seqNo, string masterTermsandConditionText, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var masterTermsandConditionIDParameter = masterTermsandConditionID.HasValue ?
                new ObjectParameter("MasterTermsandConditionID", masterTermsandConditionID) :
                new ObjectParameter("MasterTermsandConditionID", typeof(int));
    
            var seqNoParameter = seqNo != null ?
                new ObjectParameter("SeqNo", seqNo) :
                new ObjectParameter("SeqNo", typeof(string));
    
            var masterTermsandConditionTextParameter = masterTermsandConditionText != null ?
                new ObjectParameter("MasterTermsandConditionText", masterTermsandConditionText) :
                new ObjectParameter("MasterTermsandConditionText", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEMasterTermsandConditions_UpdateTEMasterTermsandConditions", masterTermsandConditionIDParameter, seqNoParameter, masterTermsandConditionTextParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEMileStonesMaster_DeleteScheduleID(Nullable<int> scheduleID, ObjectParameter result)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEMileStonesMaster_DeleteScheduleID", scheduleIDParameter, result);
        }
    
        public virtual ObjectResult<uspTEMileStonesMaster_GetAllTEMileStonesMaster_Result> uspTEMileStonesMaster_GetAllTEMileStonesMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEMileStonesMaster_GetAllTEMileStonesMaster_Result>("uspTEMileStonesMaster_GetAllTEMileStonesMaster");
        }
    
        public virtual ObjectResult<uspTEMileStonesMaster_GetTEMileStonesMaster_ByScheduleID_Result> uspTEMileStonesMaster_GetTEMileStonesMaster_ByScheduleID(Nullable<int> scheduleID)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEMileStonesMaster_GetTEMileStonesMaster_ByScheduleID_Result>("uspTEMileStonesMaster_GetTEMileStonesMaster_ByScheduleID", scheduleIDParameter);
        }
    
        public virtual int uspTEMileStonesMaster_InsertTEMileStonesMaster(string scheduleName, string scheduleCode, string scheduleType, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var scheduleNameParameter = scheduleName != null ?
                new ObjectParameter("ScheduleName", scheduleName) :
                new ObjectParameter("ScheduleName", typeof(string));
    
            var scheduleCodeParameter = scheduleCode != null ?
                new ObjectParameter("ScheduleCode", scheduleCode) :
                new ObjectParameter("ScheduleCode", typeof(string));
    
            var scheduleTypeParameter = scheduleType != null ?
                new ObjectParameter("ScheduleType", scheduleType) :
                new ObjectParameter("ScheduleType", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEMileStonesMaster_InsertTEMileStonesMaster", scheduleNameParameter, scheduleCodeParameter, scheduleTypeParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEMileStonesMaster_UpdateTEMileStonesMaster(Nullable<int> scheduleID, string scheduleName, string scheduleCode, string scheduleType, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            var scheduleNameParameter = scheduleName != null ?
                new ObjectParameter("ScheduleName", scheduleName) :
                new ObjectParameter("ScheduleName", typeof(string));
    
            var scheduleCodeParameter = scheduleCode != null ?
                new ObjectParameter("ScheduleCode", scheduleCode) :
                new ObjectParameter("ScheduleCode", typeof(string));
    
            var scheduleTypeParameter = scheduleType != null ?
                new ObjectParameter("ScheduleType", scheduleType) :
                new ObjectParameter("ScheduleType", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEMileStonesMaster_UpdateTEMileStonesMaster", scheduleIDParameter, scheduleNameParameter, scheduleCodeParameter, scheduleTypeParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTENotes_CreateInsertTENotes(Nullable<int> contactID, Nullable<int> contextID, string notes, string notesBy, Nullable<System.DateTime> notesDateTime, string type, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<System.DateTime> lastModifiedOn, Nullable<int> lastModifiedBy_Id, Nullable<int> isPrivate, Nullable<bool> isDeleted, ObjectParameter result)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            var contextIDParameter = contextID.HasValue ?
                new ObjectParameter("ContextID", contextID) :
                new ObjectParameter("ContextID", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var notesByParameter = notesBy != null ?
                new ObjectParameter("NotesBy", notesBy) :
                new ObjectParameter("NotesBy", typeof(string));
    
            var notesDateTimeParameter = notesDateTime.HasValue ?
                new ObjectParameter("NotesDateTime", notesDateTime) :
                new ObjectParameter("NotesDateTime", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var isPrivateParameter = isPrivate.HasValue ?
                new ObjectParameter("IsPrivate", isPrivate) :
                new ObjectParameter("IsPrivate", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTENotes_CreateInsertTENotes", contactIDParameter, contextIDParameter, notesParameter, notesByParameter, notesDateTimeParameter, typeParameter, createdOnParameter, createdByParameter, lastModifiedOnParameter, lastModifiedBy_IdParameter, isPrivateParameter, isDeletedParameter, result);
        }
    
        public virtual int uspTENotes_DeleteTENotesBYNotesID(Nullable<int> notesID, ObjectParameter result)
        {
            var notesIDParameter = notesID.HasValue ?
                new ObjectParameter("NotesID", notesID) :
                new ObjectParameter("NotesID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTENotes_DeleteTENotesBYNotesID", notesIDParameter, result);
        }
    
        public virtual ObjectResult<uspTENotes_GetAllTENotes_Result> uspTENotes_GetAllTENotes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTENotes_GetAllTENotes_Result>("uspTENotes_GetAllTENotes");
        }
    
        public virtual ObjectResult<uspTENotes_GetByContactID_Result> uspTENotes_GetByContactID(Nullable<int> contactID)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTENotes_GetByContactID_Result>("uspTENotes_GetByContactID", contactIDParameter);
        }
    
        public virtual ObjectResult<uspTENotes_GetByContextID_Result> uspTENotes_GetByContextID(Nullable<int> contextID)
        {
            var contextIDParameter = contextID.HasValue ?
                new ObjectParameter("ContextID", contextID) :
                new ObjectParameter("ContextID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTENotes_GetByContextID_Result>("uspTENotes_GetByContextID", contextIDParameter);
        }
    
        public virtual ObjectResult<uspTENotes_GetByNotesId_Result> uspTENotes_GetByNotesId(Nullable<int> notesID)
        {
            var notesIDParameter = notesID.HasValue ?
                new ObjectParameter("NotesID", notesID) :
                new ObjectParameter("NotesID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTENotes_GetByNotesId_Result>("uspTENotes_GetByNotesId", notesIDParameter);
        }
    
        public virtual int uspTENotes_UpdateTENotes(Nullable<int> notesID, Nullable<int> contactID, Nullable<int> contextID, string notes, string notesBy, Nullable<System.DateTime> notesDateTime, string type, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<System.DateTime> lastModifiedOn, Nullable<int> lastModifiedBy_Id, Nullable<int> isPrivate, Nullable<bool> isDeleted, ObjectParameter result)
        {
            var notesIDParameter = notesID.HasValue ?
                new ObjectParameter("NotesID", notesID) :
                new ObjectParameter("NotesID", typeof(int));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            var contextIDParameter = contextID.HasValue ?
                new ObjectParameter("ContextID", contextID) :
                new ObjectParameter("ContextID", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var notesByParameter = notesBy != null ?
                new ObjectParameter("NotesBy", notesBy) :
                new ObjectParameter("NotesBy", typeof(string));
    
            var notesDateTimeParameter = notesDateTime.HasValue ?
                new ObjectParameter("NotesDateTime", notesDateTime) :
                new ObjectParameter("NotesDateTime", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var isPrivateParameter = isPrivate.HasValue ?
                new ObjectParameter("IsPrivate", isPrivate) :
                new ObjectParameter("IsPrivate", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTENotes_UpdateTENotes", notesIDParameter, contactIDParameter, contextIDParameter, notesParameter, notesByParameter, notesDateTimeParameter, typeParameter, createdOnParameter, createdByParameter, lastModifiedOnParameter, lastModifiedBy_IdParameter, isPrivateParameter, isDeletedParameter, result);
        }
    
        public virtual ObjectResult<uspTEOfda_Result> uspTEOfda(Nullable<int> offerID)
        {
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEOfda_Result>("uspTEOfda", offerIDParameter);
        }
    
        public virtual int uspTEOffer_CreateInsert(Nullable<int> leadID, string offerTitleName, Nullable<int> projectID, Nullable<int> unitID, Nullable<int> productID, Nullable<int> specsType, Nullable<decimal> carPetArea, Nullable<decimal> builtUpArea, Nullable<decimal> standardPlotArea, Nullable<decimal> superBuiltUpArea, Nullable<decimal> saleableArea, Nullable<decimal> effectiveDiscount, Nullable<decimal> effecDiscPercentage, Nullable<decimal> discOnBasicCost, string discPaymentTerms, string discSpecialConditions, string dPIIncentiveApplicable, string preparedBy, Nullable<int> submittedBy, Nullable<int> connectSalesConsultant, Nullable<int> closeSalesConsultant, Nullable<int> assistedSalesConsultant, Nullable<int> cEMmanager, Nullable<int> revisionNo, string currentStatus, string orderStatus, string transitionStatus, string offerCustomerName, string mergedUnit, Nullable<System.DateTime> expiryDate, Nullable<int> expiredBy, Nullable<System.DateTime> cCPSaleTime, string sAPCustomerID, string sAPOrderID, string businesSEGMENT, Nullable<int> registerCommunicationID, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, ObjectParameter result)
        {
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            var offerTitleNameParameter = offerTitleName != null ?
                new ObjectParameter("OfferTitleName", offerTitleName) :
                new ObjectParameter("OfferTitleName", typeof(string));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var specsTypeParameter = specsType.HasValue ?
                new ObjectParameter("SpecsType", specsType) :
                new ObjectParameter("SpecsType", typeof(int));
    
            var carPetAreaParameter = carPetArea.HasValue ?
                new ObjectParameter("CarPetArea", carPetArea) :
                new ObjectParameter("CarPetArea", typeof(decimal));
    
            var builtUpAreaParameter = builtUpArea.HasValue ?
                new ObjectParameter("BuiltUpArea", builtUpArea) :
                new ObjectParameter("BuiltUpArea", typeof(decimal));
    
            var standardPlotAreaParameter = standardPlotArea.HasValue ?
                new ObjectParameter("StandardPlotArea", standardPlotArea) :
                new ObjectParameter("StandardPlotArea", typeof(decimal));
    
            var superBuiltUpAreaParameter = superBuiltUpArea.HasValue ?
                new ObjectParameter("SuperBuiltUpArea", superBuiltUpArea) :
                new ObjectParameter("SuperBuiltUpArea", typeof(decimal));
    
            var saleableAreaParameter = saleableArea.HasValue ?
                new ObjectParameter("SaleableArea", saleableArea) :
                new ObjectParameter("SaleableArea", typeof(decimal));
    
            var effectiveDiscountParameter = effectiveDiscount.HasValue ?
                new ObjectParameter("EffectiveDiscount", effectiveDiscount) :
                new ObjectParameter("EffectiveDiscount", typeof(decimal));
    
            var effecDiscPercentageParameter = effecDiscPercentage.HasValue ?
                new ObjectParameter("EffecDiscPercentage", effecDiscPercentage) :
                new ObjectParameter("EffecDiscPercentage", typeof(decimal));
    
            var discOnBasicCostParameter = discOnBasicCost.HasValue ?
                new ObjectParameter("DiscOnBasicCost", discOnBasicCost) :
                new ObjectParameter("DiscOnBasicCost", typeof(decimal));
    
            var discPaymentTermsParameter = discPaymentTerms != null ?
                new ObjectParameter("DiscPaymentTerms", discPaymentTerms) :
                new ObjectParameter("DiscPaymentTerms", typeof(string));
    
            var discSpecialConditionsParameter = discSpecialConditions != null ?
                new ObjectParameter("DiscSpecialConditions", discSpecialConditions) :
                new ObjectParameter("DiscSpecialConditions", typeof(string));
    
            var dPIIncentiveApplicableParameter = dPIIncentiveApplicable != null ?
                new ObjectParameter("DPIIncentiveApplicable", dPIIncentiveApplicable) :
                new ObjectParameter("DPIIncentiveApplicable", typeof(string));
    
            var preparedByParameter = preparedBy != null ?
                new ObjectParameter("PreparedBy", preparedBy) :
                new ObjectParameter("PreparedBy", typeof(string));
    
            var submittedByParameter = submittedBy.HasValue ?
                new ObjectParameter("SubmittedBy", submittedBy) :
                new ObjectParameter("SubmittedBy", typeof(int));
    
            var connectSalesConsultantParameter = connectSalesConsultant.HasValue ?
                new ObjectParameter("ConnectSalesConsultant", connectSalesConsultant) :
                new ObjectParameter("ConnectSalesConsultant", typeof(int));
    
            var closeSalesConsultantParameter = closeSalesConsultant.HasValue ?
                new ObjectParameter("CloseSalesConsultant", closeSalesConsultant) :
                new ObjectParameter("CloseSalesConsultant", typeof(int));
    
            var assistedSalesConsultantParameter = assistedSalesConsultant.HasValue ?
                new ObjectParameter("AssistedSalesConsultant", assistedSalesConsultant) :
                new ObjectParameter("AssistedSalesConsultant", typeof(int));
    
            var cEMmanagerParameter = cEMmanager.HasValue ?
                new ObjectParameter("CEMmanager", cEMmanager) :
                new ObjectParameter("CEMmanager", typeof(int));
    
            var revisionNoParameter = revisionNo.HasValue ?
                new ObjectParameter("RevisionNo", revisionNo) :
                new ObjectParameter("RevisionNo", typeof(int));
    
            var currentStatusParameter = currentStatus != null ?
                new ObjectParameter("CurrentStatus", currentStatus) :
                new ObjectParameter("CurrentStatus", typeof(string));
    
            var orderStatusParameter = orderStatus != null ?
                new ObjectParameter("OrderStatus", orderStatus) :
                new ObjectParameter("OrderStatus", typeof(string));
    
            var transitionStatusParameter = transitionStatus != null ?
                new ObjectParameter("TransitionStatus", transitionStatus) :
                new ObjectParameter("TransitionStatus", typeof(string));
    
            var offerCustomerNameParameter = offerCustomerName != null ?
                new ObjectParameter("OfferCustomerName", offerCustomerName) :
                new ObjectParameter("OfferCustomerName", typeof(string));
    
            var mergedUnitParameter = mergedUnit != null ?
                new ObjectParameter("MergedUnit", mergedUnit) :
                new ObjectParameter("MergedUnit", typeof(string));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var expiredByParameter = expiredBy.HasValue ?
                new ObjectParameter("ExpiredBy", expiredBy) :
                new ObjectParameter("ExpiredBy", typeof(int));
    
            var cCPSaleTimeParameter = cCPSaleTime.HasValue ?
                new ObjectParameter("CCPSaleTime", cCPSaleTime) :
                new ObjectParameter("CCPSaleTime", typeof(System.DateTime));
    
            var sAPCustomerIDParameter = sAPCustomerID != null ?
                new ObjectParameter("SAPCustomerID", sAPCustomerID) :
                new ObjectParameter("SAPCustomerID", typeof(string));
    
            var sAPOrderIDParameter = sAPOrderID != null ?
                new ObjectParameter("SAPOrderID", sAPOrderID) :
                new ObjectParameter("SAPOrderID", typeof(string));
    
            var businesSEGMENTParameter = businesSEGMENT != null ?
                new ObjectParameter("BusinesSEGMENT", businesSEGMENT) :
                new ObjectParameter("BusinesSEGMENT", typeof(string));
    
            var registerCommunicationIDParameter = registerCommunicationID.HasValue ?
                new ObjectParameter("RegisterCommunicationID", registerCommunicationID) :
                new ObjectParameter("RegisterCommunicationID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEOffer_CreateInsert", leadIDParameter, offerTitleNameParameter, projectIDParameter, unitIDParameter, productIDParameter, specsTypeParameter, carPetAreaParameter, builtUpAreaParameter, standardPlotAreaParameter, superBuiltUpAreaParameter, saleableAreaParameter, effectiveDiscountParameter, effecDiscPercentageParameter, discOnBasicCostParameter, discPaymentTermsParameter, discSpecialConditionsParameter, dPIIncentiveApplicableParameter, preparedByParameter, submittedByParameter, connectSalesConsultantParameter, closeSalesConsultantParameter, assistedSalesConsultantParameter, cEMmanagerParameter, revisionNoParameter, currentStatusParameter, orderStatusParameter, transitionStatusParameter, offerCustomerNameParameter, mergedUnitParameter, expiryDateParameter, expiredByParameter, cCPSaleTimeParameter, sAPCustomerIDParameter, sAPOrderIDParameter, businesSEGMENTParameter, registerCommunicationIDParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedOnParameter, result);
        }
    
        public virtual int uspTEOffer_DeleteTEOffer(Nullable<int> offerID, ObjectParameter result)
        {
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEOffer_DeleteTEOffer", offerIDParameter, result);
        }
    
        public virtual ObjectResult<uspTEOffer_GetAllTEOffersByLeadID_Result> uspTEOffer_GetAllTEOffersByLeadID(Nullable<int> leadID)
        {
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEOffer_GetAllTEOffersByLeadID_Result>("uspTEOffer_GetAllTEOffersByLeadID", leadIDParameter);
        }
    
        public virtual ObjectResult<uspTEOffer_GetAllTEOffersData_Result> uspTEOffer_GetAllTEOffersData(Nullable<int> pageNumber, Nullable<int> pagePerCount)
        {
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pagePerCountParameter = pagePerCount.HasValue ?
                new ObjectParameter("PagePerCount", pagePerCount) :
                new ObjectParameter("PagePerCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEOffer_GetAllTEOffersData_Result>("uspTEOffer_GetAllTEOffersData", pageNumberParameter, pagePerCountParameter);
        }
    
        public virtual int uspTEOffer_UpdateTEOffer(Nullable<int> offerID, Nullable<int> leadID, string offerTitleName, Nullable<int> projectID, Nullable<int> unitID, Nullable<int> productID, Nullable<int> specsType, Nullable<decimal> carPetArea, Nullable<decimal> builtUpArea, Nullable<decimal> standardPlotArea, Nullable<decimal> superBuiltUpArea, Nullable<decimal> saleableArea, Nullable<decimal> effectiveDiscount, Nullable<decimal> effecDiscPercentage, Nullable<decimal> discOnBasicCost, string discPaymentTerms, string discSpecialConditions, string dPIIncentiveApplicable, string preparedBy, Nullable<int> submittedBy, Nullable<int> connectSalesConsultant, Nullable<int> closeSalesConsultant, Nullable<int> assistedSalesConsultant, Nullable<int> cEMmanager, Nullable<int> revisionNo, string currentstatus, string orderStatus, string transitionStatus, string offerCustomerName, string mergedUnit, Nullable<System.DateTime> expiryDate, Nullable<int> expiredBy, Nullable<System.DateTime> cCPSaleTime, string sAPCustomerID, string sAPOrderID, string businesSEGMENT, Nullable<int> registerCommunicationID, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, ObjectParameter result)
        {
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            var offerTitleNameParameter = offerTitleName != null ?
                new ObjectParameter("OfferTitleName", offerTitleName) :
                new ObjectParameter("OfferTitleName", typeof(string));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var specsTypeParameter = specsType.HasValue ?
                new ObjectParameter("SpecsType", specsType) :
                new ObjectParameter("SpecsType", typeof(int));
    
            var carPetAreaParameter = carPetArea.HasValue ?
                new ObjectParameter("CarPetArea", carPetArea) :
                new ObjectParameter("CarPetArea", typeof(decimal));
    
            var builtUpAreaParameter = builtUpArea.HasValue ?
                new ObjectParameter("BuiltUpArea", builtUpArea) :
                new ObjectParameter("BuiltUpArea", typeof(decimal));
    
            var standardPlotAreaParameter = standardPlotArea.HasValue ?
                new ObjectParameter("StandardPlotArea", standardPlotArea) :
                new ObjectParameter("StandardPlotArea", typeof(decimal));
    
            var superBuiltUpAreaParameter = superBuiltUpArea.HasValue ?
                new ObjectParameter("SuperBuiltUpArea", superBuiltUpArea) :
                new ObjectParameter("SuperBuiltUpArea", typeof(decimal));
    
            var saleableAreaParameter = saleableArea.HasValue ?
                new ObjectParameter("SaleableArea", saleableArea) :
                new ObjectParameter("SaleableArea", typeof(decimal));
    
            var effectiveDiscountParameter = effectiveDiscount.HasValue ?
                new ObjectParameter("EffectiveDiscount", effectiveDiscount) :
                new ObjectParameter("EffectiveDiscount", typeof(decimal));
    
            var effecDiscPercentageParameter = effecDiscPercentage.HasValue ?
                new ObjectParameter("EffecDiscPercentage", effecDiscPercentage) :
                new ObjectParameter("EffecDiscPercentage", typeof(decimal));
    
            var discOnBasicCostParameter = discOnBasicCost.HasValue ?
                new ObjectParameter("DiscOnBasicCost", discOnBasicCost) :
                new ObjectParameter("DiscOnBasicCost", typeof(decimal));
    
            var discPaymentTermsParameter = discPaymentTerms != null ?
                new ObjectParameter("DiscPaymentTerms", discPaymentTerms) :
                new ObjectParameter("DiscPaymentTerms", typeof(string));
    
            var discSpecialConditionsParameter = discSpecialConditions != null ?
                new ObjectParameter("DiscSpecialConditions", discSpecialConditions) :
                new ObjectParameter("DiscSpecialConditions", typeof(string));
    
            var dPIIncentiveApplicableParameter = dPIIncentiveApplicable != null ?
                new ObjectParameter("DPIIncentiveApplicable", dPIIncentiveApplicable) :
                new ObjectParameter("DPIIncentiveApplicable", typeof(string));
    
            var preparedByParameter = preparedBy != null ?
                new ObjectParameter("PreparedBy", preparedBy) :
                new ObjectParameter("PreparedBy", typeof(string));
    
            var submittedByParameter = submittedBy.HasValue ?
                new ObjectParameter("SubmittedBy", submittedBy) :
                new ObjectParameter("SubmittedBy", typeof(int));
    
            var connectSalesConsultantParameter = connectSalesConsultant.HasValue ?
                new ObjectParameter("ConnectSalesConsultant", connectSalesConsultant) :
                new ObjectParameter("ConnectSalesConsultant", typeof(int));
    
            var closeSalesConsultantParameter = closeSalesConsultant.HasValue ?
                new ObjectParameter("CloseSalesConsultant", closeSalesConsultant) :
                new ObjectParameter("CloseSalesConsultant", typeof(int));
    
            var assistedSalesConsultantParameter = assistedSalesConsultant.HasValue ?
                new ObjectParameter("AssistedSalesConsultant", assistedSalesConsultant) :
                new ObjectParameter("AssistedSalesConsultant", typeof(int));
    
            var cEMmanagerParameter = cEMmanager.HasValue ?
                new ObjectParameter("CEMmanager", cEMmanager) :
                new ObjectParameter("CEMmanager", typeof(int));
    
            var revisionNoParameter = revisionNo.HasValue ?
                new ObjectParameter("RevisionNo", revisionNo) :
                new ObjectParameter("RevisionNo", typeof(int));
    
            var currentstatusParameter = currentstatus != null ?
                new ObjectParameter("Currentstatus", currentstatus) :
                new ObjectParameter("Currentstatus", typeof(string));
    
            var orderStatusParameter = orderStatus != null ?
                new ObjectParameter("OrderStatus", orderStatus) :
                new ObjectParameter("OrderStatus", typeof(string));
    
            var transitionStatusParameter = transitionStatus != null ?
                new ObjectParameter("TransitionStatus", transitionStatus) :
                new ObjectParameter("TransitionStatus", typeof(string));
    
            var offerCustomerNameParameter = offerCustomerName != null ?
                new ObjectParameter("OfferCustomerName", offerCustomerName) :
                new ObjectParameter("OfferCustomerName", typeof(string));
    
            var mergedUnitParameter = mergedUnit != null ?
                new ObjectParameter("MergedUnit", mergedUnit) :
                new ObjectParameter("MergedUnit", typeof(string));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var expiredByParameter = expiredBy.HasValue ?
                new ObjectParameter("ExpiredBy", expiredBy) :
                new ObjectParameter("ExpiredBy", typeof(int));
    
            var cCPSaleTimeParameter = cCPSaleTime.HasValue ?
                new ObjectParameter("CCPSaleTime", cCPSaleTime) :
                new ObjectParameter("CCPSaleTime", typeof(System.DateTime));
    
            var sAPCustomerIDParameter = sAPCustomerID != null ?
                new ObjectParameter("SAPCustomerID", sAPCustomerID) :
                new ObjectParameter("SAPCustomerID", typeof(string));
    
            var sAPOrderIDParameter = sAPOrderID != null ?
                new ObjectParameter("SAPOrderID", sAPOrderID) :
                new ObjectParameter("SAPOrderID", typeof(string));
    
            var businesSEGMENTParameter = businesSEGMENT != null ?
                new ObjectParameter("BusinesSEGMENT", businesSEGMENT) :
                new ObjectParameter("BusinesSEGMENT", typeof(string));
    
            var registerCommunicationIDParameter = registerCommunicationID.HasValue ?
                new ObjectParameter("RegisterCommunicationID", registerCommunicationID) :
                new ObjectParameter("RegisterCommunicationID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEOffer_UpdateTEOffer", offerIDParameter, leadIDParameter, offerTitleNameParameter, projectIDParameter, unitIDParameter, productIDParameter, specsTypeParameter, carPetAreaParameter, builtUpAreaParameter, standardPlotAreaParameter, superBuiltUpAreaParameter, saleableAreaParameter, effectiveDiscountParameter, effecDiscPercentageParameter, discOnBasicCostParameter, discPaymentTermsParameter, discSpecialConditionsParameter, dPIIncentiveApplicableParameter, preparedByParameter, submittedByParameter, connectSalesConsultantParameter, closeSalesConsultantParameter, assistedSalesConsultantParameter, cEMmanagerParameter, revisionNoParameter, currentstatusParameter, orderStatusParameter, transitionStatusParameter, offerCustomerNameParameter, mergedUnitParameter, expiryDateParameter, expiredByParameter, cCPSaleTimeParameter, sAPCustomerIDParameter, sAPOrderIDParameter, businesSEGMENTParameter, registerCommunicationIDParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedOnParameter, result);
        }
    
        public virtual int uspTEOfferDocuments_CreateInsert(Nullable<int> offerID, string documentId, string type, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, ObjectParameter result)
        {
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            var documentIdParameter = documentId != null ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEOfferDocuments_CreateInsert", offerIDParameter, documentIdParameter, typeParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedOnParameter, result);
        }
    
        public virtual int uspTEOfferEventsDate_CreateInsert(string offerLifeCycleDateType, Nullable<System.DateTime> offerLifeCycleDate, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, ObjectParameter result)
        {
            var offerLifeCycleDateTypeParameter = offerLifeCycleDateType != null ?
                new ObjectParameter("OfferLifeCycleDateType", offerLifeCycleDateType) :
                new ObjectParameter("OfferLifeCycleDateType", typeof(string));
    
            var offerLifeCycleDateParameter = offerLifeCycleDate.HasValue ?
                new ObjectParameter("OfferLifeCycleDate", offerLifeCycleDate) :
                new ObjectParameter("OfferLifeCycleDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEOfferEventsDate_CreateInsert", offerLifeCycleDateTypeParameter, offerLifeCycleDateParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedOnParameter, result);
        }
    
        public virtual int uspTEOfferExpireExtension_CreateInsert(Nullable<int> offerID, Nullable<System.DateTime> currentExpiredate, Nullable<System.DateTime> requestedExpiredate, Nullable<int> submittedBy, Nullable<System.DateTime> submittedOn, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, ObjectParameter result)
        {
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            var currentExpiredateParameter = currentExpiredate.HasValue ?
                new ObjectParameter("CurrentExpiredate", currentExpiredate) :
                new ObjectParameter("CurrentExpiredate", typeof(System.DateTime));
    
            var requestedExpiredateParameter = requestedExpiredate.HasValue ?
                new ObjectParameter("RequestedExpiredate", requestedExpiredate) :
                new ObjectParameter("RequestedExpiredate", typeof(System.DateTime));
    
            var submittedByParameter = submittedBy.HasValue ?
                new ObjectParameter("SubmittedBy", submittedBy) :
                new ObjectParameter("SubmittedBy", typeof(int));
    
            var submittedOnParameter = submittedOn.HasValue ?
                new ObjectParameter("SubmittedOn", submittedOn) :
                new ObjectParameter("SubmittedOn", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEOfferExpireExtension_CreateInsert", offerIDParameter, currentExpiredateParameter, requestedExpiredateParameter, submittedByParameter, submittedOnParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedOnParameter, result);
        }
    
        public virtual int uspTEOfferMileStone_CreateInsert(Nullable<int> offerID, Nullable<int> sEQNO, string name, string code, Nullable<System.DateTime> offeredDate, Nullable<decimal> offeredAmount, Nullable<System.DateTime> projectionDate, Nullable<System.DateTime> completionDate, string status, Nullable<decimal> totalEstimatedTax, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, ObjectParameter result)
        {
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            var sEQNOParameter = sEQNO.HasValue ?
                new ObjectParameter("SEQNO", sEQNO) :
                new ObjectParameter("SEQNO", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var offeredDateParameter = offeredDate.HasValue ?
                new ObjectParameter("OfferedDate", offeredDate) :
                new ObjectParameter("OfferedDate", typeof(System.DateTime));
    
            var offeredAmountParameter = offeredAmount.HasValue ?
                new ObjectParameter("OfferedAmount", offeredAmount) :
                new ObjectParameter("OfferedAmount", typeof(decimal));
    
            var projectionDateParameter = projectionDate.HasValue ?
                new ObjectParameter("ProjectionDate", projectionDate) :
                new ObjectParameter("ProjectionDate", typeof(System.DateTime));
    
            var completionDateParameter = completionDate.HasValue ?
                new ObjectParameter("CompletionDate", completionDate) :
                new ObjectParameter("CompletionDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var totalEstimatedTaxParameter = totalEstimatedTax.HasValue ?
                new ObjectParameter("TotalEstimatedTax", totalEstimatedTax) :
                new ObjectParameter("TotalEstimatedTax", typeof(decimal));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEOfferMileStone_CreateInsert", offerIDParameter, sEQNOParameter, nameParameter, codeParameter, offeredDateParameter, offeredAmountParameter, projectionDateParameter, completionDateParameter, statusParameter, totalEstimatedTaxParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedOnParameter, result);
        }
    
        public virtual int uspTEOfferPriceBreakUpDetails_CreateInsert(Nullable<int> offerID, string priceElementName, Nullable<decimal> priceElementQuantity, Nullable<decimal> priceElementRate, Nullable<decimal> priceElementPrice, string saleableAreaBasis, string elementType, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, ObjectParameter result)
        {
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            var priceElementNameParameter = priceElementName != null ?
                new ObjectParameter("PriceElementName", priceElementName) :
                new ObjectParameter("PriceElementName", typeof(string));
    
            var priceElementQuantityParameter = priceElementQuantity.HasValue ?
                new ObjectParameter("PriceElementQuantity", priceElementQuantity) :
                new ObjectParameter("PriceElementQuantity", typeof(decimal));
    
            var priceElementRateParameter = priceElementRate.HasValue ?
                new ObjectParameter("PriceElementRate", priceElementRate) :
                new ObjectParameter("PriceElementRate", typeof(decimal));
    
            var priceElementPriceParameter = priceElementPrice.HasValue ?
                new ObjectParameter("PriceElementPrice", priceElementPrice) :
                new ObjectParameter("PriceElementPrice", typeof(decimal));
    
            var saleableAreaBasisParameter = saleableAreaBasis != null ?
                new ObjectParameter("SaleableAreaBasis", saleableAreaBasis) :
                new ObjectParameter("SaleableAreaBasis", typeof(string));
    
            var elementTypeParameter = elementType != null ?
                new ObjectParameter("ElementType", elementType) :
                new ObjectParameter("ElementType", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEOfferPriceBreakUpDetails_CreateInsert", offerIDParameter, priceElementNameParameter, priceElementQuantityParameter, priceElementRateParameter, priceElementPriceParameter, saleableAreaBasisParameter, elementTypeParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedOnParameter, result);
        }
    
        public virtual int uspTEOffers_UpdateOfferExpiry()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEOffers_UpdateOfferExpiry");
        }
    
        public virtual int uspTEOfferSpecialCondition_CreateInsert(Nullable<int> offerID, string specialConditionName, string sPConditionCategory, string value, string sPConditionType, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, ObjectParameter result)
        {
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            var specialConditionNameParameter = specialConditionName != null ?
                new ObjectParameter("SpecialConditionName", specialConditionName) :
                new ObjectParameter("SpecialConditionName", typeof(string));
    
            var sPConditionCategoryParameter = sPConditionCategory != null ?
                new ObjectParameter("SPConditionCategory", sPConditionCategory) :
                new ObjectParameter("SPConditionCategory", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var sPConditionTypeParameter = sPConditionType != null ?
                new ObjectParameter("SPConditionType", sPConditionType) :
                new ObjectParameter("SPConditionType", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEOfferSpecialCondition_CreateInsert", offerIDParameter, specialConditionNameParameter, sPConditionCategoryParameter, valueParameter, sPConditionTypeParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedOnParameter, result);
        }
    
        public virtual int uspTEOfferSpecification_CreateInsert(Nullable<int> offerID, Nullable<int> sPecsID, string specsColourCode, string specsCtegory, string specsSubCategory, string specsDescription, Nullable<int> sEQNO, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, ObjectParameter result)
        {
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            var sPecsIDParameter = sPecsID.HasValue ?
                new ObjectParameter("SPecsID", sPecsID) :
                new ObjectParameter("SPecsID", typeof(int));
    
            var specsColourCodeParameter = specsColourCode != null ?
                new ObjectParameter("SpecsColourCode", specsColourCode) :
                new ObjectParameter("SpecsColourCode", typeof(string));
    
            var specsCtegoryParameter = specsCtegory != null ?
                new ObjectParameter("SpecsCtegory", specsCtegory) :
                new ObjectParameter("SpecsCtegory", typeof(string));
    
            var specsSubCategoryParameter = specsSubCategory != null ?
                new ObjectParameter("SpecsSubCategory", specsSubCategory) :
                new ObjectParameter("SpecsSubCategory", typeof(string));
    
            var specsDescriptionParameter = specsDescription != null ?
                new ObjectParameter("SpecsDescription", specsDescription) :
                new ObjectParameter("SpecsDescription", typeof(string));
    
            var sEQNOParameter = sEQNO.HasValue ?
                new ObjectParameter("SEQNO", sEQNO) :
                new ObjectParameter("SEQNO", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEOfferSpecification_CreateInsert", offerIDParameter, sPecsIDParameter, specsColourCodeParameter, specsCtegoryParameter, specsSubCategoryParameter, specsDescriptionParameter, sEQNOParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedOnParameter, result);
        }
    
        public virtual int uspTEOfferTC_CreateInsert(Nullable<int> offerID, string tCname, Nullable<int> sEQNO, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, ObjectParameter result)
        {
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            var tCnameParameter = tCname != null ?
                new ObjectParameter("TCname", tCname) :
                new ObjectParameter("TCname", typeof(string));
    
            var sEQNOParameter = sEQNO.HasValue ?
                new ObjectParameter("SEQNO", sEQNO) :
                new ObjectParameter("SEQNO", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEOfferTC_CreateInsert", offerIDParameter, tCnameParameter, sEQNOParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedOnParameter, result);
        }
    
        public virtual int uspTEOfferTC_DeleteTEOfferTC(Nullable<int> offerTCID, ObjectParameter result)
        {
            var offerTCIDParameter = offerTCID.HasValue ?
                new ObjectParameter("OfferTCID", offerTCID) :
                new ObjectParameter("OfferTCID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEOfferTC_DeleteTEOfferTC", offerTCIDParameter, result);
        }
    
        public virtual ObjectResult<uspTEOfferTC_GetAllTEOfferTCByOfferID_Result> uspTEOfferTC_GetAllTEOfferTCByOfferID(Nullable<int> offerID)
        {
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEOfferTC_GetAllTEOfferTCByOfferID_Result>("uspTEOfferTC_GetAllTEOfferTCByOfferID", offerIDParameter);
        }
    
        public virtual int uspTEOfferTC_UpdateTEOfferTC(Nullable<int> offerTCID, Nullable<int> offerID, string tCname, Nullable<int> sEQNO, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, ObjectParameter result)
        {
            var offerTCIDParameter = offerTCID.HasValue ?
                new ObjectParameter("OfferTCID", offerTCID) :
                new ObjectParameter("OfferTCID", typeof(int));
    
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            var tCnameParameter = tCname != null ?
                new ObjectParameter("TCname", tCname) :
                new ObjectParameter("TCname", typeof(string));
    
            var sEQNOParameter = sEQNO.HasValue ?
                new ObjectParameter("SEQNO", sEQNO) :
                new ObjectParameter("SEQNO", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEOfferTC_UpdateTEOfferTC", offerTCIDParameter, offerIDParameter, tCnameParameter, sEQNOParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedOnParameter, result);
        }
    
        public virtual int uspTEOrgRules_DeleteTEOrgRules(Nullable<int> orgnizationRuleID, ObjectParameter result)
        {
            var orgnizationRuleIDParameter = orgnizationRuleID.HasValue ?
                new ObjectParameter("OrgnizationRuleID", orgnizationRuleID) :
                new ObjectParameter("OrgnizationRuleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEOrgRules_DeleteTEOrgRules", orgnizationRuleIDParameter, result);
        }
    
        public virtual ObjectResult<uspTEOrgRules_GetAllTEOrgRules_Result> uspTEOrgRules_GetAllTEOrgRules()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEOrgRules_GetAllTEOrgRules_Result>("uspTEOrgRules_GetAllTEOrgRules");
        }
    
        public virtual int uspTEOrgRules_InsertTEOrgRules(Nullable<int> projectID, Nullable<int> towerID, Nullable<int> userID, Nullable<int> roleID, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("TowerID", towerID) :
                new ObjectParameter("TowerID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEOrgRules_InsertTEOrgRules", projectIDParameter, towerIDParameter, userIDParameter, roleIDParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEOrgRules_UpdateTEOrgRules(Nullable<int> orgnizationRuleID, Nullable<int> projectID, Nullable<int> towerID, Nullable<int> userID, Nullable<int> roleID, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var orgnizationRuleIDParameter = orgnizationRuleID.HasValue ?
                new ObjectParameter("OrgnizationRuleID", orgnizationRuleID) :
                new ObjectParameter("OrgnizationRuleID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("TowerID", towerID) :
                new ObjectParameter("TowerID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEOrgRules_UpdateTEOrgRules", orgnizationRuleIDParameter, projectIDParameter, towerIDParameter, userIDParameter, roleIDParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual ObjectResult<uspTEPort_GetUserPrevilegesByEmailPassword_Result> uspTEPort_GetUserPrevilegesByEmailPassword(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEPort_GetUserPrevilegesByEmailPassword_Result>("uspTEPort_GetUserPrevilegesByEmailPassword", userNameParameter, passwordParameter);
        }
    
        public virtual int uspTEPremiumMaster_DeleteTEPremiumMaster(Nullable<int> premiumID, ObjectParameter result)
        {
            var premiumIDParameter = premiumID.HasValue ?
                new ObjectParameter("PremiumID", premiumID) :
                new ObjectParameter("PremiumID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEPremiumMaster_DeleteTEPremiumMaster", premiumIDParameter, result);
        }
    
        public virtual int uspTEPremiumMaster_GetAllTEPremiumMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEPremiumMaster_GetAllTEPremiumMaster");
        }
    
        public virtual int uspTEPremiumMaster_InsertTEPremiumMaster(string premiumName, string premiumType, string premiumValue, string description, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var premiumNameParameter = premiumName != null ?
                new ObjectParameter("PremiumName", premiumName) :
                new ObjectParameter("PremiumName", typeof(string));
    
            var premiumTypeParameter = premiumType != null ?
                new ObjectParameter("PremiumType", premiumType) :
                new ObjectParameter("PremiumType", typeof(string));
    
            var premiumValueParameter = premiumValue != null ?
                new ObjectParameter("PremiumValue", premiumValue) :
                new ObjectParameter("PremiumValue", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEPremiumMaster_InsertTEPremiumMaster", premiumNameParameter, premiumTypeParameter, premiumValueParameter, descriptionParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEPremiumMaster_UpdateTEPremiumMaster(Nullable<int> premiumID, string premiumName, string premiumType, string premiumValue, string description, Nullable<bool> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var premiumIDParameter = premiumID.HasValue ?
                new ObjectParameter("PremiumID", premiumID) :
                new ObjectParameter("PremiumID", typeof(int));
    
            var premiumNameParameter = premiumName != null ?
                new ObjectParameter("PremiumName", premiumName) :
                new ObjectParameter("PremiumName", typeof(string));
    
            var premiumTypeParameter = premiumType != null ?
                new ObjectParameter("PremiumType", premiumType) :
                new ObjectParameter("PremiumType", typeof(string));
    
            var premiumValueParameter = premiumValue != null ?
                new ObjectParameter("PremiumValue", premiumValue) :
                new ObjectParameter("PremiumValue", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEPremiumMaster_UpdateTEPremiumMaster", premiumIDParameter, premiumNameParameter, premiumTypeParameter, premiumValueParameter, descriptionParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEPriceBookMaster_DeleteTEPriceBookMaster(Nullable<int> priceBookID, ObjectParameter result)
        {
            var priceBookIDParameter = priceBookID.HasValue ?
                new ObjectParameter("PriceBookID", priceBookID) :
                new ObjectParameter("PriceBookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEPriceBookMaster_DeleteTEPriceBookMaster", priceBookIDParameter, result);
        }
    
        public virtual int uspTEPriceBookMaster_GetAllTEPriceBookMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEPriceBookMaster_GetAllTEPriceBookMaster");
        }
    
        public virtual int uspTEPriceBookMaster_InsertTEPriceBookMaster(Nullable<int> projectId, Nullable<int> productID, string priceType, Nullable<decimal> rate, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> schemeID, Nullable<int> specification, Nullable<int> lastModifiedBy_Id, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var priceTypeParameter = priceType != null ?
                new ObjectParameter("PriceType", priceType) :
                new ObjectParameter("PriceType", typeof(string));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var schemeIDParameter = schemeID.HasValue ?
                new ObjectParameter("SchemeID", schemeID) :
                new ObjectParameter("SchemeID", typeof(int));
    
            var specificationParameter = specification.HasValue ?
                new ObjectParameter("Specification", specification) :
                new ObjectParameter("Specification", typeof(int));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEPriceBookMaster_InsertTEPriceBookMaster", projectIdParameter, productIDParameter, priceTypeParameter, rateParameter, fromDateParameter, toDateParameter, schemeIDParameter, specificationParameter, lastModifiedBy_IdParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEPriceBookMaster_UpdateTEPriceBookMaster(Nullable<int> priceBookID, Nullable<int> projectId, Nullable<int> productID, string priceType, Nullable<decimal> rate, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> schemeID, Nullable<int> specification, Nullable<int> lastModifiedBy_Id, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var priceBookIDParameter = priceBookID.HasValue ?
                new ObjectParameter("PriceBookID", priceBookID) :
                new ObjectParameter("PriceBookID", typeof(int));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var priceTypeParameter = priceType != null ?
                new ObjectParameter("PriceType", priceType) :
                new ObjectParameter("PriceType", typeof(string));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var schemeIDParameter = schemeID.HasValue ?
                new ObjectParameter("SchemeID", schemeID) :
                new ObjectParameter("SchemeID", typeof(int));
    
            var specificationParameter = specification.HasValue ?
                new ObjectParameter("Specification", specification) :
                new ObjectParameter("Specification", typeof(int));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEPriceBookMaster_UpdateTEPriceBookMaster", priceBookIDParameter, projectIdParameter, productIDParameter, priceTypeParameter, rateParameter, fromDateParameter, toDateParameter, schemeIDParameter, specificationParameter, lastModifiedBy_IdParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEProducts_DeleteTEProduct(Nullable<int> productID, ObjectParameter result)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEProducts_DeleteTEProduct", productIDParameter, result);
        }
    
        public virtual ObjectResult<uspTEProducts_GetAllTEProducts_Result> uspTEProducts_GetAllTEProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEProducts_GetAllTEProducts_Result>("uspTEProducts_GetAllTEProducts");
        }
    
        public virtual ObjectResult<uspTEProducts_GetAllTEProducts_ByProductID_Result> uspTEProducts_GetAllTEProducts_ByProductID(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEProducts_GetAllTEProducts_ByProductID_Result>("uspTEProducts_GetAllTEProducts_ByProductID", productIDParameter);
        }
    
        public virtual int uspTEProducts_InsertTEProduct(string productName, string productDescription, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var productDescriptionParameter = productDescription != null ?
                new ObjectParameter("ProductDescription", productDescription) :
                new ObjectParameter("ProductDescription", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEProducts_InsertTEProduct", productNameParameter, productDescriptionParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEProducts_UpdateTEProduct(Nullable<int> productID, string productName, string productDescription, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var productDescriptionParameter = productDescription != null ?
                new ObjectParameter("ProductDescription", productDescription) :
                new ObjectParameter("ProductDescription", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEProducts_UpdateTEProduct", productIDParameter, productNameParameter, productDescriptionParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEProjectCarParks_DeleteTEProjectCarPark(Nullable<int> projectCarParkID, ObjectParameter result)
        {
            var projectCarParkIDParameter = projectCarParkID.HasValue ?
                new ObjectParameter("ProjectCarParkID", projectCarParkID) :
                new ObjectParameter("ProjectCarParkID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEProjectCarParks_DeleteTEProjectCarPark", projectCarParkIDParameter, result);
        }
    
        public virtual ObjectResult<uspTEProjectCarParks_GetAllTEProjectCarParks_Result> uspTEProjectCarParks_GetAllTEProjectCarParks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEProjectCarParks_GetAllTEProjectCarParks_Result>("uspTEProjectCarParks_GetAllTEProjectCarParks");
        }
    
        public virtual int uspTEProjectCarParks_InsertTEProjectCarPark(Nullable<int> projectID, Nullable<int> productID, Nullable<int> carParkID, Nullable<int> totalCarParks, Nullable<decimal> carParkRate, string remarks, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var carParkIDParameter = carParkID.HasValue ?
                new ObjectParameter("CarParkID", carParkID) :
                new ObjectParameter("CarParkID", typeof(int));
    
            var totalCarParksParameter = totalCarParks.HasValue ?
                new ObjectParameter("TotalCarParks", totalCarParks) :
                new ObjectParameter("TotalCarParks", typeof(int));
    
            var carParkRateParameter = carParkRate.HasValue ?
                new ObjectParameter("CarParkRate", carParkRate) :
                new ObjectParameter("CarParkRate", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEProjectCarParks_InsertTEProjectCarPark", projectIDParameter, productIDParameter, carParkIDParameter, totalCarParksParameter, carParkRateParameter, remarksParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEProjectCarParks_UpdateTEProjectCarPark(Nullable<int> projectCarParkID, Nullable<int> projectID, Nullable<int> productID, Nullable<int> carParkID, Nullable<int> totalCarParks, Nullable<decimal> carParkRate, string remarks, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var projectCarParkIDParameter = projectCarParkID.HasValue ?
                new ObjectParameter("ProjectCarParkID", projectCarParkID) :
                new ObjectParameter("ProjectCarParkID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var carParkIDParameter = carParkID.HasValue ?
                new ObjectParameter("CarParkID", carParkID) :
                new ObjectParameter("CarParkID", typeof(int));
    
            var totalCarParksParameter = totalCarParks.HasValue ?
                new ObjectParameter("TotalCarParks", totalCarParks) :
                new ObjectParameter("TotalCarParks", typeof(int));
    
            var carParkRateParameter = carParkRate.HasValue ?
                new ObjectParameter("CarParkRate", carParkRate) :
                new ObjectParameter("CarParkRate", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEProjectCarParks_UpdateTEProjectCarPark", projectCarParkIDParameter, projectIDParameter, productIDParameter, carParkIDParameter, totalCarParksParameter, carParkRateParameter, remarksParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEProjectDetails_DeleteTEProjectDetail(Nullable<int> projectDetailID, ObjectParameter result)
        {
            var projectDetailIDParameter = projectDetailID.HasValue ?
                new ObjectParameter("ProjectDetailID", projectDetailID) :
                new ObjectParameter("ProjectDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEProjectDetails_DeleteTEProjectDetail", projectDetailIDParameter, result);
        }
    
        public virtual ObjectResult<uspTEProjectDetails_GetAllTEProjectDetails_Result> uspTEProjectDetails_GetAllTEProjectDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEProjectDetails_GetAllTEProjectDetails_Result>("uspTEProjectDetails_GetAllTEProjectDetails");
        }
    
        public virtual int uspTEProjectDetails_InsertTEProjectDetail(Nullable<int> projectID, string seqNo, string projectInformationCategory, string informationItem, string informationDetails, Nullable<bool> isMarketing, Nullable<int> lastModifiedby, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var seqNoParameter = seqNo != null ?
                new ObjectParameter("SeqNo", seqNo) :
                new ObjectParameter("SeqNo", typeof(string));
    
            var projectInformationCategoryParameter = projectInformationCategory != null ?
                new ObjectParameter("ProjectInformationCategory", projectInformationCategory) :
                new ObjectParameter("ProjectInformationCategory", typeof(string));
    
            var informationItemParameter = informationItem != null ?
                new ObjectParameter("InformationItem", informationItem) :
                new ObjectParameter("InformationItem", typeof(string));
    
            var informationDetailsParameter = informationDetails != null ?
                new ObjectParameter("InformationDetails", informationDetails) :
                new ObjectParameter("InformationDetails", typeof(string));
    
            var isMarketingParameter = isMarketing.HasValue ?
                new ObjectParameter("IsMarketing", isMarketing) :
                new ObjectParameter("IsMarketing", typeof(bool));
    
            var lastModifiedbyParameter = lastModifiedby.HasValue ?
                new ObjectParameter("LastModifiedby", lastModifiedby) :
                new ObjectParameter("LastModifiedby", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEProjectDetails_InsertTEProjectDetail", projectIDParameter, seqNoParameter, projectInformationCategoryParameter, informationItemParameter, informationDetailsParameter, isMarketingParameter, lastModifiedbyParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEProjectDetails_UpdateTEProjectDetail(Nullable<int> projectDetailID, Nullable<int> projectID, string seqNo, string projectInformationCategory, string informationItem, string informationDetails, Nullable<bool> isMarketing, Nullable<int> lastModifiedby, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var projectDetailIDParameter = projectDetailID.HasValue ?
                new ObjectParameter("ProjectDetailID", projectDetailID) :
                new ObjectParameter("ProjectDetailID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var seqNoParameter = seqNo != null ?
                new ObjectParameter("SeqNo", seqNo) :
                new ObjectParameter("SeqNo", typeof(string));
    
            var projectInformationCategoryParameter = projectInformationCategory != null ?
                new ObjectParameter("ProjectInformationCategory", projectInformationCategory) :
                new ObjectParameter("ProjectInformationCategory", typeof(string));
    
            var informationItemParameter = informationItem != null ?
                new ObjectParameter("InformationItem", informationItem) :
                new ObjectParameter("InformationItem", typeof(string));
    
            var informationDetailsParameter = informationDetails != null ?
                new ObjectParameter("InformationDetails", informationDetails) :
                new ObjectParameter("InformationDetails", typeof(string));
    
            var isMarketingParameter = isMarketing.HasValue ?
                new ObjectParameter("IsMarketing", isMarketing) :
                new ObjectParameter("IsMarketing", typeof(bool));
    
            var lastModifiedbyParameter = lastModifiedby.HasValue ?
                new ObjectParameter("LastModifiedby", lastModifiedby) :
                new ObjectParameter("LastModifiedby", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEProjectDetails_UpdateTEProjectDetail", projectDetailIDParameter, projectIDParameter, seqNoParameter, projectInformationCategoryParameter, informationItemParameter, informationDetailsParameter, isMarketingParameter, lastModifiedbyParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEProjectPremium_DeleteTEProjectPremium(Nullable<int> projectPremiumID, ObjectParameter result)
        {
            var projectPremiumIDParameter = projectPremiumID.HasValue ?
                new ObjectParameter("ProjectPremiumID", projectPremiumID) :
                new ObjectParameter("ProjectPremiumID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEProjectPremium_DeleteTEProjectPremium", projectPremiumIDParameter, result);
        }
    
        public virtual ObjectResult<uspTEProjectPremium_GetAllTEProjectPremium_Result> uspTEProjectPremium_GetAllTEProjectPremium()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEProjectPremium_GetAllTEProjectPremium_Result>("uspTEProjectPremium_GetAllTEProjectPremium");
        }
    
        public virtual int uspTEProjectPremium_InsertTEProjectPremium(Nullable<int> projectID, Nullable<int> premiumID, string description, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var premiumIDParameter = premiumID.HasValue ?
                new ObjectParameter("PremiumID", premiumID) :
                new ObjectParameter("PremiumID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEProjectPremium_InsertTEProjectPremium", projectIDParameter, premiumIDParameter, descriptionParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEProjectPremium_UpdateTEProjectPremium(Nullable<int> projectPremiumID, Nullable<int> projectID, Nullable<int> premiumID, string description, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var projectPremiumIDParameter = projectPremiumID.HasValue ?
                new ObjectParameter("ProjectPremiumID", projectPremiumID) :
                new ObjectParameter("ProjectPremiumID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var premiumIDParameter = premiumID.HasValue ?
                new ObjectParameter("PremiumID", premiumID) :
                new ObjectParameter("PremiumID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEProjectPremium_UpdateTEProjectPremium", projectPremiumIDParameter, projectIDParameter, premiumIDParameter, descriptionParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEProjectRules_DeleteTEProjectRules(Nullable<int> projectRuleID, ObjectParameter result)
        {
            var projectRuleIDParameter = projectRuleID.HasValue ?
                new ObjectParameter("ProjectRuleID", projectRuleID) :
                new ObjectParameter("ProjectRuleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEProjectRules_DeleteTEProjectRules", projectRuleIDParameter, result);
        }
    
        public virtual ObjectResult<uspTEProjectRules_GetAllTEProjectRules_Result> uspTEProjectRules_GetAllTEProjectRules()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEProjectRules_GetAllTEProjectRules_Result>("uspTEProjectRules_GetAllTEProjectRules");
        }
    
        public virtual ObjectResult<uspTEProjectRules_GetTEProjectRuleByProjectID_Result> uspTEProjectRules_GetTEProjectRuleByProjectID(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEProjectRules_GetTEProjectRuleByProjectID_Result>("uspTEProjectRules_GetTEProjectRuleByProjectID", projectIDParameter);
        }
    
        public virtual ObjectResult<uspTEProjectRules_GetTEProjectRuleByProjectRuleID_Result> uspTEProjectRules_GetTEProjectRuleByProjectRuleID(Nullable<int> projectRuleID)
        {
            var projectRuleIDParameter = projectRuleID.HasValue ?
                new ObjectParameter("ProjectRuleID", projectRuleID) :
                new ObjectParameter("ProjectRuleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEProjectRules_GetTEProjectRuleByProjectRuleID_Result>("uspTEProjectRules_GetTEProjectRuleByProjectRuleID", projectRuleIDParameter);
        }
    
        public virtual int uspTEProjectRules_InsertTEProjectRules(string ruleName, Nullable<int> projectID, string type, string value, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var ruleNameParameter = ruleName != null ?
                new ObjectParameter("RuleName", ruleName) :
                new ObjectParameter("RuleName", typeof(string));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEProjectRules_InsertTEProjectRules", ruleNameParameter, projectIDParameter, typeParameter, valueParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEProjectRules_UpdateTEProjectRules(Nullable<int> projectRuleID, string ruleName, Nullable<int> projectID, string type, string value, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var projectRuleIDParameter = projectRuleID.HasValue ?
                new ObjectParameter("ProjectRuleID", projectRuleID) :
                new ObjectParameter("ProjectRuleID", typeof(int));
    
            var ruleNameParameter = ruleName != null ?
                new ObjectParameter("RuleName", ruleName) :
                new ObjectParameter("RuleName", typeof(string));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEProjectRules_UpdateTEProjectRules", projectRuleIDParameter, ruleNameParameter, projectIDParameter, typeParameter, valueParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEProjects_DeleteTEProject(Nullable<int> projectID, ObjectParameter result)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEProjects_DeleteTEProject", projectIDParameter, result);
        }
    
        public virtual ObjectResult<string> uspTEProjects_GetLayouts_ByProjectID(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspTEProjects_GetLayouts_ByProjectID", projectIDParameter);
        }
    
        public virtual int uspTEProjects_InsertTEProject(string projectName, string projectCode, string projectShortName, string logo, Nullable<bool> isSales, Nullable<bool> isMaintenance, string layoutID, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, Nullable<int> companyID, string projectColor, ObjectParameter result)
        {
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var projectCodeParameter = projectCode != null ?
                new ObjectParameter("ProjectCode", projectCode) :
                new ObjectParameter("ProjectCode", typeof(string));
    
            var projectShortNameParameter = projectShortName != null ?
                new ObjectParameter("ProjectShortName", projectShortName) :
                new ObjectParameter("ProjectShortName", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(string));
    
            var isSalesParameter = isSales.HasValue ?
                new ObjectParameter("IsSales", isSales) :
                new ObjectParameter("IsSales", typeof(bool));
    
            var isMaintenanceParameter = isMaintenance.HasValue ?
                new ObjectParameter("IsMaintenance", isMaintenance) :
                new ObjectParameter("IsMaintenance", typeof(bool));
    
            var layoutIDParameter = layoutID != null ?
                new ObjectParameter("LayoutID", layoutID) :
                new ObjectParameter("LayoutID", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var projectColorParameter = projectColor != null ?
                new ObjectParameter("ProjectColor", projectColor) :
                new ObjectParameter("ProjectColor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEProjects_InsertTEProject", projectNameParameter, projectCodeParameter, projectShortNameParameter, logoParameter, isSalesParameter, isMaintenanceParameter, layoutIDParameter, lastModifiedByParameter, lastModifiedDateParameter, companyIDParameter, projectColorParameter, result);
        }
    
        public virtual int uspTEProjects_UpdateTEProject(Nullable<int> projectID, string projectName, string projectCode, string projectShortName, string logo, Nullable<bool> isSales, Nullable<bool> isMaintenance, string layoutID, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, Nullable<int> companyID, string projectColor, ObjectParameter result)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var projectCodeParameter = projectCode != null ?
                new ObjectParameter("ProjectCode", projectCode) :
                new ObjectParameter("ProjectCode", typeof(string));
    
            var projectShortNameParameter = projectShortName != null ?
                new ObjectParameter("ProjectShortName", projectShortName) :
                new ObjectParameter("ProjectShortName", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(string));
    
            var isSalesParameter = isSales.HasValue ?
                new ObjectParameter("IsSales", isSales) :
                new ObjectParameter("IsSales", typeof(bool));
    
            var isMaintenanceParameter = isMaintenance.HasValue ?
                new ObjectParameter("IsMaintenance", isMaintenance) :
                new ObjectParameter("IsMaintenance", typeof(bool));
    
            var layoutIDParameter = layoutID != null ?
                new ObjectParameter("LayoutID", layoutID) :
                new ObjectParameter("LayoutID", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var projectColorParameter = projectColor != null ?
                new ObjectParameter("ProjectColor", projectColor) :
                new ObjectParameter("ProjectColor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEProjects_UpdateTEProject", projectIDParameter, projectNameParameter, projectCodeParameter, projectShortNameParameter, logoParameter, isSalesParameter, isMaintenanceParameter, layoutIDParameter, lastModifiedByParameter, lastModifiedDateParameter, companyIDParameter, projectColorParameter, result);
        }
    
        public virtual int uspTEProjectUnitPremium_DeleteTEProjectUnitPremium(Nullable<int> projectUnitPremiumID, ObjectParameter result)
        {
            var projectUnitPremiumIDParameter = projectUnitPremiumID.HasValue ?
                new ObjectParameter("ProjectUnitPremiumID", projectUnitPremiumID) :
                new ObjectParameter("ProjectUnitPremiumID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEProjectUnitPremium_DeleteTEProjectUnitPremium", projectUnitPremiumIDParameter, result);
        }
    
        public virtual ObjectResult<uspTEProjectUnitPremium_GetAllTEProjectUnitPremium_Result> uspTEProjectUnitPremium_GetAllTEProjectUnitPremium()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEProjectUnitPremium_GetAllTEProjectUnitPremium_Result>("uspTEProjectUnitPremium_GetAllTEProjectUnitPremium");
        }
    
        public virtual int uspTEProjectUnitPremium_InsertTEProjectUnitPremium(Nullable<int> projectPremiumID, Nullable<int> unitID, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var projectPremiumIDParameter = projectPremiumID.HasValue ?
                new ObjectParameter("ProjectPremiumID", projectPremiumID) :
                new ObjectParameter("ProjectPremiumID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEProjectUnitPremium_InsertTEProjectUnitPremium", projectPremiumIDParameter, unitIDParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEProjectUnitPremium_UpdateTEProjectUnitPremium(Nullable<int> projectUnitPremiumID, Nullable<int> projectPremiumID, Nullable<int> unitID, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var projectUnitPremiumIDParameter = projectUnitPremiumID.HasValue ?
                new ObjectParameter("ProjectUnitPremiumID", projectUnitPremiumID) :
                new ObjectParameter("ProjectUnitPremiumID", typeof(int));
    
            var projectPremiumIDParameter = projectPremiumID.HasValue ?
                new ObjectParameter("ProjectPremiumID", projectPremiumID) :
                new ObjectParameter("ProjectPremiumID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEProjectUnitPremium_UpdateTEProjectUnitPremium", projectUnitPremiumIDParameter, projectPremiumIDParameter, unitIDParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEScheduleMaster_DeleteTEScheduleMaster(Nullable<int> scheduleID, ObjectParameter result)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEScheduleMaster_DeleteTEScheduleMaster", scheduleIDParameter, result);
        }
    
        public virtual ObjectResult<uspTEScheduleMaster_GetAllTEScheduleMaster_Result> uspTEScheduleMaster_GetAllTEScheduleMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEScheduleMaster_GetAllTEScheduleMaster_Result>("uspTEScheduleMaster_GetAllTEScheduleMaster");
        }
    
        public virtual ObjectResult<uspTEScheduleMaster_GetAllTEScheduleMasterByScheduleID_Result> uspTEScheduleMaster_GetAllTEScheduleMasterByScheduleID(Nullable<int> scheduleID)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEScheduleMaster_GetAllTEScheduleMasterByScheduleID_Result>("uspTEScheduleMaster_GetAllTEScheduleMasterByScheduleID", scheduleIDParameter);
        }
    
        public virtual int uspTEScheduleMaster_InsertTEScheduleMaster(string scheduleName, string scheduleCode, string scheduleType, Nullable<int> lostModifiedBy, Nullable<System.DateTime> lostModifiedDate, ObjectParameter result)
        {
            var scheduleNameParameter = scheduleName != null ?
                new ObjectParameter("ScheduleName", scheduleName) :
                new ObjectParameter("ScheduleName", typeof(string));
    
            var scheduleCodeParameter = scheduleCode != null ?
                new ObjectParameter("ScheduleCode", scheduleCode) :
                new ObjectParameter("ScheduleCode", typeof(string));
    
            var scheduleTypeParameter = scheduleType != null ?
                new ObjectParameter("ScheduleType", scheduleType) :
                new ObjectParameter("ScheduleType", typeof(string));
    
            var lostModifiedByParameter = lostModifiedBy.HasValue ?
                new ObjectParameter("LostModifiedBy", lostModifiedBy) :
                new ObjectParameter("LostModifiedBy", typeof(int));
    
            var lostModifiedDateParameter = lostModifiedDate.HasValue ?
                new ObjectParameter("LostModifiedDate", lostModifiedDate) :
                new ObjectParameter("LostModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEScheduleMaster_InsertTEScheduleMaster", scheduleNameParameter, scheduleCodeParameter, scheduleTypeParameter, lostModifiedByParameter, lostModifiedDateParameter, result);
        }
    
        public virtual int uspTEScheduleMaster_UpdateTEScheduleMaster(Nullable<int> scheduleID, string scheduleName, string scheduleCode, string scheduleType, Nullable<int> lostModifiedBy, Nullable<System.DateTime> lostModifiedDate, ObjectParameter result)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            var scheduleNameParameter = scheduleName != null ?
                new ObjectParameter("ScheduleName", scheduleName) :
                new ObjectParameter("ScheduleName", typeof(string));
    
            var scheduleCodeParameter = scheduleCode != null ?
                new ObjectParameter("ScheduleCode", scheduleCode) :
                new ObjectParameter("ScheduleCode", typeof(string));
    
            var scheduleTypeParameter = scheduleType != null ?
                new ObjectParameter("ScheduleType", scheduleType) :
                new ObjectParameter("ScheduleType", typeof(string));
    
            var lostModifiedByParameter = lostModifiedBy.HasValue ?
                new ObjectParameter("LostModifiedBy", lostModifiedBy) :
                new ObjectParameter("LostModifiedBy", typeof(int));
    
            var lostModifiedDateParameter = lostModifiedDate.HasValue ?
                new ObjectParameter("LostModifiedDate", lostModifiedDate) :
                new ObjectParameter("LostModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEScheduleMaster_UpdateTEScheduleMaster", scheduleIDParameter, scheduleNameParameter, scheduleCodeParameter, scheduleTypeParameter, lostModifiedByParameter, lostModifiedDateParameter, result);
        }
    
        public virtual int uspTESchemaMaster_DeleteTESchemaMaster(Nullable<int> schemaID, ObjectParameter result)
        {
            var schemaIDParameter = schemaID.HasValue ?
                new ObjectParameter("SchemaID", schemaID) :
                new ObjectParameter("SchemaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTESchemaMaster_DeleteTESchemaMaster", schemaIDParameter, result);
        }
    
        public virtual ObjectResult<uspTESchemaMaster_GetAllTESchemaMaster_Result> uspTESchemaMaster_GetAllTESchemaMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTESchemaMaster_GetAllTESchemaMaster_Result>("uspTESchemaMaster_GetAllTESchemaMaster");
        }
    
        public virtual ObjectResult<uspTESchemaMaster_GetTESchemaMasterBySchemaID_Result> uspTESchemaMaster_GetTESchemaMasterBySchemaID(Nullable<int> schemaID)
        {
            var schemaIDParameter = schemaID.HasValue ?
                new ObjectParameter("SchemaID", schemaID) :
                new ObjectParameter("SchemaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTESchemaMaster_GetTESchemaMasterBySchemaID_Result>("uspTESchemaMaster_GetTESchemaMasterBySchemaID", schemaIDParameter);
        }
    
        public virtual int uspTESchemaMaster_InsertTESchemaMaster(string schemaName, string validityStatus, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var schemaNameParameter = schemaName != null ?
                new ObjectParameter("SchemaName", schemaName) :
                new ObjectParameter("SchemaName", typeof(string));
    
            var validityStatusParameter = validityStatus != null ?
                new ObjectParameter("ValidityStatus", validityStatus) :
                new ObjectParameter("ValidityStatus", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTESchemaMaster_InsertTESchemaMaster", schemaNameParameter, validityStatusParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTESchemaMaster_UpdateTESchemaMaster(Nullable<int> schemaID, string schemaName, string validityStatus, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var schemaIDParameter = schemaID.HasValue ?
                new ObjectParameter("SchemaID", schemaID) :
                new ObjectParameter("SchemaID", typeof(int));
    
            var schemaNameParameter = schemaName != null ?
                new ObjectParameter("SchemaName", schemaName) :
                new ObjectParameter("SchemaName", typeof(string));
    
            var validityStatusParameter = validityStatus != null ?
                new ObjectParameter("ValidityStatus", validityStatus) :
                new ObjectParameter("ValidityStatus", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTESchemaMaster_UpdateTESchemaMaster", schemaIDParameter, schemaNameParameter, validityStatusParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTESpecificationCategory_DeleteTESpecificationCategory(Nullable<int> specificationCategoryID, ObjectParameter result)
        {
            var specificationCategoryIDParameter = specificationCategoryID.HasValue ?
                new ObjectParameter("SpecificationCategoryID", specificationCategoryID) :
                new ObjectParameter("SpecificationCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTESpecificationCategory_DeleteTESpecificationCategory", specificationCategoryIDParameter, result);
        }
    
        public virtual ObjectResult<uspTESpecificationCategory_GetAllTESpecificationCategories_Result> uspTESpecificationCategory_GetAllTESpecificationCategories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTESpecificationCategory_GetAllTESpecificationCategories_Result>("uspTESpecificationCategory_GetAllTESpecificationCategories");
        }
    
        public virtual int uspTESpecificationCategory_InsertTESpecificationCategory(string specificationCategoryName, string seqNo, Nullable<int> lastModifiedBy_Id, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var specificationCategoryNameParameter = specificationCategoryName != null ?
                new ObjectParameter("SpecificationCategoryName", specificationCategoryName) :
                new ObjectParameter("SpecificationCategoryName", typeof(string));
    
            var seqNoParameter = seqNo != null ?
                new ObjectParameter("SeqNo", seqNo) :
                new ObjectParameter("SeqNo", typeof(string));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTESpecificationCategory_InsertTESpecificationCategory", specificationCategoryNameParameter, seqNoParameter, lastModifiedBy_IdParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTESpecificationCategory_UpdateTESpecificationCategory(Nullable<int> specificationCategoryID, string specificationCategoryName, string seqNo, Nullable<int> lastModifiedBy_Id, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var specificationCategoryIDParameter = specificationCategoryID.HasValue ?
                new ObjectParameter("SpecificationCategoryID", specificationCategoryID) :
                new ObjectParameter("SpecificationCategoryID", typeof(int));
    
            var specificationCategoryNameParameter = specificationCategoryName != null ?
                new ObjectParameter("SpecificationCategoryName", specificationCategoryName) :
                new ObjectParameter("SpecificationCategoryName", typeof(string));
    
            var seqNoParameter = seqNo != null ?
                new ObjectParameter("SeqNo", seqNo) :
                new ObjectParameter("SeqNo", typeof(string));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTESpecificationCategory_UpdateTESpecificationCategory", specificationCategoryIDParameter, specificationCategoryNameParameter, seqNoParameter, lastModifiedBy_IdParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTESpecificationDetailed_DeleteTESpecificationDetailed(Nullable<int> specificationDetailedID, ObjectParameter result)
        {
            var specificationDetailedIDParameter = specificationDetailedID.HasValue ?
                new ObjectParameter("SpecificationDetailedID", specificationDetailedID) :
                new ObjectParameter("SpecificationDetailedID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTESpecificationDetailed_DeleteTESpecificationDetailed", specificationDetailedIDParameter, result);
        }
    
        public virtual ObjectResult<uspTESpecificationDetailed_GetAllTESpecificationDetailed_Result> uspTESpecificationDetailed_GetAllTESpecificationDetailed()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTESpecificationDetailed_GetAllTESpecificationDetailed_Result>("uspTESpecificationDetailed_GetAllTESpecificationDetailed");
        }
    
        public virtual int uspTESpecificationDetailed_InsertTESpecificationDetailed(string templateName, Nullable<int> seqNo, string specificationCategoryID, string subCategoryID, string description, string remarks, Nullable<int> applicableSpecificationID, Nullable<int> lastModifiedBy_Id, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var templateNameParameter = templateName != null ?
                new ObjectParameter("TemplateName", templateName) :
                new ObjectParameter("TemplateName", typeof(string));
    
            var seqNoParameter = seqNo.HasValue ?
                new ObjectParameter("SeqNo", seqNo) :
                new ObjectParameter("SeqNo", typeof(int));
    
            var specificationCategoryIDParameter = specificationCategoryID != null ?
                new ObjectParameter("SpecificationCategoryID", specificationCategoryID) :
                new ObjectParameter("SpecificationCategoryID", typeof(string));
    
            var subCategoryIDParameter = subCategoryID != null ?
                new ObjectParameter("SubCategoryID", subCategoryID) :
                new ObjectParameter("SubCategoryID", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var applicableSpecificationIDParameter = applicableSpecificationID.HasValue ?
                new ObjectParameter("ApplicableSpecificationID", applicableSpecificationID) :
                new ObjectParameter("ApplicableSpecificationID", typeof(int));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTESpecificationDetailed_InsertTESpecificationDetailed", templateNameParameter, seqNoParameter, specificationCategoryIDParameter, subCategoryIDParameter, descriptionParameter, remarksParameter, applicableSpecificationIDParameter, lastModifiedBy_IdParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTESpecificationDetailed_UpdateTESpecificationDetailed(Nullable<int> specificationDetailedID, string templateName, Nullable<int> seqNo, string specificationCategoryID, string subCategoryID, string description, string remarks, Nullable<int> applicableSpecificationID, Nullable<int> lastModifiedBy_Id, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var specificationDetailedIDParameter = specificationDetailedID.HasValue ?
                new ObjectParameter("SpecificationDetailedID", specificationDetailedID) :
                new ObjectParameter("SpecificationDetailedID", typeof(int));
    
            var templateNameParameter = templateName != null ?
                new ObjectParameter("TemplateName", templateName) :
                new ObjectParameter("TemplateName", typeof(string));
    
            var seqNoParameter = seqNo.HasValue ?
                new ObjectParameter("SeqNo", seqNo) :
                new ObjectParameter("SeqNo", typeof(int));
    
            var specificationCategoryIDParameter = specificationCategoryID != null ?
                new ObjectParameter("SpecificationCategoryID", specificationCategoryID) :
                new ObjectParameter("SpecificationCategoryID", typeof(string));
    
            var subCategoryIDParameter = subCategoryID != null ?
                new ObjectParameter("SubCategoryID", subCategoryID) :
                new ObjectParameter("SubCategoryID", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var applicableSpecificationIDParameter = applicableSpecificationID.HasValue ?
                new ObjectParameter("ApplicableSpecificationID", applicableSpecificationID) :
                new ObjectParameter("ApplicableSpecificationID", typeof(int));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTESpecificationDetailed_UpdateTESpecificationDetailed", specificationDetailedIDParameter, templateNameParameter, seqNoParameter, specificationCategoryIDParameter, subCategoryIDParameter, descriptionParameter, remarksParameter, applicableSpecificationIDParameter, lastModifiedBy_IdParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTESpecificationLibrary_DeleteTESpecificationLibrary(Nullable<int> specifictionItemID, ObjectParameter result)
        {
            var specifictionItemIDParameter = specifictionItemID.HasValue ?
                new ObjectParameter("SpecifictionItemID", specifictionItemID) :
                new ObjectParameter("SpecifictionItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTESpecificationLibrary_DeleteTESpecificationLibrary", specifictionItemIDParameter, result);
        }
    
        public virtual int uspTESpecificationLibrary_GetAllTESpecificationLibrary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTESpecificationLibrary_GetAllTESpecificationLibrary");
        }
    
        public virtual int uspTESpecificationLibrary_GetTESpecificationLibraryBySpecifictionItemID(Nullable<int> specifictionItemID)
        {
            var specifictionItemIDParameter = specifictionItemID.HasValue ?
                new ObjectParameter("SpecifictionItemID", specifictionItemID) :
                new ObjectParameter("SpecifictionItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTESpecificationLibrary_GetTESpecificationLibraryBySpecifictionItemID", specifictionItemIDParameter);
        }
    
        public virtual int uspTESpecificationLibrary_InsertTESpecificationLibrary(Nullable<int> specifictionCategoryID, string specifictionItemShortName, string specifictionItemDescription, string specifictionItemSeqInTheCategory, string remarks, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var specifictionCategoryIDParameter = specifictionCategoryID.HasValue ?
                new ObjectParameter("SpecifictionCategoryID", specifictionCategoryID) :
                new ObjectParameter("SpecifictionCategoryID", typeof(int));
    
            var specifictionItemShortNameParameter = specifictionItemShortName != null ?
                new ObjectParameter("SpecifictionItemShortName", specifictionItemShortName) :
                new ObjectParameter("SpecifictionItemShortName", typeof(string));
    
            var specifictionItemDescriptionParameter = specifictionItemDescription != null ?
                new ObjectParameter("SpecifictionItemDescription", specifictionItemDescription) :
                new ObjectParameter("SpecifictionItemDescription", typeof(string));
    
            var specifictionItemSeqInTheCategoryParameter = specifictionItemSeqInTheCategory != null ?
                new ObjectParameter("SpecifictionItemSeqInTheCategory", specifictionItemSeqInTheCategory) :
                new ObjectParameter("SpecifictionItemSeqInTheCategory", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTESpecificationLibrary_InsertTESpecificationLibrary", specifictionCategoryIDParameter, specifictionItemShortNameParameter, specifictionItemDescriptionParameter, specifictionItemSeqInTheCategoryParameter, remarksParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTESpecificationLibrary_UpdateTESpecificationLibrary(Nullable<int> specifictionItemID, Nullable<int> specifictionCategoryID, string specifictionItemShortName, string specifictionItemDescription, string specifictionItemSeqInTheCategory, string remarks, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var specifictionItemIDParameter = specifictionItemID.HasValue ?
                new ObjectParameter("SpecifictionItemID", specifictionItemID) :
                new ObjectParameter("SpecifictionItemID", typeof(int));
    
            var specifictionCategoryIDParameter = specifictionCategoryID.HasValue ?
                new ObjectParameter("SpecifictionCategoryID", specifictionCategoryID) :
                new ObjectParameter("SpecifictionCategoryID", typeof(int));
    
            var specifictionItemShortNameParameter = specifictionItemShortName != null ?
                new ObjectParameter("SpecifictionItemShortName", specifictionItemShortName) :
                new ObjectParameter("SpecifictionItemShortName", typeof(string));
    
            var specifictionItemDescriptionParameter = specifictionItemDescription != null ?
                new ObjectParameter("SpecifictionItemDescription", specifictionItemDescription) :
                new ObjectParameter("SpecifictionItemDescription", typeof(string));
    
            var specifictionItemSeqInTheCategoryParameter = specifictionItemSeqInTheCategory != null ?
                new ObjectParameter("SpecifictionItemSeqInTheCategory", specifictionItemSeqInTheCategory) :
                new ObjectParameter("SpecifictionItemSeqInTheCategory", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTESpecificationLibrary_UpdateTESpecificationLibrary", specifictionItemIDParameter, specifictionCategoryIDParameter, specifictionItemShortNameParameter, specifictionItemDescriptionParameter, specifictionItemSeqInTheCategoryParameter, remarksParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTESpecificationMaster_DeleteTESpecificationMaster(Nullable<int> specificationID, ObjectParameter result)
        {
            var specificationIDParameter = specificationID.HasValue ?
                new ObjectParameter("SpecificationID", specificationID) :
                new ObjectParameter("SpecificationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTESpecificationMaster_DeleteTESpecificationMaster", specificationIDParameter, result);
        }
    
        public virtual int uspTESpecificationMaster_InsertTESpecificationMaster(string specificationName, string headingColourCode, string itemColorCode, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var specificationNameParameter = specificationName != null ?
                new ObjectParameter("SpecificationName", specificationName) :
                new ObjectParameter("SpecificationName", typeof(string));
    
            var headingColourCodeParameter = headingColourCode != null ?
                new ObjectParameter("HeadingColourCode", headingColourCode) :
                new ObjectParameter("HeadingColourCode", typeof(string));
    
            var itemColorCodeParameter = itemColorCode != null ?
                new ObjectParameter("ItemColorCode", itemColorCode) :
                new ObjectParameter("ItemColorCode", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTESpecificationMaster_InsertTESpecificationMaster", specificationNameParameter, headingColourCodeParameter, itemColorCodeParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTESpecificationMaster_UpdateTESpecificationMaster(Nullable<int> specificationID, string specificationName, string headingColourCode, string itemColorCode, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var specificationIDParameter = specificationID.HasValue ?
                new ObjectParameter("SpecificationID", specificationID) :
                new ObjectParameter("SpecificationID", typeof(int));
    
            var specificationNameParameter = specificationName != null ?
                new ObjectParameter("SpecificationName", specificationName) :
                new ObjectParameter("SpecificationName", typeof(string));
    
            var headingColourCodeParameter = headingColourCode != null ?
                new ObjectParameter("HeadingColourCode", headingColourCode) :
                new ObjectParameter("HeadingColourCode", typeof(string));
    
            var itemColorCodeParameter = itemColorCode != null ?
                new ObjectParameter("ItemColorCode", itemColorCode) :
                new ObjectParameter("ItemColorCode", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTESpecificationMaster_UpdateTESpecificationMaster", specificationIDParameter, specificationNameParameter, headingColourCodeParameter, itemColorCodeParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual ObjectResult<uspTESpecificationMasters_GetAllSpecificationMasters_Result> uspTESpecificationMasters_GetAllSpecificationMasters()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTESpecificationMasters_GetAllSpecificationMasters_Result>("uspTESpecificationMasters_GetAllSpecificationMasters");
        }
    
        public virtual ObjectResult<uspTESpecificationMasters_GetSpecificationMasterBySpecificationID_Result> uspTESpecificationMasters_GetSpecificationMasterBySpecificationID(Nullable<int> specificationID)
        {
            var specificationIDParameter = specificationID.HasValue ?
                new ObjectParameter("SpecificationID", specificationID) :
                new ObjectParameter("SpecificationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTESpecificationMasters_GetSpecificationMasterBySpecificationID_Result>("uspTESpecificationMasters_GetSpecificationMasterBySpecificationID", specificationIDParameter);
        }
    
        public virtual int uspTEStandardSchemeTermsAndConditions(Nullable<int> standardSchemaTermsAndConditionID, Nullable<int> projectID, Nullable<int> productID, string seqNo, Nullable<int> tandCID, Nullable<bool> isTEORJD, Nullable<int> schemaID, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var standardSchemaTermsAndConditionIDParameter = standardSchemaTermsAndConditionID.HasValue ?
                new ObjectParameter("StandardSchemaTermsAndConditionID", standardSchemaTermsAndConditionID) :
                new ObjectParameter("StandardSchemaTermsAndConditionID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var seqNoParameter = seqNo != null ?
                new ObjectParameter("SeqNo", seqNo) :
                new ObjectParameter("SeqNo", typeof(string));
    
            var tandCIDParameter = tandCID.HasValue ?
                new ObjectParameter("TandCID", tandCID) :
                new ObjectParameter("TandCID", typeof(int));
    
            var isTEORJDParameter = isTEORJD.HasValue ?
                new ObjectParameter("IsTEORJD", isTEORJD) :
                new ObjectParameter("IsTEORJD", typeof(bool));
    
            var schemaIDParameter = schemaID.HasValue ?
                new ObjectParameter("SchemaID", schemaID) :
                new ObjectParameter("SchemaID", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEStandardSchemeTermsAndConditions", standardSchemaTermsAndConditionIDParameter, projectIDParameter, productIDParameter, seqNoParameter, tandCIDParameter, isTEORJDParameter, schemaIDParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual ObjectResult<uspTEstandardTermsAndConditionID_Result> uspTEstandardTermsAndConditionID(Nullable<int> standardSchemaTermsAndConditionID)
        {
            var standardSchemaTermsAndConditionIDParameter = standardSchemaTermsAndConditionID.HasValue ?
                new ObjectParameter("StandardSchemaTermsAndConditionID", standardSchemaTermsAndConditionID) :
                new ObjectParameter("StandardSchemaTermsAndConditionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEstandardTermsAndConditionID_Result>("uspTEstandardTermsAndConditionID", standardSchemaTermsAndConditionIDParameter);
        }
    
        public virtual ObjectResult<uspTESTermsAndConditionsByProjectID_Result> uspTESTermsAndConditionsByProjectID(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTESTermsAndConditionsByProjectID_Result>("uspTESTermsAndConditionsByProjectID", projectIDParameter);
        }
    
        public virtual int uspTESubProductDetails_DeleteTESubProductDetail(Nullable<int> projectProductID, ObjectParameter result)
        {
            var projectProductIDParameter = projectProductID.HasValue ?
                new ObjectParameter("ProjectProductID", projectProductID) :
                new ObjectParameter("ProjectProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTESubProductDetails_DeleteTESubProductDetail", projectProductIDParameter, result);
        }
    
        public virtual int uspTESubProductDetails_GetAllTESubProductDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTESubProductDetails_GetAllTESubProductDetails");
        }
    
        public virtual int uspTESubProductDetails_GetAllTESubProductDetails_ByProjectID(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTESubProductDetails_GetAllTESubProductDetails_ByProjectID", projectIDParameter);
        }
    
        public virtual int uspTESubProductDetails_GetAllTESubProductDetails_ByProjectProductID(Nullable<int> projectProductID)
        {
            var projectProductIDParameter = projectProductID.HasValue ?
                new ObjectParameter("ProjectProductID", projectProductID) :
                new ObjectParameter("ProjectProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTESubProductDetails_GetAllTESubProductDetails_ByProjectProductID", projectProductIDParameter);
        }
    
        public virtual int uspTESubProductDetails_InsertTESubProductDetail(Nullable<int> productID, Nullable<int> projectID, string subProductCode, Nullable<decimal> carPetArea, Nullable<decimal> builtUpArea, Nullable<decimal> standardPlotArea, Nullable<decimal> salabaleArea, Nullable<decimal> superBuiltUpArea, string baseProductUDI, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, string defaultSpecification, ObjectParameter result)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var subProductCodeParameter = subProductCode != null ?
                new ObjectParameter("SubProductCode", subProductCode) :
                new ObjectParameter("SubProductCode", typeof(string));
    
            var carPetAreaParameter = carPetArea.HasValue ?
                new ObjectParameter("CarPetArea", carPetArea) :
                new ObjectParameter("CarPetArea", typeof(decimal));
    
            var builtUpAreaParameter = builtUpArea.HasValue ?
                new ObjectParameter("BuiltUpArea", builtUpArea) :
                new ObjectParameter("BuiltUpArea", typeof(decimal));
    
            var standardPlotAreaParameter = standardPlotArea.HasValue ?
                new ObjectParameter("StandardPlotArea", standardPlotArea) :
                new ObjectParameter("StandardPlotArea", typeof(decimal));
    
            var salabaleAreaParameter = salabaleArea.HasValue ?
                new ObjectParameter("SalabaleArea", salabaleArea) :
                new ObjectParameter("SalabaleArea", typeof(decimal));
    
            var superBuiltUpAreaParameter = superBuiltUpArea.HasValue ?
                new ObjectParameter("SuperBuiltUpArea", superBuiltUpArea) :
                new ObjectParameter("SuperBuiltUpArea", typeof(decimal));
    
            var baseProductUDIParameter = baseProductUDI != null ?
                new ObjectParameter("BaseProductUDI", baseProductUDI) :
                new ObjectParameter("BaseProductUDI", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            var defaultSpecificationParameter = defaultSpecification != null ?
                new ObjectParameter("DefaultSpecification", defaultSpecification) :
                new ObjectParameter("DefaultSpecification", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTESubProductDetails_InsertTESubProductDetail", productIDParameter, projectIDParameter, subProductCodeParameter, carPetAreaParameter, builtUpAreaParameter, standardPlotAreaParameter, salabaleAreaParameter, superBuiltUpAreaParameter, baseProductUDIParameter, lastModifiedByParameter, lastModifiedDateParameter, defaultSpecificationParameter, result);
        }
    
        public virtual int uspTESubProductDetails_UpdateTESubProductDetail(Nullable<int> projectProductID, Nullable<int> productID, Nullable<int> projectID, string subProductCode, Nullable<decimal> carPetArea, Nullable<decimal> builtUpArea, Nullable<decimal> standardPlotArea, Nullable<decimal> salabaleArea, Nullable<decimal> superBuiltUpArea, string baseProductUDI, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, string defaultSpecification, Nullable<int> uDI, ObjectParameter result)
        {
            var projectProductIDParameter = projectProductID.HasValue ?
                new ObjectParameter("ProjectProductID", projectProductID) :
                new ObjectParameter("ProjectProductID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var subProductCodeParameter = subProductCode != null ?
                new ObjectParameter("SubProductCode", subProductCode) :
                new ObjectParameter("SubProductCode", typeof(string));
    
            var carPetAreaParameter = carPetArea.HasValue ?
                new ObjectParameter("CarPetArea", carPetArea) :
                new ObjectParameter("CarPetArea", typeof(decimal));
    
            var builtUpAreaParameter = builtUpArea.HasValue ?
                new ObjectParameter("BuiltUpArea", builtUpArea) :
                new ObjectParameter("BuiltUpArea", typeof(decimal));
    
            var standardPlotAreaParameter = standardPlotArea.HasValue ?
                new ObjectParameter("StandardPlotArea", standardPlotArea) :
                new ObjectParameter("StandardPlotArea", typeof(decimal));
    
            var salabaleAreaParameter = salabaleArea.HasValue ?
                new ObjectParameter("SalabaleArea", salabaleArea) :
                new ObjectParameter("SalabaleArea", typeof(decimal));
    
            var superBuiltUpAreaParameter = superBuiltUpArea.HasValue ?
                new ObjectParameter("SuperBuiltUpArea", superBuiltUpArea) :
                new ObjectParameter("SuperBuiltUpArea", typeof(decimal));
    
            var baseProductUDIParameter = baseProductUDI != null ?
                new ObjectParameter("BaseProductUDI", baseProductUDI) :
                new ObjectParameter("BaseProductUDI", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            var defaultSpecificationParameter = defaultSpecification != null ?
                new ObjectParameter("DefaultSpecification", defaultSpecification) :
                new ObjectParameter("DefaultSpecification", typeof(string));
    
            var uDIParameter = uDI.HasValue ?
                new ObjectParameter("UDI", uDI) :
                new ObjectParameter("UDI", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTESubProductDetails_UpdateTESubProductDetail", projectProductIDParameter, productIDParameter, projectIDParameter, subProductCodeParameter, carPetAreaParameter, builtUpAreaParameter, standardPlotAreaParameter, salabaleAreaParameter, superBuiltUpAreaParameter, baseProductUDIParameter, lastModifiedByParameter, lastModifiedDateParameter, defaultSpecificationParameter, uDIParameter, result);
        }
    
        public virtual int uspTETask_CreateInsertTETask(Nullable<int> contactID, Nullable<int> contextID, string taskType, Nullable<System.DateTime> date, Nullable<System.TimeSpan> time, string notes, Nullable<bool> isDeleted, Nullable<int> isPrivate, Nullable<int> locationID, string duration, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<System.DateTime> lastModifiedOn, Nullable<int> lastModifiedBy_Id, string taskTitle, string taskStatus, Nullable<int> responsibleConsultant, ObjectParameter result)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            var contextIDParameter = contextID.HasValue ?
                new ObjectParameter("ContextID", contextID) :
                new ObjectParameter("ContextID", typeof(int));
    
            var taskTypeParameter = taskType != null ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(System.TimeSpan));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isPrivateParameter = isPrivate.HasValue ?
                new ObjectParameter("IsPrivate", isPrivate) :
                new ObjectParameter("IsPrivate", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var durationParameter = duration != null ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var taskTitleParameter = taskTitle != null ?
                new ObjectParameter("TaskTitle", taskTitle) :
                new ObjectParameter("TaskTitle", typeof(string));
    
            var taskStatusParameter = taskStatus != null ?
                new ObjectParameter("TaskStatus", taskStatus) :
                new ObjectParameter("TaskStatus", typeof(string));
    
            var responsibleConsultantParameter = responsibleConsultant.HasValue ?
                new ObjectParameter("ResponsibleConsultant", responsibleConsultant) :
                new ObjectParameter("ResponsibleConsultant", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTETask_CreateInsertTETask", contactIDParameter, contextIDParameter, taskTypeParameter, dateParameter, timeParameter, notesParameter, isDeletedParameter, isPrivateParameter, locationIDParameter, durationParameter, createdOnParameter, createdByParameter, lastModifiedOnParameter, lastModifiedBy_IdParameter, taskTitleParameter, taskStatusParameter, responsibleConsultantParameter, result);
        }
    
        public virtual int uspTETask_DeleteTETaskBYTaskID(Nullable<int> taskID, ObjectParameter result)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTETask_DeleteTETaskBYTaskID", taskIDParameter, result);
        }
    
        public virtual ObjectResult<uspTETask_GetAllByTETaskType_Result> uspTETask_GetAllByTETaskType(string taskType)
        {
            var taskTypeParameter = taskType != null ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTETask_GetAllByTETaskType_Result>("uspTETask_GetAllByTETaskType", taskTypeParameter);
        }
    
        public virtual ObjectResult<uspTETask_GetAllTasks_Result> uspTETask_GetAllTasks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTETask_GetAllTasks_Result>("uspTETask_GetAllTasks");
        }
    
        public virtual int uspTETask_GetAllTasksByContactID(Nullable<int> contactID)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTETask_GetAllTasksByContactID", contactIDParameter);
        }
    
        public virtual ObjectResult<uspTETask_GetByContactId_Result> uspTETask_GetByContactId(Nullable<int> contactID)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTETask_GetByContactId_Result>("uspTETask_GetByContactId", contactIDParameter);
        }
    
        public virtual ObjectResult<uspTETask_GetByTaskId_Result> uspTETask_GetByTaskId(Nullable<int> taskID)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTETask_GetByTaskId_Result>("uspTETask_GetByTaskId", taskIDParameter);
        }
    
        public virtual int uspTETask_UpdateTETask(Nullable<int> taskID, Nullable<int> contactID, Nullable<int> contextID, string taskType, Nullable<System.DateTime> date, Nullable<System.TimeSpan> time, string notes, Nullable<bool> isDeleted, Nullable<int> isPrivate, Nullable<int> locationID, string duration, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<System.DateTime> lastModifiedOn, Nullable<int> lastModifiedBy_Id, string taskTitle, Nullable<int> responsibleConsultant, string taskStatus, ObjectParameter result)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            var contextIDParameter = contextID.HasValue ?
                new ObjectParameter("ContextID", contextID) :
                new ObjectParameter("ContextID", typeof(int));
    
            var taskTypeParameter = taskType != null ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(System.TimeSpan));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isPrivateParameter = isPrivate.HasValue ?
                new ObjectParameter("IsPrivate", isPrivate) :
                new ObjectParameter("IsPrivate", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var durationParameter = duration != null ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var taskTitleParameter = taskTitle != null ?
                new ObjectParameter("TaskTitle", taskTitle) :
                new ObjectParameter("TaskTitle", typeof(string));
    
            var responsibleConsultantParameter = responsibleConsultant.HasValue ?
                new ObjectParameter("ResponsibleConsultant", responsibleConsultant) :
                new ObjectParameter("ResponsibleConsultant", typeof(int));
    
            var taskStatusParameter = taskStatus != null ?
                new ObjectParameter("TaskStatus", taskStatus) :
                new ObjectParameter("TaskStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTETask_UpdateTETask", taskIDParameter, contactIDParameter, contextIDParameter, taskTypeParameter, dateParameter, timeParameter, notesParameter, isDeletedParameter, isPrivateParameter, locationIDParameter, durationParameter, createdOnParameter, createdByParameter, lastModifiedOnParameter, lastModifiedBy_IdParameter, taskTitleParameter, responsibleConsultantParameter, taskStatusParameter, result);
        }
    
        public virtual int uspTETaxDetails_DeleteTETaxDetails(Nullable<int> taxDetailsID, ObjectParameter result)
        {
            var taxDetailsIDParameter = taxDetailsID.HasValue ?
                new ObjectParameter("TaxDetailsID", taxDetailsID) :
                new ObjectParameter("TaxDetailsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTETaxDetails_DeleteTETaxDetails", taxDetailsIDParameter, result);
        }
    
        public virtual ObjectResult<uspTETaxDetails_GetAllTETaxDetails_Result> uspTETaxDetails_GetAllTETaxDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTETaxDetails_GetAllTETaxDetails_Result>("uspTETaxDetails_GetAllTETaxDetails");
        }
    
        public virtual ObjectResult<uspTETaxDetails_GetAllTETaxDetails_ByProjectID_Result> uspTETaxDetails_GetAllTETaxDetails_ByProjectID(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTETaxDetails_GetAllTETaxDetails_ByProjectID_Result>("uspTETaxDetails_GetAllTETaxDetails_ByProjectID", projectIDParameter);
        }
    
        public virtual ObjectResult<uspTETaxDetails_GetAllTETaxDetails_ByTaxDetailsID_Result> uspTETaxDetails_GetAllTETaxDetails_ByTaxDetailsID(Nullable<int> taxDetailsID)
        {
            var taxDetailsIDParameter = taxDetailsID.HasValue ?
                new ObjectParameter("TaxDetailsID", taxDetailsID) :
                new ObjectParameter("TaxDetailsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTETaxDetails_GetAllTETaxDetails_ByTaxDetailsID_Result>("uspTETaxDetails_GetAllTETaxDetails_ByTaxDetailsID", taxDetailsIDParameter);
        }
    
        public virtual int uspTETaxDetails_InsertTETaxDetails(Nullable<int> projectID, Nullable<int> taxConsiderationType, string sAPTaxCode, Nullable<int> taxType, string taxValueType, Nullable<decimal> taxRate, Nullable<System.DateTime> salesPeriodFromDate, Nullable<System.DateTime> salesPeriodToDate, Nullable<System.DateTime> taxationValidityFromDate, Nullable<System.DateTime> taxationValidityToDate, Nullable<bool> isTaxInclusive, string taxationInApplicabilityEvent, string towerID, string revisionNo, string taxBookID, Nullable<int> lastModifiedBy_Id, Nullable<System.DateTime> lostModifiedDate, ObjectParameter result)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var taxConsiderationTypeParameter = taxConsiderationType.HasValue ?
                new ObjectParameter("TaxConsiderationType", taxConsiderationType) :
                new ObjectParameter("TaxConsiderationType", typeof(int));
    
            var sAPTaxCodeParameter = sAPTaxCode != null ?
                new ObjectParameter("SAPTaxCode", sAPTaxCode) :
                new ObjectParameter("SAPTaxCode", typeof(string));
    
            var taxTypeParameter = taxType.HasValue ?
                new ObjectParameter("TaxType", taxType) :
                new ObjectParameter("TaxType", typeof(int));
    
            var taxValueTypeParameter = taxValueType != null ?
                new ObjectParameter("TaxValueType", taxValueType) :
                new ObjectParameter("TaxValueType", typeof(string));
    
            var taxRateParameter = taxRate.HasValue ?
                new ObjectParameter("TaxRate", taxRate) :
                new ObjectParameter("TaxRate", typeof(decimal));
    
            var salesPeriodFromDateParameter = salesPeriodFromDate.HasValue ?
                new ObjectParameter("SalesPeriodFromDate", salesPeriodFromDate) :
                new ObjectParameter("SalesPeriodFromDate", typeof(System.DateTime));
    
            var salesPeriodToDateParameter = salesPeriodToDate.HasValue ?
                new ObjectParameter("SalesPeriodToDate", salesPeriodToDate) :
                new ObjectParameter("SalesPeriodToDate", typeof(System.DateTime));
    
            var taxationValidityFromDateParameter = taxationValidityFromDate.HasValue ?
                new ObjectParameter("TaxationValidityFromDate", taxationValidityFromDate) :
                new ObjectParameter("TaxationValidityFromDate", typeof(System.DateTime));
    
            var taxationValidityToDateParameter = taxationValidityToDate.HasValue ?
                new ObjectParameter("TaxationValidityToDate", taxationValidityToDate) :
                new ObjectParameter("TaxationValidityToDate", typeof(System.DateTime));
    
            var isTaxInclusiveParameter = isTaxInclusive.HasValue ?
                new ObjectParameter("IsTaxInclusive", isTaxInclusive) :
                new ObjectParameter("IsTaxInclusive", typeof(bool));
    
            var taxationInApplicabilityEventParameter = taxationInApplicabilityEvent != null ?
                new ObjectParameter("TaxationInApplicabilityEvent", taxationInApplicabilityEvent) :
                new ObjectParameter("TaxationInApplicabilityEvent", typeof(string));
    
            var towerIDParameter = towerID != null ?
                new ObjectParameter("TowerID", towerID) :
                new ObjectParameter("TowerID", typeof(string));
    
            var revisionNoParameter = revisionNo != null ?
                new ObjectParameter("RevisionNo", revisionNo) :
                new ObjectParameter("RevisionNo", typeof(string));
    
            var taxBookIDParameter = taxBookID != null ?
                new ObjectParameter("TaxBookID", taxBookID) :
                new ObjectParameter("TaxBookID", typeof(string));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var lostModifiedDateParameter = lostModifiedDate.HasValue ?
                new ObjectParameter("LostModifiedDate", lostModifiedDate) :
                new ObjectParameter("LostModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTETaxDetails_InsertTETaxDetails", projectIDParameter, taxConsiderationTypeParameter, sAPTaxCodeParameter, taxTypeParameter, taxValueTypeParameter, taxRateParameter, salesPeriodFromDateParameter, salesPeriodToDateParameter, taxationValidityFromDateParameter, taxationValidityToDateParameter, isTaxInclusiveParameter, taxationInApplicabilityEventParameter, towerIDParameter, revisionNoParameter, taxBookIDParameter, lastModifiedBy_IdParameter, lostModifiedDateParameter, result);
        }
    
        public virtual int uspTETaxDetails_UpdateTETaxDetails(Nullable<int> taxDetailsID, Nullable<int> projectID, Nullable<int> taxConsiderationType, string sAPTaxCode, Nullable<int> taxType, string taxValueType, Nullable<decimal> taxRate, Nullable<System.DateTime> salesPeriodFromDate, Nullable<System.DateTime> salesPeriodToDate, Nullable<System.DateTime> taxationValidityFromDate, Nullable<System.DateTime> taxationValidityToDate, Nullable<bool> isTaxInclusive, string taxationInApplicabilityEvent, string towerID, string revisionNo, string taxBookID, Nullable<int> lastModifiedBy_Id, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var taxDetailsIDParameter = taxDetailsID.HasValue ?
                new ObjectParameter("TaxDetailsID", taxDetailsID) :
                new ObjectParameter("TaxDetailsID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var taxConsiderationTypeParameter = taxConsiderationType.HasValue ?
                new ObjectParameter("TaxConsiderationType", taxConsiderationType) :
                new ObjectParameter("TaxConsiderationType", typeof(int));
    
            var sAPTaxCodeParameter = sAPTaxCode != null ?
                new ObjectParameter("SAPTaxCode", sAPTaxCode) :
                new ObjectParameter("SAPTaxCode", typeof(string));
    
            var taxTypeParameter = taxType.HasValue ?
                new ObjectParameter("TaxType", taxType) :
                new ObjectParameter("TaxType", typeof(int));
    
            var taxValueTypeParameter = taxValueType != null ?
                new ObjectParameter("TaxValueType", taxValueType) :
                new ObjectParameter("TaxValueType", typeof(string));
    
            var taxRateParameter = taxRate.HasValue ?
                new ObjectParameter("TaxRate", taxRate) :
                new ObjectParameter("TaxRate", typeof(decimal));
    
            var salesPeriodFromDateParameter = salesPeriodFromDate.HasValue ?
                new ObjectParameter("SalesPeriodFromDate", salesPeriodFromDate) :
                new ObjectParameter("SalesPeriodFromDate", typeof(System.DateTime));
    
            var salesPeriodToDateParameter = salesPeriodToDate.HasValue ?
                new ObjectParameter("SalesPeriodToDate", salesPeriodToDate) :
                new ObjectParameter("SalesPeriodToDate", typeof(System.DateTime));
    
            var taxationValidityFromDateParameter = taxationValidityFromDate.HasValue ?
                new ObjectParameter("TaxationValidityFromDate", taxationValidityFromDate) :
                new ObjectParameter("TaxationValidityFromDate", typeof(System.DateTime));
    
            var taxationValidityToDateParameter = taxationValidityToDate.HasValue ?
                new ObjectParameter("TaxationValidityToDate", taxationValidityToDate) :
                new ObjectParameter("TaxationValidityToDate", typeof(System.DateTime));
    
            var isTaxInclusiveParameter = isTaxInclusive.HasValue ?
                new ObjectParameter("IsTaxInclusive", isTaxInclusive) :
                new ObjectParameter("IsTaxInclusive", typeof(bool));
    
            var taxationInApplicabilityEventParameter = taxationInApplicabilityEvent != null ?
                new ObjectParameter("TaxationInApplicabilityEvent", taxationInApplicabilityEvent) :
                new ObjectParameter("TaxationInApplicabilityEvent", typeof(string));
    
            var towerIDParameter = towerID != null ?
                new ObjectParameter("TowerID", towerID) :
                new ObjectParameter("TowerID", typeof(string));
    
            var revisionNoParameter = revisionNo != null ?
                new ObjectParameter("RevisionNo", revisionNo) :
                new ObjectParameter("RevisionNo", typeof(string));
    
            var taxBookIDParameter = taxBookID != null ?
                new ObjectParameter("TaxBookID", taxBookID) :
                new ObjectParameter("TaxBookID", typeof(string));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTETaxDetails_UpdateTETaxDetails", taxDetailsIDParameter, projectIDParameter, taxConsiderationTypeParameter, sAPTaxCodeParameter, taxTypeParameter, taxValueTypeParameter, taxRateParameter, salesPeriodFromDateParameter, salesPeriodToDateParameter, taxationValidityFromDateParameter, taxationValidityToDateParameter, isTaxInclusiveParameter, taxationInApplicabilityEventParameter, towerIDParameter, revisionNoParameter, taxBookIDParameter, lastModifiedBy_IdParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTETermsANDConditions_DeleteTETermsANDConditions(Nullable<int> tandCID, ObjectParameter result)
        {
            var tandCIDParameter = tandCID.HasValue ?
                new ObjectParameter("TandCID", tandCID) :
                new ObjectParameter("TandCID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTETermsANDConditions_DeleteTETermsANDConditions", tandCIDParameter, result);
        }
    
        public virtual int uspTETermsANDConditions_GetAllTETermsANDConditions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTETermsANDConditions_GetAllTETermsANDConditions");
        }
    
        public virtual int uspTETermsANDConditions_GetAllTETermsANDConditionsByProjectID(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTETermsANDConditions_GetAllTETermsANDConditionsByProjectID", projectIDParameter);
        }
    
        public virtual int uspTETermsANDConditions_GetAllTETermsANDConditionsByTCID(Nullable<int> tandCID)
        {
            var tandCIDParameter = tandCID.HasValue ?
                new ObjectParameter("TandCID", tandCID) :
                new ObjectParameter("TandCID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTETermsANDConditions_GetAllTETermsANDConditionsByTCID", tandCIDParameter);
        }
    
        public virtual int uspTETermsANDConditions_InsertTETermsANDConditions(Nullable<int> projectID, Nullable<int> productID, Nullable<int> seqNo, Nullable<int> description, string isTEORJD, Nullable<int> documentType, string launchType, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var seqNoParameter = seqNo.HasValue ?
                new ObjectParameter("SeqNo", seqNo) :
                new ObjectParameter("SeqNo", typeof(int));
    
            var descriptionParameter = description.HasValue ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(int));
    
            var isTEORJDParameter = isTEORJD != null ?
                new ObjectParameter("IsTEORJD", isTEORJD) :
                new ObjectParameter("IsTEORJD", typeof(string));
    
            var documentTypeParameter = documentType.HasValue ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(int));
    
            var launchTypeParameter = launchType != null ?
                new ObjectParameter("LaunchType", launchType) :
                new ObjectParameter("LaunchType", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTETermsANDConditions_InsertTETermsANDConditions", projectIDParameter, productIDParameter, seqNoParameter, descriptionParameter, isTEORJDParameter, documentTypeParameter, launchTypeParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTETermsANDConditions_UpdateTETermsANDConditions(Nullable<int> tandCID, Nullable<int> projectID, Nullable<int> productID, Nullable<int> seqNo, Nullable<int> description, string isTEORJD, Nullable<int> documentType, string launchType, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var tandCIDParameter = tandCID.HasValue ?
                new ObjectParameter("TandCID", tandCID) :
                new ObjectParameter("TandCID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var seqNoParameter = seqNo.HasValue ?
                new ObjectParameter("SeqNo", seqNo) :
                new ObjectParameter("SeqNo", typeof(int));
    
            var descriptionParameter = description.HasValue ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(int));
    
            var isTEORJDParameter = isTEORJD != null ?
                new ObjectParameter("IsTEORJD", isTEORJD) :
                new ObjectParameter("IsTEORJD", typeof(string));
    
            var documentTypeParameter = documentType.HasValue ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(int));
    
            var launchTypeParameter = launchType != null ?
                new ObjectParameter("LaunchType", launchType) :
                new ObjectParameter("LaunchType", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTETermsANDConditions_UpdateTETermsANDConditions", tandCIDParameter, projectIDParameter, productIDParameter, seqNoParameter, descriptionParameter, isTEORJDParameter, documentTypeParameter, launchTypeParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTETowerMaster_DeleteTETowerMaster(Nullable<int> towerID, ObjectParameter result)
        {
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("TowerID", towerID) :
                new ObjectParameter("TowerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTETowerMaster_DeleteTETowerMaster", towerIDParameter, result);
        }
    
        public virtual int uspTETowerMaster_GetAllTETowerMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTETowerMaster_GetAllTETowerMaster");
        }
    
        public virtual int uspTETowerMaster_GetAllTETowerMasterByTowerID(Nullable<int> towerID)
        {
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("TowerID", towerID) :
                new ObjectParameter("TowerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTETowerMaster_GetAllTETowerMasterByTowerID", towerIDParameter);
        }
    
        public virtual ObjectResult<uspTETowerMaster_GetTETowerDetailByProjectID_Result> uspTETowerMaster_GetTETowerDetailByProjectID(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTETowerMaster_GetTETowerDetailByProjectID_Result>("uspTETowerMaster_GetTETowerDetailByProjectID", projectIDParameter);
        }
    
        public virtual int uspTETowerMaster_InsertTETowerMaster(Nullable<int> projectID, string towerName, string towerShortName, string maxLevel, string description, string launchStatus, Nullable<bool> openForSale, string layOutID, Nullable<System.DateTime> cCApprovalDate, Nullable<System.DateTime> marketingLaunchDate, Nullable<System.DateTime> completionDate, Nullable<System.DateTime> expectedCompletionDate, string completionPercentage, Nullable<int> lastModifiedBy_Id, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var towerNameParameter = towerName != null ?
                new ObjectParameter("TowerName", towerName) :
                new ObjectParameter("TowerName", typeof(string));
    
            var towerShortNameParameter = towerShortName != null ?
                new ObjectParameter("TowerShortName", towerShortName) :
                new ObjectParameter("TowerShortName", typeof(string));
    
            var maxLevelParameter = maxLevel != null ?
                new ObjectParameter("MaxLevel", maxLevel) :
                new ObjectParameter("MaxLevel", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var launchStatusParameter = launchStatus != null ?
                new ObjectParameter("LaunchStatus", launchStatus) :
                new ObjectParameter("LaunchStatus", typeof(string));
    
            var openForSaleParameter = openForSale.HasValue ?
                new ObjectParameter("OpenForSale", openForSale) :
                new ObjectParameter("OpenForSale", typeof(bool));
    
            var layOutIDParameter = layOutID != null ?
                new ObjectParameter("LayOutID", layOutID) :
                new ObjectParameter("LayOutID", typeof(string));
    
            var cCApprovalDateParameter = cCApprovalDate.HasValue ?
                new ObjectParameter("CCApprovalDate", cCApprovalDate) :
                new ObjectParameter("CCApprovalDate", typeof(System.DateTime));
    
            var marketingLaunchDateParameter = marketingLaunchDate.HasValue ?
                new ObjectParameter("MarketingLaunchDate", marketingLaunchDate) :
                new ObjectParameter("MarketingLaunchDate", typeof(System.DateTime));
    
            var completionDateParameter = completionDate.HasValue ?
                new ObjectParameter("CompletionDate", completionDate) :
                new ObjectParameter("CompletionDate", typeof(System.DateTime));
    
            var expectedCompletionDateParameter = expectedCompletionDate.HasValue ?
                new ObjectParameter("ExpectedCompletionDate", expectedCompletionDate) :
                new ObjectParameter("ExpectedCompletionDate", typeof(System.DateTime));
    
            var completionPercentageParameter = completionPercentage != null ?
                new ObjectParameter("CompletionPercentage", completionPercentage) :
                new ObjectParameter("CompletionPercentage", typeof(string));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTETowerMaster_InsertTETowerMaster", projectIDParameter, towerNameParameter, towerShortNameParameter, maxLevelParameter, descriptionParameter, launchStatusParameter, openForSaleParameter, layOutIDParameter, cCApprovalDateParameter, marketingLaunchDateParameter, completionDateParameter, expectedCompletionDateParameter, completionPercentageParameter, lastModifiedBy_IdParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTETowerMaster_UpdateTETowerMaster(Nullable<int> towerID, Nullable<int> projectID, string towerName, string towerShortName, string maxLevel, string description, string launchStatus, Nullable<bool> openForSale, string layOutID, Nullable<System.DateTime> cCApprovalDate, Nullable<System.DateTime> marketingLaunchDate, Nullable<System.DateTime> completionDate, Nullable<System.DateTime> expectedCompletionDate, string completionPercentage, Nullable<int> lastModifiedBy_Id, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("TowerID", towerID) :
                new ObjectParameter("TowerID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var towerNameParameter = towerName != null ?
                new ObjectParameter("TowerName", towerName) :
                new ObjectParameter("TowerName", typeof(string));
    
            var towerShortNameParameter = towerShortName != null ?
                new ObjectParameter("TowerShortName", towerShortName) :
                new ObjectParameter("TowerShortName", typeof(string));
    
            var maxLevelParameter = maxLevel != null ?
                new ObjectParameter("MaxLevel", maxLevel) :
                new ObjectParameter("MaxLevel", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var launchStatusParameter = launchStatus != null ?
                new ObjectParameter("LaunchStatus", launchStatus) :
                new ObjectParameter("LaunchStatus", typeof(string));
    
            var openForSaleParameter = openForSale.HasValue ?
                new ObjectParameter("OpenForSale", openForSale) :
                new ObjectParameter("OpenForSale", typeof(bool));
    
            var layOutIDParameter = layOutID != null ?
                new ObjectParameter("LayOutID", layOutID) :
                new ObjectParameter("LayOutID", typeof(string));
    
            var cCApprovalDateParameter = cCApprovalDate.HasValue ?
                new ObjectParameter("CCApprovalDate", cCApprovalDate) :
                new ObjectParameter("CCApprovalDate", typeof(System.DateTime));
    
            var marketingLaunchDateParameter = marketingLaunchDate.HasValue ?
                new ObjectParameter("MarketingLaunchDate", marketingLaunchDate) :
                new ObjectParameter("MarketingLaunchDate", typeof(System.DateTime));
    
            var completionDateParameter = completionDate.HasValue ?
                new ObjectParameter("CompletionDate", completionDate) :
                new ObjectParameter("CompletionDate", typeof(System.DateTime));
    
            var expectedCompletionDateParameter = expectedCompletionDate.HasValue ?
                new ObjectParameter("ExpectedCompletionDate", expectedCompletionDate) :
                new ObjectParameter("ExpectedCompletionDate", typeof(System.DateTime));
    
            var completionPercentageParameter = completionPercentage != null ?
                new ObjectParameter("CompletionPercentage", completionPercentage) :
                new ObjectParameter("CompletionPercentage", typeof(string));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTETowerMaster_UpdateTETowerMaster", towerIDParameter, projectIDParameter, towerNameParameter, towerShortNameParameter, maxLevelParameter, descriptionParameter, launchStatusParameter, openForSaleParameter, layOutIDParameter, cCApprovalDateParameter, marketingLaunchDateParameter, completionDateParameter, expectedCompletionDateParameter, completionPercentageParameter, lastModifiedBy_IdParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEUnits_DeleteTEUnits(Nullable<int> unitID, ObjectParameter result)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEUnits_DeleteTEUnits", unitIDParameter, result);
        }
    
        public virtual ObjectResult<uspTEUnits_GetAllTEUnits_Result> uspTEUnits_GetAllTEUnits()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEUnits_GetAllTEUnits_Result>("uspTEUnits_GetAllTEUnits");
        }
    
        public virtual ObjectResult<uspTEUnits_GetAllTEUnitsByUnitID_Result> uspTEUnits_GetAllTEUnitsByUnitID(Nullable<int> unitID)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEUnits_GetAllTEUnitsByUnitID_Result>("uspTEUnits_GetAllTEUnitsByUnitID", unitIDParameter);
        }
    
        public virtual ObjectResult<uspTEUnits_GetAllUnitsByProjectID_Result> uspTEUnits_GetAllUnitsByProjectID(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEUnits_GetAllUnitsByProjectID_Result>("uspTEUnits_GetAllUnitsByProjectID", projectIDParameter);
        }
    
        public virtual int uspTEUnits_InsertTEUnits(Nullable<int> towerID, string unitNumber, string unitShortCode, Nullable<int> projectProductID, string doorDirection, string gardenDirection, string cluster, string floor, string level, string unitType, string ownerShipType, Nullable<int> additionalLandArea, Nullable<int> uDI, Nullable<int> exclusiveAccessArea, Nullable<int> exclusiveAccessToGardenArea, string approvedStatus, Nullable<int> premiumPrice, string premiumID, string layoutID, Nullable<int> saleableArea, string blockedBy, Nullable<System.DateTime> blockedDate, string soldTo, Nullable<System.DateTime> soldDate, Nullable<System.DateTime> bookingDate, Nullable<System.DateTime> agreementDate, string status, string statusReason, string completionPercentage, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("TowerID", towerID) :
                new ObjectParameter("TowerID", typeof(int));
    
            var unitNumberParameter = unitNumber != null ?
                new ObjectParameter("UnitNumber", unitNumber) :
                new ObjectParameter("UnitNumber", typeof(string));
    
            var unitShortCodeParameter = unitShortCode != null ?
                new ObjectParameter("UnitShortCode", unitShortCode) :
                new ObjectParameter("UnitShortCode", typeof(string));
    
            var projectProductIDParameter = projectProductID.HasValue ?
                new ObjectParameter("ProjectProductID", projectProductID) :
                new ObjectParameter("ProjectProductID", typeof(int));
    
            var doorDirectionParameter = doorDirection != null ?
                new ObjectParameter("DoorDirection", doorDirection) :
                new ObjectParameter("DoorDirection", typeof(string));
    
            var gardenDirectionParameter = gardenDirection != null ?
                new ObjectParameter("GardenDirection", gardenDirection) :
                new ObjectParameter("GardenDirection", typeof(string));
    
            var clusterParameter = cluster != null ?
                new ObjectParameter("Cluster", cluster) :
                new ObjectParameter("Cluster", typeof(string));
    
            var floorParameter = floor != null ?
                new ObjectParameter("Floor", floor) :
                new ObjectParameter("Floor", typeof(string));
    
            var levelParameter = level != null ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(string));
    
            var unitTypeParameter = unitType != null ?
                new ObjectParameter("UnitType", unitType) :
                new ObjectParameter("UnitType", typeof(string));
    
            var ownerShipTypeParameter = ownerShipType != null ?
                new ObjectParameter("OwnerShipType", ownerShipType) :
                new ObjectParameter("OwnerShipType", typeof(string));
    
            var additionalLandAreaParameter = additionalLandArea.HasValue ?
                new ObjectParameter("AdditionalLandArea", additionalLandArea) :
                new ObjectParameter("AdditionalLandArea", typeof(int));
    
            var uDIParameter = uDI.HasValue ?
                new ObjectParameter("UDI", uDI) :
                new ObjectParameter("UDI", typeof(int));
    
            var exclusiveAccessAreaParameter = exclusiveAccessArea.HasValue ?
                new ObjectParameter("ExclusiveAccessArea", exclusiveAccessArea) :
                new ObjectParameter("ExclusiveAccessArea", typeof(int));
    
            var exclusiveAccessToGardenAreaParameter = exclusiveAccessToGardenArea.HasValue ?
                new ObjectParameter("ExclusiveAccessToGardenArea", exclusiveAccessToGardenArea) :
                new ObjectParameter("ExclusiveAccessToGardenArea", typeof(int));
    
            var approvedStatusParameter = approvedStatus != null ?
                new ObjectParameter("ApprovedStatus", approvedStatus) :
                new ObjectParameter("ApprovedStatus", typeof(string));
    
            var premiumPriceParameter = premiumPrice.HasValue ?
                new ObjectParameter("PremiumPrice", premiumPrice) :
                new ObjectParameter("PremiumPrice", typeof(int));
    
            var premiumIDParameter = premiumID != null ?
                new ObjectParameter("PremiumID", premiumID) :
                new ObjectParameter("PremiumID", typeof(string));
    
            var layoutIDParameter = layoutID != null ?
                new ObjectParameter("LayoutID", layoutID) :
                new ObjectParameter("LayoutID", typeof(string));
    
            var saleableAreaParameter = saleableArea.HasValue ?
                new ObjectParameter("SaleableArea", saleableArea) :
                new ObjectParameter("SaleableArea", typeof(int));
    
            var blockedByParameter = blockedBy != null ?
                new ObjectParameter("BlockedBy", blockedBy) :
                new ObjectParameter("BlockedBy", typeof(string));
    
            var blockedDateParameter = blockedDate.HasValue ?
                new ObjectParameter("BlockedDate", blockedDate) :
                new ObjectParameter("BlockedDate", typeof(System.DateTime));
    
            var soldToParameter = soldTo != null ?
                new ObjectParameter("SoldTo", soldTo) :
                new ObjectParameter("SoldTo", typeof(string));
    
            var soldDateParameter = soldDate.HasValue ?
                new ObjectParameter("SoldDate", soldDate) :
                new ObjectParameter("SoldDate", typeof(System.DateTime));
    
            var bookingDateParameter = bookingDate.HasValue ?
                new ObjectParameter("BookingDate", bookingDate) :
                new ObjectParameter("BookingDate", typeof(System.DateTime));
    
            var agreementDateParameter = agreementDate.HasValue ?
                new ObjectParameter("AgreementDate", agreementDate) :
                new ObjectParameter("AgreementDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var statusReasonParameter = statusReason != null ?
                new ObjectParameter("StatusReason", statusReason) :
                new ObjectParameter("StatusReason", typeof(string));
    
            var completionPercentageParameter = completionPercentage != null ?
                new ObjectParameter("CompletionPercentage", completionPercentage) :
                new ObjectParameter("CompletionPercentage", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEUnits_InsertTEUnits", towerIDParameter, unitNumberParameter, unitShortCodeParameter, projectProductIDParameter, doorDirectionParameter, gardenDirectionParameter, clusterParameter, floorParameter, levelParameter, unitTypeParameter, ownerShipTypeParameter, additionalLandAreaParameter, uDIParameter, exclusiveAccessAreaParameter, exclusiveAccessToGardenAreaParameter, approvedStatusParameter, premiumPriceParameter, premiumIDParameter, layoutIDParameter, saleableAreaParameter, blockedByParameter, blockedDateParameter, soldToParameter, soldDateParameter, bookingDateParameter, agreementDateParameter, statusParameter, statusReasonParameter, completionPercentageParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEUnits_UpdateTEUnits(Nullable<int> unitID, Nullable<int> towerID, string unitNumber, string unitShortCode, Nullable<int> projectProductID, string doorDirection, string gardenDirection, string cluster, string floor, string level, string unitType, string ownerShipType, Nullable<int> additionalLandArea, Nullable<int> uDI, Nullable<int> exclusiveAccessArea, Nullable<int> exclusiveAccessToGardenArea, string approvedStatus, Nullable<int> premiumPrice, string premiumID, string layoutID, Nullable<int> saleableArea, string blockedBy, Nullable<System.DateTime> blockedDate, string soldTo, Nullable<System.DateTime> soldDate, Nullable<System.DateTime> bookingDate, Nullable<System.DateTime> agreementDate, string status, string statusReason, string completionPercentage, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("TowerID", towerID) :
                new ObjectParameter("TowerID", typeof(int));
    
            var unitNumberParameter = unitNumber != null ?
                new ObjectParameter("UnitNumber", unitNumber) :
                new ObjectParameter("UnitNumber", typeof(string));
    
            var unitShortCodeParameter = unitShortCode != null ?
                new ObjectParameter("UnitShortCode", unitShortCode) :
                new ObjectParameter("UnitShortCode", typeof(string));
    
            var projectProductIDParameter = projectProductID.HasValue ?
                new ObjectParameter("ProjectProductID", projectProductID) :
                new ObjectParameter("ProjectProductID", typeof(int));
    
            var doorDirectionParameter = doorDirection != null ?
                new ObjectParameter("DoorDirection", doorDirection) :
                new ObjectParameter("DoorDirection", typeof(string));
    
            var gardenDirectionParameter = gardenDirection != null ?
                new ObjectParameter("GardenDirection", gardenDirection) :
                new ObjectParameter("GardenDirection", typeof(string));
    
            var clusterParameter = cluster != null ?
                new ObjectParameter("Cluster", cluster) :
                new ObjectParameter("Cluster", typeof(string));
    
            var floorParameter = floor != null ?
                new ObjectParameter("Floor", floor) :
                new ObjectParameter("Floor", typeof(string));
    
            var levelParameter = level != null ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(string));
    
            var unitTypeParameter = unitType != null ?
                new ObjectParameter("UnitType", unitType) :
                new ObjectParameter("UnitType", typeof(string));
    
            var ownerShipTypeParameter = ownerShipType != null ?
                new ObjectParameter("OwnerShipType", ownerShipType) :
                new ObjectParameter("OwnerShipType", typeof(string));
    
            var additionalLandAreaParameter = additionalLandArea.HasValue ?
                new ObjectParameter("AdditionalLandArea", additionalLandArea) :
                new ObjectParameter("AdditionalLandArea", typeof(int));
    
            var uDIParameter = uDI.HasValue ?
                new ObjectParameter("UDI", uDI) :
                new ObjectParameter("UDI", typeof(int));
    
            var exclusiveAccessAreaParameter = exclusiveAccessArea.HasValue ?
                new ObjectParameter("ExclusiveAccessArea", exclusiveAccessArea) :
                new ObjectParameter("ExclusiveAccessArea", typeof(int));
    
            var exclusiveAccessToGardenAreaParameter = exclusiveAccessToGardenArea.HasValue ?
                new ObjectParameter("ExclusiveAccessToGardenArea", exclusiveAccessToGardenArea) :
                new ObjectParameter("ExclusiveAccessToGardenArea", typeof(int));
    
            var approvedStatusParameter = approvedStatus != null ?
                new ObjectParameter("ApprovedStatus", approvedStatus) :
                new ObjectParameter("ApprovedStatus", typeof(string));
    
            var premiumPriceParameter = premiumPrice.HasValue ?
                new ObjectParameter("PremiumPrice", premiumPrice) :
                new ObjectParameter("PremiumPrice", typeof(int));
    
            var premiumIDParameter = premiumID != null ?
                new ObjectParameter("PremiumID", premiumID) :
                new ObjectParameter("PremiumID", typeof(string));
    
            var layoutIDParameter = layoutID != null ?
                new ObjectParameter("LayoutID", layoutID) :
                new ObjectParameter("LayoutID", typeof(string));
    
            var saleableAreaParameter = saleableArea.HasValue ?
                new ObjectParameter("SaleableArea", saleableArea) :
                new ObjectParameter("SaleableArea", typeof(int));
    
            var blockedByParameter = blockedBy != null ?
                new ObjectParameter("BlockedBy", blockedBy) :
                new ObjectParameter("BlockedBy", typeof(string));
    
            var blockedDateParameter = blockedDate.HasValue ?
                new ObjectParameter("BlockedDate", blockedDate) :
                new ObjectParameter("BlockedDate", typeof(System.DateTime));
    
            var soldToParameter = soldTo != null ?
                new ObjectParameter("SoldTo", soldTo) :
                new ObjectParameter("SoldTo", typeof(string));
    
            var soldDateParameter = soldDate.HasValue ?
                new ObjectParameter("SoldDate", soldDate) :
                new ObjectParameter("SoldDate", typeof(System.DateTime));
    
            var bookingDateParameter = bookingDate.HasValue ?
                new ObjectParameter("BookingDate", bookingDate) :
                new ObjectParameter("BookingDate", typeof(System.DateTime));
    
            var agreementDateParameter = agreementDate.HasValue ?
                new ObjectParameter("AgreementDate", agreementDate) :
                new ObjectParameter("AgreementDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var statusReasonParameter = statusReason != null ?
                new ObjectParameter("StatusReason", statusReason) :
                new ObjectParameter("StatusReason", typeof(string));
    
            var completionPercentageParameter = completionPercentage != null ?
                new ObjectParameter("CompletionPercentage", completionPercentage) :
                new ObjectParameter("CompletionPercentage", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEUnits_UpdateTEUnits", unitIDParameter, towerIDParameter, unitNumberParameter, unitShortCodeParameter, projectProductIDParameter, doorDirectionParameter, gardenDirectionParameter, clusterParameter, floorParameter, levelParameter, unitTypeParameter, ownerShipTypeParameter, additionalLandAreaParameter, uDIParameter, exclusiveAccessAreaParameter, exclusiveAccessToGardenAreaParameter, approvedStatusParameter, premiumPriceParameter, premiumIDParameter, layoutIDParameter, saleableAreaParameter, blockedByParameter, blockedDateParameter, soldToParameter, soldDateParameter, bookingDateParameter, agreementDateParameter, statusParameter, statusReasonParameter, completionPercentageParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEUserProfile_DeleteTEUserProfile(Nullable<int> userId, ObjectParameter result)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEUserProfile_DeleteTEUserProfile", userIdParameter, result);
        }
    
        public virtual ObjectResult<uspTEUserProfile_GetAllTEUserProfile_Result> uspTEUserProfile_GetAllTEUserProfile()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEUserProfile_GetAllTEUserProfile_Result>("uspTEUserProfile_GetAllTEUserProfile");
        }
    
        public virtual ObjectResult<uspTEUserProfile_GetTEUserProfile_ByUserId_Result> uspTEUserProfile_GetTEUserProfile_ByUserId(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEUserProfile_GetTEUserProfile_ByUserId_Result>("uspTEUserProfile_GetTEUserProfile_ByUserId", useridParameter);
        }
    
        public virtual ObjectResult<uspTEUserProfile_GetTEUserProfile_ByUserName_Result> uspTEUserProfile_GetTEUserProfile_ByUserName(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEUserProfile_GetTEUserProfile_ByUserName_Result>("uspTEUserProfile_GetTEUserProfile_ByUserName", userNameParameter);
        }
    
        public virtual int uspTEUserProfile_InsertTEUserProfile(string userName, string email, string phone, string house_No, string street1, string street2, string area, string city, Nullable<int> pinCode, string state, string country, Nullable<bool> status, string androidToken, string iosToken, string password, string faceBookId, string googleId, string callName, string photo, Nullable<int> roleId, string bizAppId, string callCentreId, Nullable<bool> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var house_NoParameter = house_No != null ?
                new ObjectParameter("House_No", house_No) :
                new ObjectParameter("House_No", typeof(string));
    
            var street1Parameter = street1 != null ?
                new ObjectParameter("Street1", street1) :
                new ObjectParameter("Street1", typeof(string));
    
            var street2Parameter = street2 != null ?
                new ObjectParameter("Street2", street2) :
                new ObjectParameter("Street2", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var pinCodeParameter = pinCode.HasValue ?
                new ObjectParameter("PinCode", pinCode) :
                new ObjectParameter("PinCode", typeof(int));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var androidTokenParameter = androidToken != null ?
                new ObjectParameter("AndroidToken", androidToken) :
                new ObjectParameter("AndroidToken", typeof(string));
    
            var iosTokenParameter = iosToken != null ?
                new ObjectParameter("IosToken", iosToken) :
                new ObjectParameter("IosToken", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var faceBookIdParameter = faceBookId != null ?
                new ObjectParameter("FaceBookId", faceBookId) :
                new ObjectParameter("FaceBookId", typeof(string));
    
            var googleIdParameter = googleId != null ?
                new ObjectParameter("GoogleId", googleId) :
                new ObjectParameter("GoogleId", typeof(string));
    
            var callNameParameter = callName != null ?
                new ObjectParameter("CallName", callName) :
                new ObjectParameter("CallName", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var bizAppIdParameter = bizAppId != null ?
                new ObjectParameter("BizAppId", bizAppId) :
                new ObjectParameter("BizAppId", typeof(string));
    
            var callCentreIdParameter = callCentreId != null ?
                new ObjectParameter("CallCentreId", callCentreId) :
                new ObjectParameter("CallCentreId", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEUserProfile_InsertTEUserProfile", userNameParameter, emailParameter, phoneParameter, house_NoParameter, street1Parameter, street2Parameter, areaParameter, cityParameter, pinCodeParameter, stateParameter, countryParameter, statusParameter, androidTokenParameter, iosTokenParameter, passwordParameter, faceBookIdParameter, googleIdParameter, callNameParameter, photoParameter, roleIdParameter, bizAppIdParameter, callCentreIdParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEUserProfile_UpdateTEUserProfile(Nullable<int> userId, string userName, string email, string phone, string house_No, string street1, string street2, string area, string city, Nullable<int> pinCode, string state, string country, Nullable<bool> status, string androidToken, string iosToken, string password, string faceBookId, string googleId, string callName, string photo, Nullable<int> roleId, string bizAppId, string callCentreId, Nullable<bool> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var house_NoParameter = house_No != null ?
                new ObjectParameter("House_No", house_No) :
                new ObjectParameter("House_No", typeof(string));
    
            var street1Parameter = street1 != null ?
                new ObjectParameter("Street1", street1) :
                new ObjectParameter("Street1", typeof(string));
    
            var street2Parameter = street2 != null ?
                new ObjectParameter("Street2", street2) :
                new ObjectParameter("Street2", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var pinCodeParameter = pinCode.HasValue ?
                new ObjectParameter("PinCode", pinCode) :
                new ObjectParameter("PinCode", typeof(int));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var androidTokenParameter = androidToken != null ?
                new ObjectParameter("AndroidToken", androidToken) :
                new ObjectParameter("AndroidToken", typeof(string));
    
            var iosTokenParameter = iosToken != null ?
                new ObjectParameter("IosToken", iosToken) :
                new ObjectParameter("IosToken", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var faceBookIdParameter = faceBookId != null ?
                new ObjectParameter("FaceBookId", faceBookId) :
                new ObjectParameter("FaceBookId", typeof(string));
    
            var googleIdParameter = googleId != null ?
                new ObjectParameter("GoogleId", googleId) :
                new ObjectParameter("GoogleId", typeof(string));
    
            var callNameParameter = callName != null ?
                new ObjectParameter("CallName", callName) :
                new ObjectParameter("CallName", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var bizAppIdParameter = bizAppId != null ?
                new ObjectParameter("BizAppId", bizAppId) :
                new ObjectParameter("BizAppId", typeof(string));
    
            var callCentreIdParameter = callCentreId != null ?
                new ObjectParameter("CallCentreId", callCentreId) :
                new ObjectParameter("CallCentreId", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEUserProfile_UpdateTEUserProfile", userIdParameter, userNameParameter, emailParameter, phoneParameter, house_NoParameter, street1Parameter, street2Parameter, areaParameter, cityParameter, pinCodeParameter, stateParameter, countryParameter, statusParameter, androidTokenParameter, iosTokenParameter, passwordParameter, faceBookIdParameter, googleIdParameter, callNameParameter, photoParameter, roleIdParameter, bizAppIdParameter, callCentreIdParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEUsersRole_DeleteTEUsersRole(Nullable<int> uniqueId, ObjectParameter result)
        {
            var uniqueIdParameter = uniqueId.HasValue ?
                new ObjectParameter("UniqueId", uniqueId) :
                new ObjectParameter("UniqueId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEUsersRole_DeleteTEUsersRole", uniqueIdParameter, result);
        }
    
        public virtual int uspTEUsersRole_GetAllTEUsersRole()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEUsersRole_GetAllTEUsersRole");
        }
    
        public virtual ObjectResult<uspTEUsersRole_GetTEUsersRole_ByRoleName_Result> uspTEUsersRole_GetTEUsersRole_ByRoleName(string roleName)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEUsersRole_GetTEUsersRole_ByRoleName_Result>("uspTEUsersRole_GetTEUsersRole_ByRoleName", roleNameParameter);
        }
    
        public virtual ObjectResult<uspTEUsersRole_GetTEUsersRole_ByUniqueID_Result> uspTEUsersRole_GetTEUsersRole_ByUniqueID(Nullable<int> uniqueID)
        {
            var uniqueIDParameter = uniqueID.HasValue ?
                new ObjectParameter("UniqueID", uniqueID) :
                new ObjectParameter("UniqueID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEUsersRole_GetTEUsersRole_ByUniqueID_Result>("uspTEUsersRole_GetTEUsersRole_ByUniqueID", uniqueIDParameter);
        }
    
        public virtual ObjectResult<string> uspTEUsersRole_GetTEUsersRole_ByUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspTEUsersRole_GetTEUsersRole_ByUserID", userIDParameter);
        }
    
        public virtual int uspTEUsersRole_GetWebPageRolesNotassigned(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEUsersRole_GetWebPageRolesNotassigned", userIDParameter);
        }
    
        public virtual int uspTEUsersRole_InsertTEUsersRole(Nullable<int> userId, Nullable<int> roleId, Nullable<bool> isDeleted, Nullable<int> lastModifiedBy_Id, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEUsersRole_InsertTEUsersRole", userIdParameter, roleIdParameter, isDeletedParameter, lastModifiedBy_IdParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEUsersRole_UpdateTEUsersRole(Nullable<int> uniqueId, Nullable<int> userId, Nullable<int> roleId, Nullable<bool> isDeleted, Nullable<int> lastModifiedBy_Id, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var uniqueIdParameter = uniqueId.HasValue ?
                new ObjectParameter("UniqueId", uniqueId) :
                new ObjectParameter("UniqueId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEUsersRole_UpdateTEUsersRole", uniqueIdParameter, userIdParameter, roleIdParameter, isDeletedParameter, lastModifiedBy_IdParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEUsersThresholds_DeleteThresholdID(Nullable<int> thresholdID, ObjectParameter result)
        {
            var thresholdIDParameter = thresholdID.HasValue ?
                new ObjectParameter("ThresholdID", thresholdID) :
                new ObjectParameter("ThresholdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEUsersThresholds_DeleteThresholdID", thresholdIDParameter, result);
        }
    
        public virtual int uspTEUsersThresholds_GetAllTEUsersThresholds()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEUsersThresholds_GetAllTEUsersThresholds");
        }
    
        public virtual int uspTEUsersThresholds_GetTEUsersThresholds_ByThresholdID(Nullable<int> thresholdID)
        {
            var thresholdIDParameter = thresholdID.HasValue ?
                new ObjectParameter("ThresholdID", thresholdID) :
                new ObjectParameter("ThresholdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEUsersThresholds_GetTEUsersThresholds_ByThresholdID", thresholdIDParameter);
        }
    
        public virtual int uspTEUsersThresholds_InsertTEUsersThresholds(Nullable<int> userId, Nullable<int> leadCount, Nullable<int> currentCount, Nullable<bool> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var leadCountParameter = leadCount.HasValue ?
                new ObjectParameter("LeadCount", leadCount) :
                new ObjectParameter("LeadCount", typeof(int));
    
            var currentCountParameter = currentCount.HasValue ?
                new ObjectParameter("CurrentCount", currentCount) :
                new ObjectParameter("CurrentCount", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEUsersThresholds_InsertTEUsersThresholds", userIdParameter, leadCountParameter, currentCountParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEUsersThresholds_UpdateTEUsersThresholds(Nullable<int> thresholdID, Nullable<int> userId, Nullable<int> leadCount, Nullable<int> currentCount, Nullable<bool> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var thresholdIDParameter = thresholdID.HasValue ?
                new ObjectParameter("ThresholdID", thresholdID) :
                new ObjectParameter("ThresholdID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var leadCountParameter = leadCount.HasValue ?
                new ObjectParameter("LeadCount", leadCount) :
                new ObjectParameter("LeadCount", typeof(int));
    
            var currentCountParameter = currentCount.HasValue ?
                new ObjectParameter("CurrentCount", currentCount) :
                new ObjectParameter("CurrentCount", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEUsersThresholds_UpdateTEUsersThresholds", thresholdIDParameter, userIdParameter, leadCountParameter, currentCountParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual ObjectResult<uspTEWebpages_GetNotAssignedWebPageRolesByUserID_Result> uspTEWebpages_GetNotAssignedWebPageRolesByUserID(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEWebpages_GetNotAssignedWebPageRolesByUserID_Result>("uspTEWebpages_GetNotAssignedWebPageRolesByUserID", userIdParameter);
        }
    
        public virtual ObjectResult<uspTEWebpages_GetWebPageRolesByUserID_Result> uspTEWebpages_GetWebPageRolesByUserID(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEWebpages_GetWebPageRolesByUserID_Result>("uspTEWebpages_GetWebPageRolesByUserID", userIdParameter);
        }
    
        public virtual ObjectResult<uspTEWebpages_Getwebpages_RolesByUserID_Result> uspTEWebpages_Getwebpages_RolesByUserID(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEWebpages_Getwebpages_RolesByUserID_Result>("uspTEWebpages_Getwebpages_RolesByUserID", userIdParameter);
        }
    
        public virtual int uspTEwebpages_Roles_GetAllTEwebpages_Roles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEwebpages_Roles_GetAllTEwebpages_Roles");
        }
    
        public virtual int uspTEWebpagesMembership_DeleteTEWebpagesMembership(Nullable<int> userId, ObjectParameter result)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEWebpagesMembership_DeleteTEWebpagesMembership", userIdParameter, result);
        }
    
        public virtual ObjectResult<uspTEWebpagesMembership_GetAllTEWebpagesMembership_Result> uspTEWebpagesMembership_GetAllTEWebpagesMembership()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEWebpagesMembership_GetAllTEWebpagesMembership_Result>("uspTEWebpagesMembership_GetAllTEWebpagesMembership");
        }
    
        public virtual ObjectResult<uspTEWebpagesMembership_GetTEWebpagesMembership_ByUserId_Result> uspTEWebpagesMembership_GetTEWebpagesMembership_ByUserId(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEWebpagesMembership_GetTEWebpagesMembership_ByUserId_Result>("uspTEWebpagesMembership_GetTEWebpagesMembership_ByUserId", userIdParameter);
        }
    
        public virtual int uspTEWebpagesMembership_InsertTEWebpagesMembership(Nullable<int> userId, Nullable<System.DateTime> aLTERDate, string confirmationToken, Nullable<bool> isConfirmed, Nullable<System.DateTime> lastPasswordFailureDate, Nullable<int> passwordFailuresSinceLastSuccess, string password, Nullable<System.DateTime> passwordChangedDate, string passwordSalt, string passwordVerificationToken, Nullable<System.DateTime> passwordVerificationTokenExpirationDate, Nullable<bool> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var aLTERDateParameter = aLTERDate.HasValue ?
                new ObjectParameter("ALTERDate", aLTERDate) :
                new ObjectParameter("ALTERDate", typeof(System.DateTime));
    
            var confirmationTokenParameter = confirmationToken != null ?
                new ObjectParameter("ConfirmationToken", confirmationToken) :
                new ObjectParameter("ConfirmationToken", typeof(string));
    
            var isConfirmedParameter = isConfirmed.HasValue ?
                new ObjectParameter("IsConfirmed", isConfirmed) :
                new ObjectParameter("IsConfirmed", typeof(bool));
    
            var lastPasswordFailureDateParameter = lastPasswordFailureDate.HasValue ?
                new ObjectParameter("LastPasswordFailureDate", lastPasswordFailureDate) :
                new ObjectParameter("LastPasswordFailureDate", typeof(System.DateTime));
    
            var passwordFailuresSinceLastSuccessParameter = passwordFailuresSinceLastSuccess.HasValue ?
                new ObjectParameter("PasswordFailuresSinceLastSuccess", passwordFailuresSinceLastSuccess) :
                new ObjectParameter("PasswordFailuresSinceLastSuccess", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordChangedDateParameter = passwordChangedDate.HasValue ?
                new ObjectParameter("PasswordChangedDate", passwordChangedDate) :
                new ObjectParameter("PasswordChangedDate", typeof(System.DateTime));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var passwordVerificationTokenParameter = passwordVerificationToken != null ?
                new ObjectParameter("PasswordVerificationToken", passwordVerificationToken) :
                new ObjectParameter("PasswordVerificationToken", typeof(string));
    
            var passwordVerificationTokenExpirationDateParameter = passwordVerificationTokenExpirationDate.HasValue ?
                new ObjectParameter("PasswordVerificationTokenExpirationDate", passwordVerificationTokenExpirationDate) :
                new ObjectParameter("PasswordVerificationTokenExpirationDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEWebpagesMembership_InsertTEWebpagesMembership", userIdParameter, aLTERDateParameter, confirmationTokenParameter, isConfirmedParameter, lastPasswordFailureDateParameter, passwordFailuresSinceLastSuccessParameter, passwordParameter, passwordChangedDateParameter, passwordSaltParameter, passwordVerificationTokenParameter, passwordVerificationTokenExpirationDateParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEWebpagesMembership_UpdateTEWebpagesMembership(Nullable<int> userId, Nullable<System.DateTime> createDate, string confirmationToken, Nullable<bool> isConfirmed, Nullable<System.DateTime> lastPasswordFailureDate, Nullable<int> passwordFailuresSinceLastSuccess, string password, Nullable<System.DateTime> passwordChangedDate, string passwordSalt, string passwordVerificationToken, Nullable<System.DateTime> passwordVerificationTokenExpirationDate, Nullable<bool> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var confirmationTokenParameter = confirmationToken != null ?
                new ObjectParameter("ConfirmationToken", confirmationToken) :
                new ObjectParameter("ConfirmationToken", typeof(string));
    
            var isConfirmedParameter = isConfirmed.HasValue ?
                new ObjectParameter("IsConfirmed", isConfirmed) :
                new ObjectParameter("IsConfirmed", typeof(bool));
    
            var lastPasswordFailureDateParameter = lastPasswordFailureDate.HasValue ?
                new ObjectParameter("LastPasswordFailureDate", lastPasswordFailureDate) :
                new ObjectParameter("LastPasswordFailureDate", typeof(System.DateTime));
    
            var passwordFailuresSinceLastSuccessParameter = passwordFailuresSinceLastSuccess.HasValue ?
                new ObjectParameter("PasswordFailuresSinceLastSuccess", passwordFailuresSinceLastSuccess) :
                new ObjectParameter("PasswordFailuresSinceLastSuccess", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordChangedDateParameter = passwordChangedDate.HasValue ?
                new ObjectParameter("PasswordChangedDate", passwordChangedDate) :
                new ObjectParameter("PasswordChangedDate", typeof(System.DateTime));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var passwordVerificationTokenParameter = passwordVerificationToken != null ?
                new ObjectParameter("PasswordVerificationToken", passwordVerificationToken) :
                new ObjectParameter("PasswordVerificationToken", typeof(string));
    
            var passwordVerificationTokenExpirationDateParameter = passwordVerificationTokenExpirationDate.HasValue ?
                new ObjectParameter("PasswordVerificationTokenExpirationDate", passwordVerificationTokenExpirationDate) :
                new ObjectParameter("PasswordVerificationTokenExpirationDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEWebpagesMembership_UpdateTEWebpagesMembership", userIdParameter, createDateParameter, confirmationTokenParameter, isConfirmedParameter, lastPasswordFailureDateParameter, passwordFailuresSinceLastSuccessParameter, passwordParameter, passwordChangedDateParameter, passwordSaltParameter, passwordVerificationTokenParameter, passwordVerificationTokenExpirationDateParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEWebpagesRoles_DeleteTEWebpagesRoles(Nullable<int> roleId, ObjectParameter result)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEWebpagesRoles_DeleteTEWebpagesRoles", roleIdParameter, result);
        }
    
        public virtual ObjectResult<uspTEWebpagesRoles_GetAllTEWebpagesRoles_Result> uspTEWebpagesRoles_GetAllTEWebpagesRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEWebpagesRoles_GetAllTEWebpagesRoles_Result>("uspTEWebpagesRoles_GetAllTEWebpagesRoles");
        }
    
        public virtual ObjectResult<uspTEWebpagesRoles_GetTEWebpagesRoles_ByRoleId_Result> uspTEWebpagesRoles_GetTEWebpagesRoles_ByRoleId(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTEWebpagesRoles_GetTEWebpagesRoles_ByRoleId_Result>("uspTEWebpagesRoles_GetTEWebpagesRoles_ByRoleId", roleIdParameter);
        }
    
        public virtual int uspTEWebpagesRoles_InsertTEWebpagesRoles(string roleName, string bizAppId, Nullable<bool> isDeleted, Nullable<bool> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var bizAppIdParameter = bizAppId != null ?
                new ObjectParameter("BizAppId", bizAppId) :
                new ObjectParameter("BizAppId", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(bool));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEWebpagesRoles_InsertTEWebpagesRoles", roleNameParameter, bizAppIdParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEWebpagesRoles_UpdateTEWebpagesRoles(Nullable<int> roleId, string roleName, string bizAppId, Nullable<bool> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var bizAppIdParameter = bizAppId != null ?
                new ObjectParameter("BizAppId", bizAppId) :
                new ObjectParameter("BizAppId", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEWebpagesRoles_UpdateTEWebpagesRoles", roleIdParameter, roleNameParameter, bizAppIdParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEWebpagesUsersInRoles_DeleteTEWebpagesUsersInRoles(Nullable<int> userId, ObjectParameter result)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEWebpagesUsersInRoles_DeleteTEWebpagesUsersInRoles", userIdParameter, result);
        }
    
        public virtual int uspTEWebpagesUsersInRoles_GetAllTEWebpagesUsersInRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEWebpagesUsersInRoles_GetAllTEWebpagesUsersInRoles");
        }
    
        public virtual int uspTEWebpagesUsersInRoles_GetTEWebpagesUsersInRoles_ByUserId(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEWebpagesUsersInRoles_GetTEWebpagesUsersInRoles_ByUserId", userIdParameter);
        }
    
        public virtual int uspTEWebpagesusersInRoles_InsertTEWebpagesusersInRoles(Nullable<int> userId, Nullable<int> roleId, Nullable<bool> isDeleted, Nullable<int> lastModifiedBy_Id, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var lastModifiedBy_IdParameter = lastModifiedBy_Id.HasValue ?
                new ObjectParameter("LastModifiedBy_Id", lastModifiedBy_Id) :
                new ObjectParameter("LastModifiedBy_Id", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEWebpagesusersInRoles_InsertTEWebpagesusersInRoles", userIdParameter, roleIdParameter, isDeletedParameter, lastModifiedBy_IdParameter, lastModifiedDateParameter, result);
        }
    
        public virtual int uspTEWebpagesUsersInRoles_UpdateTEWebpagesUsersInRoles(Nullable<int> userId, Nullable<int> roleId, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, ObjectParameter result)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(int));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTEWebpagesUsersInRoles_UpdateTEWebpagesUsersInRoles", userIdParameter, roleIdParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedDateParameter, result);
        }
    
        public virtual ObjectResult<uspyBySpecificationCategoryID_Result> uspyBySpecificationCategoryID(Nullable<int> specificationCategoryID)
        {
            var specificationCategoryIDParameter = specificationCategoryID.HasValue ?
                new ObjectParameter("SpecificationCategoryID", specificationCategoryID) :
                new ObjectParameter("SpecificationCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspyBySpecificationCategoryID_Result>("uspyBySpecificationCategoryID", specificationCategoryIDParameter);
        }
    }
}
